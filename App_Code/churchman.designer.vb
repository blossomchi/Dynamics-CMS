'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Churchdb")>  _
Partial Public Class churchmanDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertUnitTable(instance As UnitTable)
    End Sub
  Partial Private Sub UpdateUnitTable(instance As UnitTable)
    End Sub
  Partial Private Sub DeleteUnitTable(instance As UnitTable)
    End Sub
  Partial Private Sub InsertParishTable(instance As ParishTable)
    End Sub
  Partial Private Sub UpdateParishTable(instance As ParishTable)
    End Sub
  Partial Private Sub DeleteParishTable(instance As ParishTable)
    End Sub
  Partial Private Sub InsertChurchvaluesTable(instance As ChurchvaluesTable)
    End Sub
  Partial Private Sub UpdateChurchvaluesTable(instance As ChurchvaluesTable)
    End Sub
  Partial Private Sub DeleteChurchvaluesTable(instance As ChurchvaluesTable)
    End Sub
  Partial Private Sub InsertStateTable(instance As StateTable)
    End Sub
  Partial Private Sub UpdateStateTable(instance As StateTable)
    End Sub
  Partial Private Sub DeleteStateTable(instance As StateTable)
    End Sub
  Partial Private Sub InsertChurchHierachy(instance As ChurchHierachy)
    End Sub
  Partial Private Sub UpdateChurchHierachy(instance As ChurchHierachy)
    End Sub
  Partial Private Sub DeleteChurchHierachy(instance As ChurchHierachy)
    End Sub
  Partial Private Sub InsertCommTable(instance As CommTable)
    End Sub
  Partial Private Sub UpdateCommTable(instance As CommTable)
    End Sub
  Partial Private Sub DeleteCommTable(instance As CommTable)
    End Sub
  Partial Private Sub InsertClassTable(instance As ClassTable)
    End Sub
  Partial Private Sub UpdateClassTable(instance As ClassTable)
    End Sub
  Partial Private Sub DeleteClassTable(instance As ClassTable)
    End Sub
  Partial Private Sub InsertRoleTable(instance As RoleTable)
    End Sub
  Partial Private Sub UpdateRoleTable(instance As RoleTable)
    End Sub
  Partial Private Sub DeleteRoleTable(instance As RoleTable)
    End Sub
  Partial Private Sub InsertUserTable(instance As UserTable)
    End Sub
  Partial Private Sub UpdateUserTable(instance As UserTable)
    End Sub
  Partial Private Sub DeleteUserTable(instance As UserTable)
    End Sub
  Partial Private Sub InsertAddvisitorTable(instance As AddvisitorTable)
    End Sub
  Partial Private Sub UpdateAddvisitorTable(instance As AddvisitorTable)
    End Sub
  Partial Private Sub DeleteAddvisitorTable(instance As AddvisitorTable)
    End Sub
  Partial Private Sub InsertAreaTable(instance As AreaTable)
    End Sub
  Partial Private Sub UpdateAreaTable(instance As AreaTable)
    End Sub
  Partial Private Sub DeleteAreaTable(instance As AreaTable)
    End Sub
  Partial Private Sub InsertDutyTable(instance As DutyTable)
    End Sub
  Partial Private Sub UpdateDutyTable(instance As DutyTable)
    End Sub
  Partial Private Sub DeleteDutyTable(instance As DutyTable)
    End Sub
  Partial Private Sub InsertProjectTable(instance As ProjectTable)
    End Sub
  Partial Private Sub UpdateProjectTable(instance As ProjectTable)
    End Sub
  Partial Private Sub DeleteProjectTable(instance As ProjectTable)
    End Sub
  Partial Private Sub InsertTaxTable(instance As TaxTable)
    End Sub
  Partial Private Sub UpdateTaxTable(instance As TaxTable)
    End Sub
  Partial Private Sub DeleteTaxTable(instance As TaxTable)
    End Sub
  Partial Private Sub InsertSupplierTable(instance As SupplierTable)
    End Sub
  Partial Private Sub UpdateSupplierTable(instance As SupplierTable)
    End Sub
  Partial Private Sub DeleteSupplierTable(instance As SupplierTable)
    End Sub
  Partial Private Sub InsertIncomeTable(instance As IncomeTable)
    End Sub
  Partial Private Sub UpdateIncomeTable(instance As IncomeTable)
    End Sub
  Partial Private Sub DeleteIncomeTable(instance As IncomeTable)
    End Sub
  Partial Private Sub InsertPaymentMethodTable(instance As PaymentMethodTable)
    End Sub
  Partial Private Sub UpdatePaymentMethodTable(instance As PaymentMethodTable)
    End Sub
  Partial Private Sub DeletePaymentMethodTable(instance As PaymentMethodTable)
    End Sub
  Partial Private Sub InsertCash_bankrelationshipTable(instance As Cash_bankrelationshipTable)
    End Sub
  Partial Private Sub UpdateCash_bankrelationshipTable(instance As Cash_bankrelationshipTable)
    End Sub
  Partial Private Sub DeleteCash_bankrelationshipTable(instance As Cash_bankrelationshipTable)
    End Sub
  Partial Private Sub InsertIncome_ExpenditureTable(instance As Income_ExpenditureTable)
    End Sub
  Partial Private Sub UpdateIncome_ExpenditureTable(instance As Income_ExpenditureTable)
    End Sub
  Partial Private Sub DeleteIncome_ExpenditureTable(instance As Income_ExpenditureTable)
    End Sub
  Partial Private Sub InsertReport_typeTable(instance As Report_typeTable)
    End Sub
  Partial Private Sub UpdateReport_typeTable(instance As Report_typeTable)
    End Sub
  Partial Private Sub DeleteReport_typeTable(instance As Report_typeTable)
    End Sub
  Partial Private Sub InsertAsset_liabilityTable(instance As Asset_liabilityTable)
    End Sub
  Partial Private Sub UpdateAsset_liabilityTable(instance As Asset_liabilityTable)
    End Sub
  Partial Private Sub DeleteAsset_liabilityTable(instance As Asset_liabilityTable)
    End Sub
  Partial Private Sub InsertCurrent_nonCurrentTable(instance As Current_nonCurrentTable)
    End Sub
  Partial Private Sub UpdateCurrent_nonCurrentTable(instance As Current_nonCurrentTable)
    End Sub
  Partial Private Sub DeleteCurrent_nonCurrentTable(instance As Current_nonCurrentTable)
    End Sub
  Partial Private Sub InsertTitheTable(instance As TitheTable)
    End Sub
  Partial Private Sub UpdateTitheTable(instance As TitheTable)
    End Sub
  Partial Private Sub DeleteTitheTable(instance As TitheTable)
    End Sub
  Partial Private Sub InsertTithePaymentTable(instance As TithePaymentTable)
    End Sub
  Partial Private Sub UpdateTithePaymentTable(instance As TithePaymentTable)
    End Sub
  Partial Private Sub DeleteTithePaymentTable(instance As TithePaymentTable)
    End Sub
  Partial Private Sub InsertAccountRecivableTable(instance As AccountRecivableTable)
    End Sub
  Partial Private Sub UpdateAccountRecivableTable(instance As AccountRecivableTable)
    End Sub
  Partial Private Sub DeleteAccountRecivableTable(instance As AccountRecivableTable)
    End Sub
  Partial Private Sub InsertTitheAccountTable(instance As TitheAccountTable)
    End Sub
  Partial Private Sub UpdateTitheAccountTable(instance As TitheAccountTable)
    End Sub
  Partial Private Sub DeleteTitheAccountTable(instance As TitheAccountTable)
    End Sub
  Partial Private Sub InsertChartAccountTable(instance As ChartAccountTable)
    End Sub
  Partial Private Sub UpdateChartAccountTable(instance As ChartAccountTable)
    End Sub
  Partial Private Sub DeleteChartAccountTable(instance As ChartAccountTable)
    End Sub
  Partial Private Sub InsertPledgeAccountTable(instance As PledgeAccountTable)
    End Sub
  Partial Private Sub UpdatePledgeAccountTable(instance As PledgeAccountTable)
    End Sub
  Partial Private Sub DeletePledgeAccountTable(instance As PledgeAccountTable)
    End Sub
  Partial Private Sub InsertCountry(instance As Country)
    End Sub
  Partial Private Sub UpdateCountry(instance As Country)
    End Sub
  Partial Private Sub DeleteCountry(instance As Country)
    End Sub
  Partial Private Sub InsertExchange_RateTable(instance As Exchange_RateTable)
    End Sub
  Partial Private Sub UpdateExchange_RateTable(instance As Exchange_RateTable)
    End Sub
  Partial Private Sub DeleteExchange_RateTable(instance As Exchange_RateTable)
    End Sub
  Partial Private Sub InsertCurrency_CodeTable(instance As Currency_CodeTable)
    End Sub
  Partial Private Sub UpdateCurrency_CodeTable(instance As Currency_CodeTable)
    End Sub
  Partial Private Sub DeleteCurrency_CodeTable(instance As Currency_CodeTable)
    End Sub
  Partial Private Sub InsertTitheBankPaymentTable(instance As TitheBankPaymentTable)
    End Sub
  Partial Private Sub UpdateTitheBankPaymentTable(instance As TitheBankPaymentTable)
    End Sub
  Partial Private Sub DeleteTitheBankPaymentTable(instance As TitheBankPaymentTable)
    End Sub
  Partial Private Sub InsertPledgeTable(instance As PledgeTable)
    End Sub
  Partial Private Sub UpdatePledgeTable(instance As PledgeTable)
    End Sub
  Partial Private Sub DeletePledgeTable(instance As PledgeTable)
    End Sub
  Partial Private Sub InsertPledgeBankPaymentTable(instance As PledgeBankPaymentTable)
    End Sub
  Partial Private Sub UpdatePledgeBankPaymentTable(instance As PledgeBankPaymentTable)
    End Sub
  Partial Private Sub DeletePledgeBankPaymentTable(instance As PledgeBankPaymentTable)
    End Sub
  Partial Private Sub InsertPledgePaymentTable(instance As PledgePaymentTable)
    End Sub
  Partial Private Sub UpdatePledgePaymentTable(instance As PledgePaymentTable)
    End Sub
  Partial Private Sub DeletePledgePaymentTable(instance As PledgePaymentTable)
    End Sub
  Partial Private Sub InsertIncomeAccountTable(instance As IncomeAccountTable)
    End Sub
  Partial Private Sub UpdateIncomeAccountTable(instance As IncomeAccountTable)
    End Sub
  Partial Private Sub DeleteIncomeAccountTable(instance As IncomeAccountTable)
    End Sub
  Partial Private Sub InsertIncomeBankPaymentTable(instance As IncomeBankPaymentTable)
    End Sub
  Partial Private Sub UpdateIncomeBankPaymentTable(instance As IncomeBankPaymentTable)
    End Sub
  Partial Private Sub DeleteIncomeBankPaymentTable(instance As IncomeBankPaymentTable)
    End Sub
  Partial Private Sub InsertOther_incomeAccountTable(instance As Other_incomeAccountTable)
    End Sub
  Partial Private Sub UpdateOther_incomeAccountTable(instance As Other_incomeAccountTable)
    End Sub
  Partial Private Sub DeleteOther_incomeAccountTable(instance As Other_incomeAccountTable)
    End Sub
  Partial Private Sub InsertIncomeOffTable(instance As IncomeOffTable)
    End Sub
  Partial Private Sub UpdateIncomeOffTable(instance As IncomeOffTable)
    End Sub
  Partial Private Sub DeleteIncomeOffTable(instance As IncomeOffTable)
    End Sub
  Partial Private Sub InsertCash_BookTable(instance As Cash_BookTable)
    End Sub
  Partial Private Sub UpdateCash_BookTable(instance As Cash_BookTable)
    End Sub
  Partial Private Sub DeleteCash_BookTable(instance As Cash_BookTable)
    End Sub
  Partial Private Sub InsertChurchDetailTable(instance As ChurchDetailTable)
    End Sub
  Partial Private Sub UpdateChurchDetailTable(instance As ChurchDetailTable)
    End Sub
  Partial Private Sub DeleteChurchDetailTable(instance As ChurchDetailTable)
    End Sub
  Partial Private Sub InsertMemberImageTable(instance As MemberImageTable)
    End Sub
  Partial Private Sub UpdateMemberImageTable(instance As MemberImageTable)
    End Sub
  Partial Private Sub DeleteMemberImageTable(instance As MemberImageTable)
    End Sub
  Partial Private Sub InsertExpensesdetailsTable(instance As ExpensesdetailsTable)
    End Sub
  Partial Private Sub UpdateExpensesdetailsTable(instance As ExpensesdetailsTable)
    End Sub
  Partial Private Sub DeleteExpensesdetailsTable(instance As ExpensesdetailsTable)
    End Sub
  Partial Private Sub InsertExpensesHeadTable(instance As ExpensesHeadTable)
    End Sub
  Partial Private Sub UpdateExpensesHeadTable(instance As ExpensesHeadTable)
    End Sub
  Partial Private Sub DeleteExpensesHeadTable(instance As ExpensesHeadTable)
    End Sub
  Partial Private Sub InsertWelfareBankPaymentTable(instance As WelfareBankPaymentTable)
    End Sub
  Partial Private Sub UpdateWelfareBankPaymentTable(instance As WelfareBankPaymentTable)
    End Sub
  Partial Private Sub DeleteWelfareBankPaymentTable(instance As WelfareBankPaymentTable)
    End Sub
  Partial Private Sub InsertWarefarePaymentTable(instance As WarefarePaymentTable)
    End Sub
  Partial Private Sub UpdateWarefarePaymentTable(instance As WarefarePaymentTable)
    End Sub
  Partial Private Sub DeleteWarefarePaymentTable(instance As WarefarePaymentTable)
    End Sub
  Partial Private Sub InsertWelfareMainTable(instance As WelfareMainTable)
    End Sub
  Partial Private Sub UpdateWelfareMainTable(instance As WelfareMainTable)
    End Sub
  Partial Private Sub DeleteWelfareMainTable(instance As WelfareMainTable)
    End Sub
  Partial Private Sub InsertMarriageTable(instance As MarriageTable)
    End Sub
  Partial Private Sub UpdateMarriageTable(instance As MarriageTable)
    End Sub
  Partial Private Sub DeleteMarriageTable(instance As MarriageTable)
    End Sub
  Partial Private Sub InsertDedicationImageTable(instance As DedicationImageTable)
    End Sub
  Partial Private Sub UpdateDedicationImageTable(instance As DedicationImageTable)
    End Sub
  Partial Private Sub DeleteDedicationImageTable(instance As DedicationImageTable)
    End Sub
  Partial Private Sub InsertVisitationTable(instance As VisitationTable)
    End Sub
  Partial Private Sub UpdateVisitationTable(instance As VisitationTable)
    End Sub
  Partial Private Sub DeleteVisitationTable(instance As VisitationTable)
    End Sub
  Partial Private Sub InsertBaptismTable(instance As BaptismTable)
    End Sub
  Partial Private Sub UpdateBaptismTable(instance As BaptismTable)
    End Sub
  Partial Private Sub DeleteBaptismTable(instance As BaptismTable)
    End Sub
  Partial Private Sub InsertBaptismImageTable(instance As BaptismImageTable)
    End Sub
  Partial Private Sub UpdateBaptismImageTable(instance As BaptismImageTable)
    End Sub
  Partial Private Sub DeleteBaptismImageTable(instance As BaptismImageTable)
    End Sub
  Partial Private Sub InsertEventTable(instance As EventTable)
    End Sub
  Partial Private Sub UpdateEventTable(instance As EventTable)
    End Sub
  Partial Private Sub DeleteEventTable(instance As EventTable)
    End Sub
  Partial Private Sub InsertRaiseExpensesHdTable(instance As RaiseExpensesHdTable)
    End Sub
  Partial Private Sub UpdateRaiseExpensesHdTable(instance As RaiseExpensesHdTable)
    End Sub
  Partial Private Sub DeleteRaiseExpensesHdTable(instance As RaiseExpensesHdTable)
    End Sub
  Partial Private Sub InsertRaiseExpensedDetailTable(instance As RaiseExpensedDetailTable)
    End Sub
  Partial Private Sub UpdateRaiseExpensedDetailTable(instance As RaiseExpensedDetailTable)
    End Sub
  Partial Private Sub DeleteRaiseExpensedDetailTable(instance As RaiseExpensedDetailTable)
    End Sub
  Partial Private Sub InsertRaiseExpenPaymentTable(instance As RaiseExpenPaymentTable)
    End Sub
  Partial Private Sub UpdateRaiseExpenPaymentTable(instance As RaiseExpenPaymentTable)
    End Sub
  Partial Private Sub DeleteRaiseExpenPaymentTable(instance As RaiseExpenPaymentTable)
    End Sub
  Partial Private Sub InsertRaiseBankPaymentTable(instance As RaiseBankPaymentTable)
    End Sub
  Partial Private Sub UpdateRaiseBankPaymentTable(instance As RaiseBankPaymentTable)
    End Sub
  Partial Private Sub DeleteRaiseBankPaymentTable(instance As RaiseBankPaymentTable)
    End Sub
  Partial Private Sub InsertExpensesAccountTable(instance As ExpensesAccountTable)
    End Sub
  Partial Private Sub UpdateExpensesAccountTable(instance As ExpensesAccountTable)
    End Sub
  Partial Private Sub DeleteExpensesAccountTable(instance As ExpensesAccountTable)
    End Sub
  Partial Private Sub InsertPaymentVoucherTable(instance As PaymentVoucherTable)
    End Sub
  Partial Private Sub UpdatePaymentVoucherTable(instance As PaymentVoucherTable)
    End Sub
  Partial Private Sub DeletePaymentVoucherTable(instance As PaymentVoucherTable)
    End Sub
  Partial Private Sub InsertAccountPayableTable(instance As AccountPayableTable)
    End Sub
  Partial Private Sub UpdateAccountPayableTable(instance As AccountPayableTable)
    End Sub
  Partial Private Sub DeleteAccountPayableTable(instance As AccountPayableTable)
    End Sub
  Partial Private Sub InsertAuthenticalTable(instance As AuthenticalTable)
    End Sub
  Partial Private Sub UpdateAuthenticalTable(instance As AuthenticalTable)
    End Sub
  Partial Private Sub DeleteAuthenticalTable(instance As AuthenticalTable)
    End Sub
  Partial Private Sub InsertQuestionTable(instance As QuestionTable)
    End Sub
  Partial Private Sub UpdateQuestionTable(instance As QuestionTable)
    End Sub
  Partial Private Sub DeleteQuestionTable(instance As QuestionTable)
    End Sub
  Partial Private Sub Insertaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Updateaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Deleteaspnet_Role(instance As aspnet_Role)
    End Sub
  Partial Private Sub Insertaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Updateaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Deleteaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Insertaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Updateaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Insertaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Updateaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub Deleteaspnet_UsersInRole(instance As aspnet_UsersInRole)
    End Sub
  Partial Private Sub InsertVowAccountTable(instance As VowAccountTable)
    End Sub
  Partial Private Sub UpdateVowAccountTable(instance As VowAccountTable)
    End Sub
  Partial Private Sub DeleteVowAccountTable(instance As VowAccountTable)
    End Sub
  Partial Private Sub InsertSeedfaithaaccountTable(instance As SeedfaithaaccountTable)
    End Sub
  Partial Private Sub UpdateSeedfaithaaccountTable(instance As SeedfaithaaccountTable)
    End Sub
  Partial Private Sub DeleteSeedfaithaaccountTable(instance As SeedfaithaaccountTable)
    End Sub
  Partial Private Sub InsertFirstfruitaccTable(instance As FirstfruitaccTable)
    End Sub
  Partial Private Sub UpdateFirstfruitaccTable(instance As FirstfruitaccTable)
    End Sub
  Partial Private Sub DeleteFirstfruitaccTable(instance As FirstfruitaccTable)
    End Sub
  Partial Private Sub InsertMembersGroup(instance As MembersGroup)
    End Sub
  Partial Private Sub UpdateMembersGroup(instance As MembersGroup)
    End Sub
  Partial Private Sub DeleteMembersGroup(instance As MembersGroup)
    End Sub
  Partial Private Sub InsertPendingSavingUnit(instance As PendingSavingUnit)
    End Sub
  Partial Private Sub UpdatePendingSavingUnit(instance As PendingSavingUnit)
    End Sub
  Partial Private Sub DeletePendingSavingUnit(instance As PendingSavingUnit)
    End Sub
  Partial Private Sub InsertMembersUnit(instance As MembersUnit)
    End Sub
  Partial Private Sub UpdateMembersUnit(instance As MembersUnit)
    End Sub
  Partial Private Sub DeleteMembersUnit(instance As MembersUnit)
    End Sub
  Partial Private Sub InsertMemberDeath(instance As MemberDeath)
    End Sub
  Partial Private Sub UpdateMemberDeath(instance As MemberDeath)
    End Sub
  Partial Private Sub DeleteMemberDeath(instance As MemberDeath)
    End Sub
  Partial Private Sub InsertChurchDesignationTable(instance As ChurchDesignationTable)
    End Sub
  Partial Private Sub UpdateChurchDesignationTable(instance As ChurchDesignationTable)
    End Sub
  Partial Private Sub DeleteChurchDesignationTable(instance As ChurchDesignationTable)
    End Sub
  Partial Private Sub InsertBankTable(instance As BankTable)
    End Sub
  Partial Private Sub UpdateBankTable(instance As BankTable)
    End Sub
  Partial Private Sub DeleteBankTable(instance As BankTable)
    End Sub
  Partial Private Sub InsertMinisterTable(instance As MinisterTable)
    End Sub
  Partial Private Sub UpdateMinisterTable(instance As MinisterTable)
    End Sub
  Partial Private Sub DeleteMinisterTable(instance As MinisterTable)
    End Sub
  Partial Private Sub InsertFunctionalGroupTable(instance As FunctionalGroupTable)
    End Sub
  Partial Private Sub UpdateFunctionalGroupTable(instance As FunctionalGroupTable)
    End Sub
  Partial Private Sub DeleteFunctionalGroupTable(instance As FunctionalGroupTable)
    End Sub
  Partial Private Sub InsertChildrenTable(instance As ChildrenTable)
    End Sub
  Partial Private Sub UpdateChildrenTable(instance As ChildrenTable)
    End Sub
  Partial Private Sub DeleteChildrenTable(instance As ChildrenTable)
    End Sub
  Partial Private Sub InsertOrderServiceTable(instance As OrderServiceTable)
    End Sub
  Partial Private Sub UpdateOrderServiceTable(instance As OrderServiceTable)
    End Sub
  Partial Private Sub DeleteOrderServiceTable(instance As OrderServiceTable)
    End Sub
  Partial Private Sub InsertPastorsTitheAcountTable(instance As PastorsTitheAcountTable)
    End Sub
  Partial Private Sub UpdatePastorsTitheAcountTable(instance As PastorsTitheAcountTable)
    End Sub
  Partial Private Sub DeletePastorsTitheAcountTable(instance As PastorsTitheAcountTable)
    End Sub
  Partial Private Sub InsertpastorsTitheBankPaymentTable(instance As pastorsTitheBankPaymentTable)
    End Sub
  Partial Private Sub UpdatepastorsTitheBankPaymentTable(instance As pastorsTitheBankPaymentTable)
    End Sub
  Partial Private Sub DeletepastorsTitheBankPaymentTable(instance As pastorsTitheBankPaymentTable)
    End Sub
  Partial Private Sub InsertPastorsTithePaymentTable(instance As PastorsTithePaymentTable)
    End Sub
  Partial Private Sub UpdatePastorsTithePaymentTable(instance As PastorsTithePaymentTable)
    End Sub
  Partial Private Sub DeletePastorsTithePaymentTable(instance As PastorsTithePaymentTable)
    End Sub
  Partial Private Sub InsertPastorsTitheTable(instance As PastorsTitheTable)
    End Sub
  Partial Private Sub UpdatePastorsTitheTable(instance As PastorsTitheTable)
    End Sub
  Partial Private Sub DeletePastorsTitheTable(instance As PastorsTitheTable)
    End Sub
  Partial Private Sub InsertPastorsAccountTable(instance As PastorsAccountTable)
    End Sub
  Partial Private Sub UpdatePastorsAccountTable(instance As PastorsAccountTable)
    End Sub
  Partial Private Sub DeletePastorsAccountTable(instance As PastorsAccountTable)
    End Sub
  Partial Private Sub InsertHierarchyTable(instance As HierarchyTable)
    End Sub
  Partial Private Sub UpdateHierarchyTable(instance As HierarchyTable)
    End Sub
  Partial Private Sub DeleteHierarchyTable(instance As HierarchyTable)
    End Sub
  Partial Private Sub InsertHierarcyBankPaymentTable(instance As HierarcyBankPaymentTable)
    End Sub
  Partial Private Sub UpdateHierarcyBankPaymentTable(instance As HierarcyBankPaymentTable)
    End Sub
  Partial Private Sub DeleteHierarcyBankPaymentTable(instance As HierarcyBankPaymentTable)
    End Sub
  Partial Private Sub InsertHierarcyAccountTable(instance As HierarcyAccountTable)
    End Sub
  Partial Private Sub UpdateHierarcyAccountTable(instance As HierarcyAccountTable)
    End Sub
  Partial Private Sub DeleteHierarcyAccountTable(instance As HierarcyAccountTable)
    End Sub
  Partial Private Sub InsertPensionTable(instance As PensionTable)
    End Sub
  Partial Private Sub UpdatePensionTable(instance As PensionTable)
    End Sub
  Partial Private Sub DeletePensionTable(instance As PensionTable)
    End Sub
  Partial Private Sub InsertPensionPaymentTable(instance As PensionPaymentTable)
    End Sub
  Partial Private Sub UpdatePensionPaymentTable(instance As PensionPaymentTable)
    End Sub
  Partial Private Sub DeletePensionPaymentTable(instance As PensionPaymentTable)
    End Sub
  Partial Private Sub InsertPensionBankPaymentTable(instance As PensionBankPaymentTable)
    End Sub
  Partial Private Sub UpdatePensionBankPaymentTable(instance As PensionBankPaymentTable)
    End Sub
  Partial Private Sub DeletePensionBankPaymentTable(instance As PensionBankPaymentTable)
    End Sub
  Partial Private Sub InsertPensionAccountTable(instance As PensionAccountTable)
    End Sub
  Partial Private Sub UpdatePensionAccountTable(instance As PensionAccountTable)
    End Sub
  Partial Private Sub DeletePensionAccountTable(instance As PensionAccountTable)
    End Sub
  Partial Private Sub InsertHierarchyPaymentTable(instance As HierarchyPaymentTable)
    End Sub
  Partial Private Sub UpdateHierarchyPaymentTable(instance As HierarchyPaymentTable)
    End Sub
  Partial Private Sub DeleteHierarchyPaymentTable(instance As HierarchyPaymentTable)
    End Sub
  Partial Private Sub InsertWelfareAccountTable(instance As WelfareAccountTable)
    End Sub
  Partial Private Sub UpdateWelfareAccountTable(instance As WelfareAccountTable)
    End Sub
  Partial Private Sub DeleteWelfareAccountTable(instance As WelfareAccountTable)
    End Sub
  Partial Private Sub InsertHomeCellZonesTable(instance As HomeCellZonesTable)
    End Sub
  Partial Private Sub UpdateHomeCellZonesTable(instance As HomeCellZonesTable)
    End Sub
  Partial Private Sub DeleteHomeCellZonesTable(instance As HomeCellZonesTable)
    End Sub
  Partial Private Sub InsertHomeCellZonesPastorsTable(instance As HomeCellZonesPastorsTable)
    End Sub
  Partial Private Sub UpdateHomeCellZonesPastorsTable(instance As HomeCellZonesPastorsTable)
    End Sub
  Partial Private Sub DeleteHomeCellZonesPastorsTable(instance As HomeCellZonesPastorsTable)
    End Sub
  Partial Private Sub InsertHomecellTable(instance As HomecellTable)
    End Sub
  Partial Private Sub UpdateHomecellTable(instance As HomecellTable)
    End Sub
  Partial Private Sub DeleteHomecellTable(instance As HomecellTable)
    End Sub
  Partial Private Sub InsertFamilyTable(instance As FamilyTable)
    End Sub
  Partial Private Sub UpdateFamilyTable(instance As FamilyTable)
    End Sub
  Partial Private Sub DeleteFamilyTable(instance As FamilyTable)
    End Sub
  Partial Private Sub InsertSermonTable(instance As SermonTable)
    End Sub
  Partial Private Sub UpdateSermonTable(instance As SermonTable)
    End Sub
  Partial Private Sub DeleteSermonTable(instance As SermonTable)
    End Sub
  Partial Private Sub InsertLocation(instance As Location)
    End Sub
  Partial Private Sub UpdateLocation(instance As Location)
    End Sub
  Partial Private Sub DeleteLocation(instance As Location)
    End Sub
  Partial Private Sub InsertDedicationTable(instance As DedicationTable)
    End Sub
  Partial Private Sub UpdateDedicationTable(instance As DedicationTable)
    End Sub
  Partial Private Sub DeleteDedicationTable(instance As DedicationTable)
    End Sub
  Partial Private Sub InsertMonthTable(instance As MonthTable)
    End Sub
  Partial Private Sub UpdateMonthTable(instance As MonthTable)
    End Sub
  Partial Private Sub DeleteMonthTable(instance As MonthTable)
    End Sub
  Partial Private Sub InsertChildrenImageTable(instance As ChildrenImageTable)
    End Sub
  Partial Private Sub UpdateChildrenImageTable(instance As ChildrenImageTable)
    End Sub
  Partial Private Sub DeleteChildrenImageTable(instance As ChildrenImageTable)
    End Sub
  Partial Private Sub InsertFamilyImageTable(instance As FamilyImageTable)
    End Sub
  Partial Private Sub UpdateFamilyImageTable(instance As FamilyImageTable)
    End Sub
  Partial Private Sub DeleteFamilyImageTable(instance As FamilyImageTable)
    End Sub
  Partial Private Sub InsertMembershipTable(instance As MembershipTable)
    End Sub
  Partial Private Sub UpdateMembershipTable(instance As MembershipTable)
    End Sub
  Partial Private Sub DeleteMembershipTable(instance As MembershipTable)
    End Sub
  Partial Private Sub InsertIncomePaymentTable(instance As IncomePaymentTable)
    End Sub
  Partial Private Sub UpdateIncomePaymentTable(instance As IncomePaymentTable)
    End Sub
  Partial Private Sub DeleteIncomePaymentTable(instance As IncomePaymentTable)
    End Sub
  Partial Private Sub InsertAttendanceTotalTable(instance As AttendanceTotalTable)
    End Sub
  Partial Private Sub UpdateAttendanceTotalTable(instance As AttendanceTotalTable)
    End Sub
  Partial Private Sub DeleteAttendanceTotalTable(instance As AttendanceTotalTable)
    End Sub
  Partial Private Sub InsertAttendanceTable(instance As AttendanceTable)
    End Sub
  Partial Private Sub UpdateAttendanceTable(instance As AttendanceTable)
    End Sub
  Partial Private Sub DeleteAttendanceTable(instance As AttendanceTable)
    End Sub
  Partial Private Sub InsertLoanAccountTable(instance As LoanAccountTable)
    End Sub
  Partial Private Sub UpdateLoanAccountTable(instance As LoanAccountTable)
    End Sub
  Partial Private Sub DeleteLoanAccountTable(instance As LoanAccountTable)
    End Sub
  Partial Private Sub InsertLoanPVTable(instance As LoanPVTable)
    End Sub
  Partial Private Sub UpdateLoanPVTable(instance As LoanPVTable)
    End Sub
  Partial Private Sub DeleteLoanPVTable(instance As LoanPVTable)
    End Sub
  Partial Private Sub InsertLoanHeadTable(instance As LoanHeadTable)
    End Sub
  Partial Private Sub UpdateLoanHeadTable(instance As LoanHeadTable)
    End Sub
  Partial Private Sub DeleteLoanHeadTable(instance As LoanHeadTable)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ChurchdbConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property UnitTables() As System.Data.Linq.Table(Of UnitTable)
		Get
			Return Me.GetTable(Of UnitTable)
		End Get
	End Property
	
	Public ReadOnly Property ParishTables() As System.Data.Linq.Table(Of ParishTable)
		Get
			Return Me.GetTable(Of ParishTable)
		End Get
	End Property
	
	Public ReadOnly Property ChurchvaluesTables() As System.Data.Linq.Table(Of ChurchvaluesTable)
		Get
			Return Me.GetTable(Of ChurchvaluesTable)
		End Get
	End Property
	
	Public ReadOnly Property StateTables() As System.Data.Linq.Table(Of StateTable)
		Get
			Return Me.GetTable(Of StateTable)
		End Get
	End Property
	
	Public ReadOnly Property ChurchHierachies() As System.Data.Linq.Table(Of ChurchHierachy)
		Get
			Return Me.GetTable(Of ChurchHierachy)
		End Get
	End Property
	
	Public ReadOnly Property CommTables() As System.Data.Linq.Table(Of CommTable)
		Get
			Return Me.GetTable(Of CommTable)
		End Get
	End Property
	
	Public ReadOnly Property ClassTables() As System.Data.Linq.Table(Of ClassTable)
		Get
			Return Me.GetTable(Of ClassTable)
		End Get
	End Property
	
	Public ReadOnly Property RoleTables() As System.Data.Linq.Table(Of RoleTable)
		Get
			Return Me.GetTable(Of RoleTable)
		End Get
	End Property
	
	Public ReadOnly Property UserTables() As System.Data.Linq.Table(Of UserTable)
		Get
			Return Me.GetTable(Of UserTable)
		End Get
	End Property
	
	Public ReadOnly Property AddvisitorTables() As System.Data.Linq.Table(Of AddvisitorTable)
		Get
			Return Me.GetTable(Of AddvisitorTable)
		End Get
	End Property
	
	Public ReadOnly Property AreaTables() As System.Data.Linq.Table(Of AreaTable)
		Get
			Return Me.GetTable(Of AreaTable)
		End Get
	End Property
	
	Public ReadOnly Property DutyTables() As System.Data.Linq.Table(Of DutyTable)
		Get
			Return Me.GetTable(Of DutyTable)
		End Get
	End Property
	
	Public ReadOnly Property ProjectTables() As System.Data.Linq.Table(Of ProjectTable)
		Get
			Return Me.GetTable(Of ProjectTable)
		End Get
	End Property
	
	Public ReadOnly Property TaxTables() As System.Data.Linq.Table(Of TaxTable)
		Get
			Return Me.GetTable(Of TaxTable)
		End Get
	End Property
	
	Public ReadOnly Property SupplierTables() As System.Data.Linq.Table(Of SupplierTable)
		Get
			Return Me.GetTable(Of SupplierTable)
		End Get
	End Property
	
	Public ReadOnly Property IncomeTables() As System.Data.Linq.Table(Of IncomeTable)
		Get
			Return Me.GetTable(Of IncomeTable)
		End Get
	End Property
	
	Public ReadOnly Property PaymentMethodTables() As System.Data.Linq.Table(Of PaymentMethodTable)
		Get
			Return Me.GetTable(Of PaymentMethodTable)
		End Get
	End Property
	
	Public ReadOnly Property Cash_bankrelationshipTables() As System.Data.Linq.Table(Of Cash_bankrelationshipTable)
		Get
			Return Me.GetTable(Of Cash_bankrelationshipTable)
		End Get
	End Property
	
	Public ReadOnly Property Income_ExpenditureTables() As System.Data.Linq.Table(Of Income_ExpenditureTable)
		Get
			Return Me.GetTable(Of Income_ExpenditureTable)
		End Get
	End Property
	
	Public ReadOnly Property Report_typeTables() As System.Data.Linq.Table(Of Report_typeTable)
		Get
			Return Me.GetTable(Of Report_typeTable)
		End Get
	End Property
	
	Public ReadOnly Property Asset_liabilityTables() As System.Data.Linq.Table(Of Asset_liabilityTable)
		Get
			Return Me.GetTable(Of Asset_liabilityTable)
		End Get
	End Property
	
	Public ReadOnly Property Current_nonCurrentTables() As System.Data.Linq.Table(Of Current_nonCurrentTable)
		Get
			Return Me.GetTable(Of Current_nonCurrentTable)
		End Get
	End Property
	
	Public ReadOnly Property TitheTables() As System.Data.Linq.Table(Of TitheTable)
		Get
			Return Me.GetTable(Of TitheTable)
		End Get
	End Property
	
	Public ReadOnly Property TithePaymentTables() As System.Data.Linq.Table(Of TithePaymentTable)
		Get
			Return Me.GetTable(Of TithePaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property AccountRecivableTables() As System.Data.Linq.Table(Of AccountRecivableTable)
		Get
			Return Me.GetTable(Of AccountRecivableTable)
		End Get
	End Property
	
	Public ReadOnly Property TitheAccountTables() As System.Data.Linq.Table(Of TitheAccountTable)
		Get
			Return Me.GetTable(Of TitheAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property ChartAccountTables() As System.Data.Linq.Table(Of ChartAccountTable)
		Get
			Return Me.GetTable(Of ChartAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property PledgeAccountTables() As System.Data.Linq.Table(Of PledgeAccountTable)
		Get
			Return Me.GetTable(Of PledgeAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property Countries() As System.Data.Linq.Table(Of Country)
		Get
			Return Me.GetTable(Of Country)
		End Get
	End Property
	
	Public ReadOnly Property Exchange_RateTables() As System.Data.Linq.Table(Of Exchange_RateTable)
		Get
			Return Me.GetTable(Of Exchange_RateTable)
		End Get
	End Property
	
	Public ReadOnly Property Currency_CodeTables() As System.Data.Linq.Table(Of Currency_CodeTable)
		Get
			Return Me.GetTable(Of Currency_CodeTable)
		End Get
	End Property
	
	Public ReadOnly Property TitheBankPaymentTables() As System.Data.Linq.Table(Of TitheBankPaymentTable)
		Get
			Return Me.GetTable(Of TitheBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property PledgeTables() As System.Data.Linq.Table(Of PledgeTable)
		Get
			Return Me.GetTable(Of PledgeTable)
		End Get
	End Property
	
	Public ReadOnly Property PledgeBankPaymentTables() As System.Data.Linq.Table(Of PledgeBankPaymentTable)
		Get
			Return Me.GetTable(Of PledgeBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property PledgePaymentTables() As System.Data.Linq.Table(Of PledgePaymentTable)
		Get
			Return Me.GetTable(Of PledgePaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property IncomeAccountTables() As System.Data.Linq.Table(Of IncomeAccountTable)
		Get
			Return Me.GetTable(Of IncomeAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property IncomeBankPaymentTables() As System.Data.Linq.Table(Of IncomeBankPaymentTable)
		Get
			Return Me.GetTable(Of IncomeBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property Other_incomeAccountTables() As System.Data.Linq.Table(Of Other_incomeAccountTable)
		Get
			Return Me.GetTable(Of Other_incomeAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property IncomeOffTables() As System.Data.Linq.Table(Of IncomeOffTable)
		Get
			Return Me.GetTable(Of IncomeOffTable)
		End Get
	End Property
	
	Public ReadOnly Property Cash_BookTables() As System.Data.Linq.Table(Of Cash_BookTable)
		Get
			Return Me.GetTable(Of Cash_BookTable)
		End Get
	End Property
	
	Public ReadOnly Property ChurchDetailTables() As System.Data.Linq.Table(Of ChurchDetailTable)
		Get
			Return Me.GetTable(Of ChurchDetailTable)
		End Get
	End Property
	
	Public ReadOnly Property MemberImageTables() As System.Data.Linq.Table(Of MemberImageTable)
		Get
			Return Me.GetTable(Of MemberImageTable)
		End Get
	End Property
	
	Public ReadOnly Property ExpensesdetailsTables() As System.Data.Linq.Table(Of ExpensesdetailsTable)
		Get
			Return Me.GetTable(Of ExpensesdetailsTable)
		End Get
	End Property
	
	Public ReadOnly Property ExpensesHeadTables() As System.Data.Linq.Table(Of ExpensesHeadTable)
		Get
			Return Me.GetTable(Of ExpensesHeadTable)
		End Get
	End Property
	
	Public ReadOnly Property WelfareBankPaymentTables() As System.Data.Linq.Table(Of WelfareBankPaymentTable)
		Get
			Return Me.GetTable(Of WelfareBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property WarefarePaymentTables() As System.Data.Linq.Table(Of WarefarePaymentTable)
		Get
			Return Me.GetTable(Of WarefarePaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property WelfareMainTables() As System.Data.Linq.Table(Of WelfareMainTable)
		Get
			Return Me.GetTable(Of WelfareMainTable)
		End Get
	End Property
	
	Public ReadOnly Property MarriageTables() As System.Data.Linq.Table(Of MarriageTable)
		Get
			Return Me.GetTable(Of MarriageTable)
		End Get
	End Property
	
	Public ReadOnly Property DedicationImageTables() As System.Data.Linq.Table(Of DedicationImageTable)
		Get
			Return Me.GetTable(Of DedicationImageTable)
		End Get
	End Property
	
	Public ReadOnly Property VisitationTables() As System.Data.Linq.Table(Of VisitationTable)
		Get
			Return Me.GetTable(Of VisitationTable)
		End Get
	End Property
	
	Public ReadOnly Property BaptismTables() As System.Data.Linq.Table(Of BaptismTable)
		Get
			Return Me.GetTable(Of BaptismTable)
		End Get
	End Property
	
	Public ReadOnly Property BaptismImageTables() As System.Data.Linq.Table(Of BaptismImageTable)
		Get
			Return Me.GetTable(Of BaptismImageTable)
		End Get
	End Property
	
	Public ReadOnly Property EventTables() As System.Data.Linq.Table(Of EventTable)
		Get
			Return Me.GetTable(Of EventTable)
		End Get
	End Property
	
	Public ReadOnly Property RaiseExpensesHdTables() As System.Data.Linq.Table(Of RaiseExpensesHdTable)
		Get
			Return Me.GetTable(Of RaiseExpensesHdTable)
		End Get
	End Property
	
	Public ReadOnly Property RaiseExpensedDetailTables() As System.Data.Linq.Table(Of RaiseExpensedDetailTable)
		Get
			Return Me.GetTable(Of RaiseExpensedDetailTable)
		End Get
	End Property
	
	Public ReadOnly Property RaiseExpenPaymentTables() As System.Data.Linq.Table(Of RaiseExpenPaymentTable)
		Get
			Return Me.GetTable(Of RaiseExpenPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property RaiseBankPaymentTables() As System.Data.Linq.Table(Of RaiseBankPaymentTable)
		Get
			Return Me.GetTable(Of RaiseBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property ExpensesAccountTables() As System.Data.Linq.Table(Of ExpensesAccountTable)
		Get
			Return Me.GetTable(Of ExpensesAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property PaymentVoucherTables() As System.Data.Linq.Table(Of PaymentVoucherTable)
		Get
			Return Me.GetTable(Of PaymentVoucherTable)
		End Get
	End Property
	
	Public ReadOnly Property AccountPayableTables() As System.Data.Linq.Table(Of AccountPayableTable)
		Get
			Return Me.GetTable(Of AccountPayableTable)
		End Get
	End Property
	
	Public ReadOnly Property AuthenticalTables() As System.Data.Linq.Table(Of AuthenticalTable)
		Get
			Return Me.GetTable(Of AuthenticalTable)
		End Get
	End Property
	
	Public ReadOnly Property QuestionTables() As System.Data.Linq.Table(Of QuestionTable)
		Get
			Return Me.GetTable(Of QuestionTable)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Roles() As System.Data.Linq.Table(Of aspnet_Role)
		Get
			Return Me.GetTable(Of aspnet_Role)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Applications() As System.Data.Linq.Table(Of aspnet_Application)
		Get
			Return Me.GetTable(Of aspnet_Application)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
		Get
			Return Me.GetTable(Of aspnet_User)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_UsersInRoles() As System.Data.Linq.Table(Of aspnet_UsersInRole)
		Get
			Return Me.GetTable(Of aspnet_UsersInRole)
		End Get
	End Property
	
	Public ReadOnly Property VowAccountTables() As System.Data.Linq.Table(Of VowAccountTable)
		Get
			Return Me.GetTable(Of VowAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property SeedfaithaaccountTables() As System.Data.Linq.Table(Of SeedfaithaaccountTable)
		Get
			Return Me.GetTable(Of SeedfaithaaccountTable)
		End Get
	End Property
	
	Public ReadOnly Property FirstfruitaccTables() As System.Data.Linq.Table(Of FirstfruitaccTable)
		Get
			Return Me.GetTable(Of FirstfruitaccTable)
		End Get
	End Property
	
	Public ReadOnly Property MembersGroups() As System.Data.Linq.Table(Of MembersGroup)
		Get
			Return Me.GetTable(Of MembersGroup)
		End Get
	End Property
	
	Public ReadOnly Property PendingSavingUnits() As System.Data.Linq.Table(Of PendingSavingUnit)
		Get
			Return Me.GetTable(Of PendingSavingUnit)
		End Get
	End Property
	
	Public ReadOnly Property MembersUnits() As System.Data.Linq.Table(Of MembersUnit)
		Get
			Return Me.GetTable(Of MembersUnit)
		End Get
	End Property
	
	Public ReadOnly Property MemberDeaths() As System.Data.Linq.Table(Of MemberDeath)
		Get
			Return Me.GetTable(Of MemberDeath)
		End Get
	End Property
	
	Public ReadOnly Property ChurchDesignationTables() As System.Data.Linq.Table(Of ChurchDesignationTable)
		Get
			Return Me.GetTable(Of ChurchDesignationTable)
		End Get
	End Property
	
	Public ReadOnly Property BankTables() As System.Data.Linq.Table(Of BankTable)
		Get
			Return Me.GetTable(Of BankTable)
		End Get
	End Property
	
	Public ReadOnly Property MinisterTables() As System.Data.Linq.Table(Of MinisterTable)
		Get
			Return Me.GetTable(Of MinisterTable)
		End Get
	End Property
	
	Public ReadOnly Property FunctionalGroupTables() As System.Data.Linq.Table(Of FunctionalGroupTable)
		Get
			Return Me.GetTable(Of FunctionalGroupTable)
		End Get
	End Property
	
	Public ReadOnly Property ChildrenTables() As System.Data.Linq.Table(Of ChildrenTable)
		Get
			Return Me.GetTable(Of ChildrenTable)
		End Get
	End Property
	
	Public ReadOnly Property OrderServiceTables() As System.Data.Linq.Table(Of OrderServiceTable)
		Get
			Return Me.GetTable(Of OrderServiceTable)
		End Get
	End Property
	
	Public ReadOnly Property PastorsTitheAcountTables() As System.Data.Linq.Table(Of PastorsTitheAcountTable)
		Get
			Return Me.GetTable(Of PastorsTitheAcountTable)
		End Get
	End Property
	
	Public ReadOnly Property pastorsTitheBankPaymentTables() As System.Data.Linq.Table(Of pastorsTitheBankPaymentTable)
		Get
			Return Me.GetTable(Of pastorsTitheBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property PastorsTithePaymentTables() As System.Data.Linq.Table(Of PastorsTithePaymentTable)
		Get
			Return Me.GetTable(Of PastorsTithePaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property PastorsTitheTables() As System.Data.Linq.Table(Of PastorsTitheTable)
		Get
			Return Me.GetTable(Of PastorsTitheTable)
		End Get
	End Property
	
	Public ReadOnly Property PastorsAccountTables() As System.Data.Linq.Table(Of PastorsAccountTable)
		Get
			Return Me.GetTable(Of PastorsAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property HierarchyTables() As System.Data.Linq.Table(Of HierarchyTable)
		Get
			Return Me.GetTable(Of HierarchyTable)
		End Get
	End Property
	
	Public ReadOnly Property HierarcyBankPaymentTables() As System.Data.Linq.Table(Of HierarcyBankPaymentTable)
		Get
			Return Me.GetTable(Of HierarcyBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property HierarcyAccountTables() As System.Data.Linq.Table(Of HierarcyAccountTable)
		Get
			Return Me.GetTable(Of HierarcyAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property PensionTables() As System.Data.Linq.Table(Of PensionTable)
		Get
			Return Me.GetTable(Of PensionTable)
		End Get
	End Property
	
	Public ReadOnly Property PensionPaymentTables() As System.Data.Linq.Table(Of PensionPaymentTable)
		Get
			Return Me.GetTable(Of PensionPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property PensionBankPaymentTables() As System.Data.Linq.Table(Of PensionBankPaymentTable)
		Get
			Return Me.GetTable(Of PensionBankPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property PensionAccountTables() As System.Data.Linq.Table(Of PensionAccountTable)
		Get
			Return Me.GetTable(Of PensionAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property HierarchyPaymentTables() As System.Data.Linq.Table(Of HierarchyPaymentTable)
		Get
			Return Me.GetTable(Of HierarchyPaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property WelfareAccountTables() As System.Data.Linq.Table(Of WelfareAccountTable)
		Get
			Return Me.GetTable(Of WelfareAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property HomeCellZonesTables() As System.Data.Linq.Table(Of HomeCellZonesTable)
		Get
			Return Me.GetTable(Of HomeCellZonesTable)
		End Get
	End Property
	
	Public ReadOnly Property HomeCellZonesPastorsTables() As System.Data.Linq.Table(Of HomeCellZonesPastorsTable)
		Get
			Return Me.GetTable(Of HomeCellZonesPastorsTable)
		End Get
	End Property
	
	Public ReadOnly Property HomecellTables() As System.Data.Linq.Table(Of HomecellTable)
		Get
			Return Me.GetTable(Of HomecellTable)
		End Get
	End Property
	
	Public ReadOnly Property FamilyTables() As System.Data.Linq.Table(Of FamilyTable)
		Get
			Return Me.GetTable(Of FamilyTable)
		End Get
	End Property
	
	Public ReadOnly Property SermonTables() As System.Data.Linq.Table(Of SermonTable)
		Get
			Return Me.GetTable(Of SermonTable)
		End Get
	End Property
	
	Public ReadOnly Property Locations() As System.Data.Linq.Table(Of Location)
		Get
			Return Me.GetTable(Of Location)
		End Get
	End Property
	
	Public ReadOnly Property DedicationTables() As System.Data.Linq.Table(Of DedicationTable)
		Get
			Return Me.GetTable(Of DedicationTable)
		End Get
	End Property
	
	Public ReadOnly Property MonthTables() As System.Data.Linq.Table(Of MonthTable)
		Get
			Return Me.GetTable(Of MonthTable)
		End Get
	End Property
	
	Public ReadOnly Property ChildrenImageTables() As System.Data.Linq.Table(Of ChildrenImageTable)
		Get
			Return Me.GetTable(Of ChildrenImageTable)
		End Get
	End Property
	
	Public ReadOnly Property FamilyImageTables() As System.Data.Linq.Table(Of FamilyImageTable)
		Get
			Return Me.GetTable(Of FamilyImageTable)
		End Get
	End Property
	
	Public ReadOnly Property MembershipTables() As System.Data.Linq.Table(Of MembershipTable)
		Get
			Return Me.GetTable(Of MembershipTable)
		End Get
	End Property
	
	Public ReadOnly Property IncomePaymentTables() As System.Data.Linq.Table(Of IncomePaymentTable)
		Get
			Return Me.GetTable(Of IncomePaymentTable)
		End Get
	End Property
	
	Public ReadOnly Property AttendanceTotalTables() As System.Data.Linq.Table(Of AttendanceTotalTable)
		Get
			Return Me.GetTable(Of AttendanceTotalTable)
		End Get
	End Property
	
	Public ReadOnly Property AttendanceTables() As System.Data.Linq.Table(Of AttendanceTable)
		Get
			Return Me.GetTable(Of AttendanceTable)
		End Get
	End Property
	
	Public ReadOnly Property LoanAccountTables() As System.Data.Linq.Table(Of LoanAccountTable)
		Get
			Return Me.GetTable(Of LoanAccountTable)
		End Get
	End Property
	
	Public ReadOnly Property LoanPVTables() As System.Data.Linq.Table(Of LoanPVTable)
		Get
			Return Me.GetTable(Of LoanPVTable)
		End Get
	End Property
	
	Public ReadOnly Property LoanHeadTables() As System.Data.Linq.Table(Of LoanHeadTable)
		Get
			Return Me.GetTable(Of LoanHeadTable)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UnitTable")>  _
Partial Public Class UnitTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ServiceId As String
	
	Private _ServiceName As String
	
	Private _Enterby As String
	
	Private _SeviceDescrip As String
	
	Private _Datecreated As Date
	
	Private _PendingSavingUnits As EntitySet(Of PendingSavingUnit)
	
	Private _MembersUnits As EntitySet(Of MembersUnit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnServiceIdChanging(value As String)
    End Sub
    Partial Private Sub OnServiceIdChanged()
    End Sub
    Partial Private Sub OnServiceNameChanging(value As String)
    End Sub
    Partial Private Sub OnServiceNameChanged()
    End Sub
    Partial Private Sub OnEnterbyChanging(value As String)
    End Sub
    Partial Private Sub OnEnterbyChanged()
    End Sub
    Partial Private Sub OnSeviceDescripChanging(value As String)
    End Sub
    Partial Private Sub OnSeviceDescripChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PendingSavingUnits = New EntitySet(Of PendingSavingUnit)(AddressOf Me.attach_PendingSavingUnits, AddressOf Me.detach_PendingSavingUnits)
		Me._MembersUnits = New EntitySet(Of MembersUnit)(AddressOf Me.attach_MembersUnits, AddressOf Me.detach_MembersUnits)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ServiceId() As String
		Get
			Return Me._ServiceId
		End Get
		Set
			If (String.Equals(Me._ServiceId, value) = false) Then
				Me.OnServiceIdChanging(value)
				Me.SendPropertyChanging
				Me._ServiceId = value
				Me.SendPropertyChanged("ServiceId")
				Me.OnServiceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceName", DbType:="NVarChar(MAX)")>  _
	Public Property ServiceName() As String
		Get
			Return Me._ServiceName
		End Get
		Set
			If (String.Equals(Me._ServiceName, value) = false) Then
				Me.OnServiceNameChanging(value)
				Me.SendPropertyChanging
				Me._ServiceName = value
				Me.SendPropertyChanged("ServiceName")
				Me.OnServiceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enterby", DbType:="NVarChar(50)")>  _
	Public Property Enterby() As String
		Get
			Return Me._Enterby
		End Get
		Set
			If (String.Equals(Me._Enterby, value) = false) Then
				Me.OnEnterbyChanging(value)
				Me.SendPropertyChanging
				Me._Enterby = value
				Me.SendPropertyChanged("Enterby")
				Me.OnEnterbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeviceDescrip", DbType:="NVarChar(MAX)")>  _
	Public Property SeviceDescrip() As String
		Get
			Return Me._SeviceDescrip
		End Get
		Set
			If (String.Equals(Me._SeviceDescrip, value) = false) Then
				Me.OnSeviceDescripChanging(value)
				Me.SendPropertyChanging
				Me._SeviceDescrip = value
				Me.SendPropertyChanged("SeviceDescrip")
				Me.OnSeviceDescripChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnitTable_PendingSavingUnit", Storage:="_PendingSavingUnits", ThisKey:="ServiceId", OtherKey:="ServiceID")>  _
	Public Property PendingSavingUnits() As EntitySet(Of PendingSavingUnit)
		Get
			Return Me._PendingSavingUnits
		End Get
		Set
			Me._PendingSavingUnits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnitTable_MembersUnit", Storage:="_MembersUnits", ThisKey:="ServiceId", OtherKey:="ServiceUnitID")>  _
	Public Property MembersUnits() As EntitySet(Of MembersUnit)
		Get
			Return Me._MembersUnits
		End Get
		Set
			Me._MembersUnits.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PendingSavingUnits(ByVal entity As PendingSavingUnit)
		Me.SendPropertyChanging
		entity.UnitTable = Me
	End Sub
	
	Private Sub detach_PendingSavingUnits(ByVal entity As PendingSavingUnit)
		Me.SendPropertyChanging
		entity.UnitTable = Nothing
	End Sub
	
	Private Sub attach_MembersUnits(ByVal entity As MembersUnit)
		Me.SendPropertyChanging
		entity.UnitTable = Me
	End Sub
	
	Private Sub detach_MembersUnits(ByVal entity As MembersUnit)
		Me.SendPropertyChanging
		entity.UnitTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ParishTable")>  _
Partial Public Class ParishTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _Parishid As String
	
	Private _Parish As String
	
	Private _PastorName As String
	
	Private _Phone As String
	
	Private _Email As String
	
	Private _Address As String
	
	Private _Stateid As String
	
	Private _Country As String
	
	Private _Location As String
	
	Private _DistrictId As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnParishidChanging(value As String)
    End Sub
    Partial Private Sub OnParishidChanged()
    End Sub
    Partial Private Sub OnParishChanging(value As String)
    End Sub
    Partial Private Sub OnParishChanged()
    End Sub
    Partial Private Sub OnPastorNameChanging(value As String)
    End Sub
    Partial Private Sub OnPastorNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnStateidChanging(value As String)
    End Sub
    Partial Private Sub OnStateidChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDistrictIdChanging(value As String)
    End Sub
    Partial Private Sub OnDistrictIdChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parishid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Parishid() As String
		Get
			Return Me._Parishid
		End Get
		Set
			If (String.Equals(Me._Parishid, value) = false) Then
				Me.OnParishidChanging(value)
				Me.SendPropertyChanging
				Me._Parishid = value
				Me.SendPropertyChanged("Parishid")
				Me.OnParishidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parish", DbType:="NVarChar(MAX)")>  _
	Public Property Parish() As String
		Get
			Return Me._Parish
		End Get
		Set
			If (String.Equals(Me._Parish, value) = false) Then
				Me.OnParishChanging(value)
				Me.SendPropertyChanging
				Me._Parish = value
				Me.SendPropertyChanged("Parish")
				Me.OnParishChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PastorName", DbType:="NVarChar(50)")>  _
	Public Property PastorName() As String
		Get
			Return Me._PastorName
		End Get
		Set
			If (String.Equals(Me._PastorName, value) = false) Then
				Me.OnPastorNameChanging(value)
				Me.SendPropertyChanging
				Me._PastorName = value
				Me.SendPropertyChanged("PastorName")
				Me.OnPastorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stateid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Stateid() As String
		Get
			Return Me._Stateid
		End Get
		Set
			If (String.Equals(Me._Stateid, value) = false) Then
				Me.OnStateidChanging(value)
				Me.SendPropertyChanging
				Me._Stateid = value
				Me.SendPropertyChanged("Stateid")
				Me.OnStateidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(50)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistrictId", DbType:="NVarChar(50)")>  _
	Public Property DistrictId() As String
		Get
			Return Me._DistrictId
		End Get
		Set
			If (String.Equals(Me._DistrictId, value) = false) Then
				Me.OnDistrictIdChanging(value)
				Me.SendPropertyChanging
				Me._DistrictId = value
				Me.SendPropertyChanged("DistrictId")
				Me.OnDistrictIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChurchvaluesTable")>  _
Partial Public Class ChurchvaluesTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ChurchDesgID As String
	
	Private _ChurchDetailID As String
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _ChurchDesignationTable As EntityRef(Of ChurchDesignationTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnChurchDesgIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDesgIDChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._ChurchDesignationTable = CType(Nothing, EntityRef(Of ChurchDesignationTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDesgID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDesgID() As String
		Get
			Return Me._ChurchDesgID
		End Get
		Set
			If (String.Equals(Me._ChurchDesgID, value) = false) Then
				If Me._ChurchDesignationTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDesgIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDesgID = value
				Me.SendPropertyChanged("ChurchDesgID")
				Me.OnChurchDesgIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_ChurchvaluesTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.ChurchvaluesTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchvaluesTables.Add(Me)
					Me._ChurchDetailID = value.ChurchDetailID
				Else
					Me._ChurchDetailID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_ChurchvaluesTable", Storage:="_ChurchDesignationTable", ThisKey:="ChurchDesgID", OtherKey:="ChurchDesgID", IsForeignKey:=true)>  _
	Public Property ChurchDesignationTable() As ChurchDesignationTable
		Get
			Return Me._ChurchDesignationTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDesignationTable = Me._ChurchDesignationTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDesignationTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDesignationTable.Entity = Nothing
					previousValue.ChurchvaluesTables.Remove(Me)
				End If
				Me._ChurchDesignationTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchvaluesTables.Add(Me)
					Me._ChurchDesgID = value.ChurchDesgID
				Else
					Me._ChurchDesgID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDesignationTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StateTable")>  _
Partial Public Class StateTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Stateid As String
	
	Private _State As String
	
	Private _ChurchDetailTables As EntitySet(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnStateidChanging(value As String)
    End Sub
    Partial Private Sub OnStateidChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTables = New EntitySet(Of ChurchDetailTable)(AddressOf Me.attach_ChurchDetailTables, AddressOf Me.detach_ChurchDetailTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stateid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Stateid() As String
		Get
			Return Me._Stateid
		End Get
		Set
			If (String.Equals(Me._Stateid, value) = false) Then
				Me.OnStateidChanging(value)
				Me.SendPropertyChanging
				Me._Stateid = value
				Me.SendPropertyChanged("Stateid")
				Me.OnStateidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StateTable_ChurchDetailTable", Storage:="_ChurchDetailTables", ThisKey:="Stateid", OtherKey:="Stateid")>  _
	Public Property ChurchDetailTables() As EntitySet(Of ChurchDetailTable)
		Get
			Return Me._ChurchDetailTables
		End Get
		Set
			Me._ChurchDetailTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.StateTable = Me
	End Sub
	
	Private Sub detach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.StateTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChurchHierachy")>  _
Partial Public Class ChurchHierachy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ChurchParent As String
	
	Private _ChurchChildren As String
	
	Private _DateCreated As Date
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnChurchParentChanging(value As String)
    End Sub
    Partial Private Sub OnChurchParentChanged()
    End Sub
    Partial Private Sub OnChurchChildrenChanging(value As String)
    End Sub
    Partial Private Sub OnChurchChildrenChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchParent", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchParent() As String
		Get
			Return Me._ChurchParent
		End Get
		Set
			If (String.Equals(Me._ChurchParent, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchParentChanging(value)
				Me.SendPropertyChanging
				Me._ChurchParent = value
				Me.SendPropertyChanged("ChurchParent")
				Me.OnChurchParentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchChildren", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchChildren() As String
		Get
			Return Me._ChurchChildren
		End Get
		Set
			If (String.Equals(Me._ChurchChildren, value) = false) Then
				Me.OnChurchChildrenChanging(value)
				Me.SendPropertyChanging
				Me._ChurchChildren = value
				Me.SendPropertyChanged("ChurchChildren")
				Me.OnChurchChildrenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_ChurchHierachy", Storage:="_ChurchDetailTable", ThisKey:="ChurchParent", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.ChurchHierachies.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchHierachies.Add(Me)
					Me._ChurchParent = value.ChurchDetailID
				Else
					Me._ChurchParent = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CommTable")>  _
Partial Public Class CommTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ComId As String
	
	Private _ComName As String
	
	Private _ComDescp As String
	
	Private _DateCreated As Date
	
	Private _FunctionalGroupTables As EntitySet(Of FunctionalGroupTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnComIdChanging(value As String)
    End Sub
    Partial Private Sub OnComIdChanged()
    End Sub
    Partial Private Sub OnComNameChanging(value As String)
    End Sub
    Partial Private Sub OnComNameChanged()
    End Sub
    Partial Private Sub OnComDescpChanging(value As String)
    End Sub
    Partial Private Sub OnComDescpChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalGroupTables = New EntitySet(Of FunctionalGroupTable)(AddressOf Me.attach_FunctionalGroupTables, AddressOf Me.detach_FunctionalGroupTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ComId() As String
		Get
			Return Me._ComId
		End Get
		Set
			If (String.Equals(Me._ComId, value) = false) Then
				Me.OnComIdChanging(value)
				Me.SendPropertyChanging
				Me._ComId = value
				Me.SendPropertyChanged("ComId")
				Me.OnComIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComName", DbType:="NVarChar(MAX)")>  _
	Public Property ComName() As String
		Get
			Return Me._ComName
		End Get
		Set
			If (String.Equals(Me._ComName, value) = false) Then
				Me.OnComNameChanging(value)
				Me.SendPropertyChanging
				Me._ComName = value
				Me.SendPropertyChanged("ComName")
				Me.OnComNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComDescp", DbType:="NVarChar(MAX)")>  _
	Public Property ComDescp() As String
		Get
			Return Me._ComDescp
		End Get
		Set
			If (String.Equals(Me._ComDescp, value) = false) Then
				Me.OnComDescpChanging(value)
				Me.SendPropertyChanging
				Me._ComDescp = value
				Me.SendPropertyChanged("ComDescp")
				Me.OnComDescpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CommTable_FunctionalGroupTable", Storage:="_FunctionalGroupTables", ThisKey:="ComId", OtherKey:="ComId")>  _
	Public Property FunctionalGroupTables() As EntitySet(Of FunctionalGroupTable)
		Get
			Return Me._FunctionalGroupTables
		End Get
		Set
			Me._FunctionalGroupTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FunctionalGroupTables(ByVal entity As FunctionalGroupTable)
		Me.SendPropertyChanging
		entity.CommTable = Me
	End Sub
	
	Private Sub detach_FunctionalGroupTables(ByVal entity As FunctionalGroupTable)
		Me.SendPropertyChanging
		entity.CommTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ClassTable")>  _
Partial Public Class ClassTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ClassId As String
	
	Private _Classname As String
	
	Private _Details As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Phone As String
	
	Private _Datefrom As System.Nullable(Of Date)
	
	Private _Dateto As System.Nullable(Of Date)
	
	Private _Session As String
	
	Private _Week As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnClassIdChanging(value As String)
    End Sub
    Partial Private Sub OnClassIdChanged()
    End Sub
    Partial Private Sub OnClassnameChanging(value As String)
    End Sub
    Partial Private Sub OnClassnameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnDatefromChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatefromChanged()
    End Sub
    Partial Private Sub OnDatetoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatetoChanged()
    End Sub
    Partial Private Sub OnSessionChanging(value As String)
    End Sub
    Partial Private Sub OnSessionChanged()
    End Sub
    Partial Private Sub OnWeekChanging(value As String)
    End Sub
    Partial Private Sub OnWeekChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ClassId() As String
		Get
			Return Me._ClassId
		End Get
		Set
			If (String.Equals(Me._ClassId, value) = false) Then
				Me.OnClassIdChanging(value)
				Me.SendPropertyChanging
				Me._ClassId = value
				Me.SendPropertyChanged("ClassId")
				Me.OnClassIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Classname", DbType:="NVarChar(50)")>  _
	Public Property Classname() As String
		Get
			Return Me._Classname
		End Get
		Set
			If (String.Equals(Me._Classname, value) = false) Then
				Me.OnClassnameChanging(value)
				Me.SendPropertyChanging
				Me._Classname = value
				Me.SendPropertyChanged("Classname")
				Me.OnClassnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datefrom", DbType:="Date")>  _
	Public Property Datefrom() As System.Nullable(Of Date)
		Get
			Return Me._Datefrom
		End Get
		Set
			If (Me._Datefrom.Equals(value) = false) Then
				Me.OnDatefromChanging(value)
				Me.SendPropertyChanging
				Me._Datefrom = value
				Me.SendPropertyChanged("Datefrom")
				Me.OnDatefromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateto", DbType:="Date")>  _
	Public Property Dateto() As System.Nullable(Of Date)
		Get
			Return Me._Dateto
		End Get
		Set
			If (Me._Dateto.Equals(value) = false) Then
				Me.OnDatetoChanging(value)
				Me.SendPropertyChanging
				Me._Dateto = value
				Me.SendPropertyChanged("Dateto")
				Me.OnDatetoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Session", DbType:="NVarChar(50)")>  _
	Public Property Session() As String
		Get
			Return Me._Session
		End Get
		Set
			If (String.Equals(Me._Session, value) = false) Then
				Me.OnSessionChanging(value)
				Me.SendPropertyChanging
				Me._Session = value
				Me.SendPropertyChanged("Session")
				Me.OnSessionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Week", DbType:="NVarChar(50)")>  _
	Public Property Week() As String
		Get
			Return Me._Week
		End Get
		Set
			If (String.Equals(Me._Week, value) = false) Then
				Me.OnWeekChanging(value)
				Me.SendPropertyChanging
				Me._Week = value
				Me.SendPropertyChanged("Week")
				Me.OnWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RoleTable")>  _
Partial Public Class RoleTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Roleid As String
	
	Private _Role As String
	
	Private _Descrp As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _UserTables As EntitySet(Of UserTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnRoleidChanging(value As String)
    End Sub
    Partial Private Sub OnRoleidChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    Partial Private Sub OnDescrpChanging(value As String)
    End Sub
    Partial Private Sub OnDescrpChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserTables = New EntitySet(Of UserTable)(AddressOf Me.attach_UserTables, AddressOf Me.detach_UserTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Roleid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Roleid() As String
		Get
			Return Me._Roleid
		End Get
		Set
			If (String.Equals(Me._Roleid, value) = false) Then
				Me.OnRoleidChanging(value)
				Me.SendPropertyChanging
				Me._Roleid = value
				Me.SendPropertyChanged("Roleid")
				Me.OnRoleidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="NVarChar(MAX)")>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrp", DbType:="NVarChar(MAX)")>  _
	Public Property Descrp() As String
		Get
			Return Me._Descrp
		End Get
		Set
			If (String.Equals(Me._Descrp, value) = false) Then
				Me.OnDescrpChanging(value)
				Me.SendPropertyChanging
				Me._Descrp = value
				Me.SendPropertyChanged("Descrp")
				Me.OnDescrpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RoleTable_UserTable", Storage:="_UserTables", ThisKey:="Roleid", OtherKey:="RoleID")>  _
	Public Property UserTables() As EntitySet(Of UserTable)
		Get
			Return Me._UserTables
		End Get
		Set
			Me._UserTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserTables(ByVal entity As UserTable)
		Me.SendPropertyChanging
		entity.RoleTable = Me
	End Sub
	
	Private Sub detach_UserTables(ByVal entity As UserTable)
		Me.SendPropertyChanging
		entity.RoleTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserTable")>  _
Partial Public Class UserTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _RoleID As String
	
	Private _Memberid As String
	
	Private _Churchid As String
	
	Private _Stateid As String
	
	Private _Locationid As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _RoleTable As EntityRef(Of RoleTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As String)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnMemberidChanging(value As String)
    End Sub
    Partial Private Sub OnMemberidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnStateidChanging(value As String)
    End Sub
    Partial Private Sub OnStateidChanged()
    End Sub
    Partial Private Sub OnLocationidChanging(value As String)
    End Sub
    Partial Private Sub OnLocationidChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RoleTable = CType(Nothing, EntityRef(Of RoleTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="NVarChar(50)")>  _
	Public Property RoleID() As String
		Get
			Return Me._RoleID
		End Get
		Set
			If (String.Equals(Me._RoleID, value) = false) Then
				If Me._RoleTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memberid", DbType:="NVarChar(50)")>  _
	Public Property Memberid() As String
		Get
			Return Me._Memberid
		End Get
		Set
			If (String.Equals(Me._Memberid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberidChanging(value)
				Me.SendPropertyChanging
				Me._Memberid = value
				Me.SendPropertyChanged("Memberid")
				Me.OnMemberidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stateid", DbType:="NVarChar(50)")>  _
	Public Property Stateid() As String
		Get
			Return Me._Stateid
		End Get
		Set
			If (String.Equals(Me._Stateid, value) = false) Then
				Me.OnStateidChanging(value)
				Me.SendPropertyChanging
				Me._Stateid = value
				Me.SendPropertyChanged("Stateid")
				Me.OnStateidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locationid", DbType:="NVarChar(50)")>  _
	Public Property Locationid() As String
		Get
			Return Me._Locationid
		End Get
		Set
			If (String.Equals(Me._Locationid, value) = false) Then
				Me.OnLocationidChanging(value)
				Me.SendPropertyChanging
				Me._Locationid = value
				Me.SendPropertyChanged("Locationid")
				Me.OnLocationidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RoleTable_UserTable", Storage:="_RoleTable", ThisKey:="RoleID", OtherKey:="Roleid", IsForeignKey:=true)>  _
	Public Property RoleTable() As RoleTable
		Get
			Return Me._RoleTable.Entity
		End Get
		Set
			Dim previousValue As RoleTable = Me._RoleTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RoleTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RoleTable.Entity = Nothing
					previousValue.UserTables.Remove(Me)
				End If
				Me._RoleTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserTables.Add(Me)
					Me._RoleID = value.Roleid
				Else
					Me._RoleID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("RoleTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_UserTable", Storage:="_MembershipTable", ThisKey:="Memberid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.UserTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserTables.Add(Me)
					Me._Memberid = value.Memberid
				Else
					Me._Memberid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AddvisitorTable")>  _
Partial Public Class AddvisitorTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Vistorid As String
	
	Private _Firstname As String
	
	Private _Lastname As String
	
	Private _Gender As String
	
	Private _Status As String
	
	Private _Phone As String
	
	Private _Address As String
	
	Private _Email As String
	
	Private _Visitor As String
	
	Private _Nationality As String
	
	Private _Respond As String
	
	Private _UpdatedBy As String
	
	Private _ChurchDetailID As String
	
	Private _Datecreated As Date
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnVistoridChanging(value As String)
    End Sub
    Partial Private Sub OnVistoridChanged()
    End Sub
    Partial Private Sub OnFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstnameChanged()
    End Sub
    Partial Private Sub OnLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnLastnameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnVisitorChanging(value As String)
    End Sub
    Partial Private Sub OnVisitorChanged()
    End Sub
    Partial Private Sub OnNationalityChanging(value As String)
    End Sub
    Partial Private Sub OnNationalityChanged()
    End Sub
    Partial Private Sub OnRespondChanging(value As String)
    End Sub
    Partial Private Sub OnRespondChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vistorid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Vistorid() As String
		Get
			Return Me._Vistorid
		End Get
		Set
			If (String.Equals(Me._Vistorid, value) = false) Then
				Me.OnVistoridChanging(value)
				Me.SendPropertyChanging
				Me._Vistorid = value
				Me.SendPropertyChanged("Vistorid")
				Me.OnVistoridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Firstname", DbType:="NVarChar(50)")>  _
	Public Property Firstname() As String
		Get
			Return Me._Firstname
		End Get
		Set
			If (String.Equals(Me._Firstname, value) = false) Then
				Me.OnFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._Firstname = value
				Me.SendPropertyChanged("Firstname")
				Me.OnFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lastname", DbType:="NVarChar(50)")>  _
	Public Property Lastname() As String
		Get
			Return Me._Lastname
		End Get
		Set
			If (String.Equals(Me._Lastname, value) = false) Then
				Me.OnLastnameChanging(value)
				Me.SendPropertyChanging
				Me._Lastname = value
				Me.SendPropertyChanged("Lastname")
				Me.OnLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(MAX)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visitor", DbType:="NVarChar(50)")>  _
	Public Property Visitor() As String
		Get
			Return Me._Visitor
		End Get
		Set
			If (String.Equals(Me._Visitor, value) = false) Then
				Me.OnVisitorChanging(value)
				Me.SendPropertyChanging
				Me._Visitor = value
				Me.SendPropertyChanged("Visitor")
				Me.OnVisitorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(MAX)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me.OnNationalityChanging(value)
				Me.SendPropertyChanging
				Me._Nationality = value
				Me.SendPropertyChanged("Nationality")
				Me.OnNationalityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Respond", DbType:="NVarChar(50)")>  _
	Public Property Respond() As String
		Get
			Return Me._Respond
		End Get
		Set
			If (String.Equals(Me._Respond, value) = false) Then
				Me.OnRespondChanging(value)
				Me.SendPropertyChanging
				Me._Respond = value
				Me.SendPropertyChanged("Respond")
				Me.OnRespondChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(50)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_AddvisitorTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.AddvisitorTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AddvisitorTables.Add(Me)
					Me._ChurchDetailID = value.ChurchDetailID
				Else
					Me._ChurchDetailID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AreaTable")>  _
Partial Public Class AreaTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Areaid As String
	
	Private _AreaName As String
	
	Private _Description As String
	
	Private _Locationid As String
	
	Private _Churchid As String
	
	Private _Updatedby As String
	
	Private _DateCreated As Date
	
	Private _HomecellTables As EntitySet(Of HomecellTable)
	
	Private _HomecellTables1 As EntitySet(Of HomecellTable)
	
	Private _MembershipTables As EntitySet(Of MembershipTable)
	
	Private _Location As EntityRef(Of Location)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnAreaidChanging(value As String)
    End Sub
    Partial Private Sub OnAreaidChanged()
    End Sub
    Partial Private Sub OnAreaNameChanging(value As String)
    End Sub
    Partial Private Sub OnAreaNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnLocationidChanging(value As String)
    End Sub
    Partial Private Sub OnLocationidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HomecellTables = New EntitySet(Of HomecellTable)(AddressOf Me.attach_HomecellTables, AddressOf Me.detach_HomecellTables)
		Me._HomecellTables1 = New EntitySet(Of HomecellTable)(AddressOf Me.attach_HomecellTables1, AddressOf Me.detach_HomecellTables1)
		Me._MembershipTables = New EntitySet(Of MembershipTable)(AddressOf Me.attach_MembershipTables, AddressOf Me.detach_MembershipTables)
		Me._Location = CType(Nothing, EntityRef(Of Location))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Areaid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Areaid() As String
		Get
			Return Me._Areaid
		End Get
		Set
			If (String.Equals(Me._Areaid, value) = false) Then
				Me.OnAreaidChanging(value)
				Me.SendPropertyChanging
				Me._Areaid = value
				Me.SendPropertyChanged("Areaid")
				Me.OnAreaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaName", DbType:="NVarChar(MAX)")>  _
	Public Property AreaName() As String
		Get
			Return Me._AreaName
		End Get
		Set
			If (String.Equals(Me._AreaName, value) = false) Then
				Me.OnAreaNameChanging(value)
				Me.SendPropertyChanging
				Me._AreaName = value
				Me.SendPropertyChanged("AreaName")
				Me.OnAreaNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locationid", DbType:="NVarChar(50)")>  _
	Public Property Locationid() As String
		Get
			Return Me._Locationid
		End Get
		Set
			If (String.Equals(Me._Locationid, value) = false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationidChanging(value)
				Me.SendPropertyChanging
				Me._Locationid = value
				Me.SendPropertyChanged("Locationid")
				Me.OnLocationidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaTable_HomecellTable", Storage:="_HomecellTables", ThisKey:="Areaid", OtherKey:="AreaId")>  _
	Public Property HomecellTables() As EntitySet(Of HomecellTable)
		Get
			Return Me._HomecellTables
		End Get
		Set
			Me._HomecellTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaTable_HomecellTable1", Storage:="_HomecellTables1", ThisKey:="Areaid", OtherKey:="AreaId")>  _
	Public Property HomecellTables1() As EntitySet(Of HomecellTable)
		Get
			Return Me._HomecellTables1
		End Get
		Set
			Me._HomecellTables1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaTable_MembershipTable", Storage:="_MembershipTables", ThisKey:="Areaid", OtherKey:="Area")>  _
	Public Property MembershipTables() As EntitySet(Of MembershipTable)
		Get
			Return Me._MembershipTables
		End Get
		Set
			Me._MembershipTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_AreaTable", Storage:="_Location", ThisKey:="Locationid", OtherKey:="Locationid", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.AreaTables.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AreaTables.Add(Me)
					Me._Locationid = value.Locationid
				Else
					Me._Locationid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.AreaTable = Me
	End Sub
	
	Private Sub detach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.AreaTable = Nothing
	End Sub
	
	Private Sub attach_HomecellTables1(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.AreaTable1 = Me
	End Sub
	
	Private Sub detach_HomecellTables1(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.AreaTable1 = Nothing
	End Sub
	
	Private Sub attach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.AreaTable = Me
	End Sub
	
	Private Sub detach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.AreaTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DutyTable")>  _
Partial Public Class DutyTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Dutyid As String
	
	Private _DutyName As String
	
	Private _DutyDescp As String
	
	Private _Churchid As String
	
	Private _Updatedby As String
	
	Private _DateCreated As Date
	
	Private _MinisterTables As EntitySet(Of MinisterTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnDutyidChanging(value As String)
    End Sub
    Partial Private Sub OnDutyidChanged()
    End Sub
    Partial Private Sub OnDutyNameChanging(value As String)
    End Sub
    Partial Private Sub OnDutyNameChanged()
    End Sub
    Partial Private Sub OnDutyDescpChanging(value As String)
    End Sub
    Partial Private Sub OnDutyDescpChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MinisterTables = New EntitySet(Of MinisterTable)(AddressOf Me.attach_MinisterTables, AddressOf Me.detach_MinisterTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dutyid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Dutyid() As String
		Get
			Return Me._Dutyid
		End Get
		Set
			If (String.Equals(Me._Dutyid, value) = false) Then
				Me.OnDutyidChanging(value)
				Me.SendPropertyChanging
				Me._Dutyid = value
				Me.SendPropertyChanged("Dutyid")
				Me.OnDutyidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DutyName", DbType:="NVarChar(50)")>  _
	Public Property DutyName() As String
		Get
			Return Me._DutyName
		End Get
		Set
			If (String.Equals(Me._DutyName, value) = false) Then
				Me.OnDutyNameChanging(value)
				Me.SendPropertyChanging
				Me._DutyName = value
				Me.SendPropertyChanged("DutyName")
				Me.OnDutyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DutyDescp", DbType:="NVarChar(MAX)")>  _
	Public Property DutyDescp() As String
		Get
			Return Me._DutyDescp
		End Get
		Set
			If (String.Equals(Me._DutyDescp, value) = false) Then
				Me.OnDutyDescpChanging(value)
				Me.SendPropertyChanging
				Me._DutyDescp = value
				Me.SendPropertyChanged("DutyDescp")
				Me.OnDutyDescpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DutyTable_MinisterTable", Storage:="_MinisterTables", ThisKey:="Dutyid", OtherKey:="Post")>  _
	Public Property MinisterTables() As EntitySet(Of MinisterTable)
		Get
			Return Me._MinisterTables
		End Get
		Set
			Me._MinisterTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MinisterTables(ByVal entity As MinisterTable)
		Me.SendPropertyChanging
		entity.DutyTable = Me
	End Sub
	
	Private Sub detach_MinisterTables(ByVal entity As MinisterTable)
		Me.SendPropertyChanging
		entity.DutyTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProjectTable")>  _
Partial Public Class ProjectTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Projectid As String
	
	Private _Projectname As String
	
	Private _ProjectDescrip As String
	
	Private _Updatedby As String
	
	Private _Churchid As String
	
	Private _datecreated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnProjectidChanging(value As String)
    End Sub
    Partial Private Sub OnProjectidChanged()
    End Sub
    Partial Private Sub OnProjectnameChanging(value As String)
    End Sub
    Partial Private Sub OnProjectnameChanged()
    End Sub
    Partial Private Sub OnProjectDescripChanging(value As String)
    End Sub
    Partial Private Sub OnProjectDescripChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OndatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Projectid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Projectid() As String
		Get
			Return Me._Projectid
		End Get
		Set
			If (String.Equals(Me._Projectid, value) = false) Then
				Me.OnProjectidChanging(value)
				Me.SendPropertyChanging
				Me._Projectid = value
				Me.SendPropertyChanged("Projectid")
				Me.OnProjectidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Projectname", DbType:="NVarChar(50)")>  _
	Public Property Projectname() As String
		Get
			Return Me._Projectname
		End Get
		Set
			If (String.Equals(Me._Projectname, value) = false) Then
				Me.OnProjectnameChanging(value)
				Me.SendPropertyChanging
				Me._Projectname = value
				Me.SendPropertyChanged("Projectname")
				Me.OnProjectnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProjectDescrip", DbType:="NVarChar(MAX)")>  _
	Public Property ProjectDescrip() As String
		Get
			Return Me._ProjectDescrip
		End Get
		Set
			If (String.Equals(Me._ProjectDescrip, value) = false) Then
				Me.OnProjectDescripChanging(value)
				Me.SendPropertyChanging
				Me._ProjectDescrip = value
				Me.SendPropertyChanged("ProjectDescrip")
				Me.OnProjectDescripChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_datecreated", DbType:="Date")>  _
	Public Property datecreated() As System.Nullable(Of Date)
		Get
			Return Me._datecreated
		End Get
		Set
			If (Me._datecreated.Equals(value) = false) Then
				Me.OndatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._datecreated = value
				Me.SendPropertyChanged("datecreated")
				Me.OndatecreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TaxTable")>  _
Partial Public Class TaxTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Taxname As String
	
	Private _Description As String
	
	Private _createdby As String
	
	Private _datecreated As String
	
	Private _DateUpdated As String
	
	Private _UpdatedBy As String
	
	Private _Churchid As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTaxnameChanging(value As String)
    End Sub
    Partial Private Sub OnTaxnameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    Partial Private Sub OndatecreatedChanging(value As String)
    End Sub
    Partial Private Sub OndatecreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Taxname", DbType:="NVarChar(MAX)")>  _
	Public Property Taxname() As String
		Get
			Return Me._Taxname
		End Get
		Set
			If (String.Equals(Me._Taxname, value) = false) Then
				Me.OnTaxnameChanging(value)
				Me.SendPropertyChanging
				Me._Taxname = value
				Me.SendPropertyChanged("Taxname")
				Me.OnTaxnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_datecreated", DbType:="NVarChar(50)")>  _
	Public Property datecreated() As String
		Get
			Return Me._datecreated
		End Get
		Set
			If (String.Equals(Me._datecreated, value) = false) Then
				Me.OndatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._datecreated = value
				Me.SendPropertyChanged("datecreated")
				Me.OndatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="NVarChar(50)")>  _
	Public Property DateUpdated() As String
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (String.Equals(Me._DateUpdated, value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(50)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SupplierTable")>  _
Partial Public Class SupplierTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Supplerid As Integer
	
	Private _CompanyName As String
	
	Private _Address1 As String
	
	Private _Phone1 As String
	
	Private _Phone2 As String
	
	Private _Bankname As String
	
	Private _AccountNo As String
	
	Private _Accounttype As String
	
	Private _AccountName As String
	
	Private _Supply As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _Updatedby As String
	
	Private _Updateddated As String
	
	Private _churchid As String
	
	Private _RaiseExpensesHdTables As EntitySet(Of RaiseExpensesHdTable)
	
	Private _AccountPayableTables As EntitySet(Of AccountPayableTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSuppleridChanging(value As Integer)
    End Sub
    Partial Private Sub OnSuppleridChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnPhone1Changed()
    End Sub
    Partial Private Sub OnPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnPhone2Changed()
    End Sub
    Partial Private Sub OnBanknameChanging(value As String)
    End Sub
    Partial Private Sub OnBanknameChanged()
    End Sub
    Partial Private Sub OnAccountNoChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNoChanged()
    End Sub
    Partial Private Sub OnAccounttypeChanging(value As String)
    End Sub
    Partial Private Sub OnAccounttypeChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnSupplyChanging(value As String)
    End Sub
    Partial Private Sub OnSupplyChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnUpdateddatedChanging(value As String)
    End Sub
    Partial Private Sub OnUpdateddatedChanged()
    End Sub
    Partial Private Sub OnchurchidChanging(value As String)
    End Sub
    Partial Private Sub OnchurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RaiseExpensesHdTables = New EntitySet(Of RaiseExpensesHdTable)(AddressOf Me.attach_RaiseExpensesHdTables, AddressOf Me.detach_RaiseExpensesHdTables)
		Me._AccountPayableTables = New EntitySet(Of AccountPayableTable)(AddressOf Me.attach_AccountPayableTables, AddressOf Me.detach_AccountPayableTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplerid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Supplerid() As Integer
		Get
			Return Me._Supplerid
		End Get
		Set
			If ((Me._Supplerid = value)  _
						= false) Then
				Me.OnSuppleridChanging(value)
				Me.SendPropertyChanging
				Me._Supplerid = value
				Me.SendPropertyChanged("Supplerid")
				Me.OnSuppleridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(MAX)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(MAX)")>  _
	Public Property Address1() As String
		Get
			Return Me._Address1
		End Get
		Set
			If (String.Equals(Me._Address1, value) = false) Then
				Me.OnAddress1Changing(value)
				Me.SendPropertyChanging
				Me._Address1 = value
				Me.SendPropertyChanged("Address1")
				Me.OnAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(50)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me.OnPhone1Changing(value)
				Me.SendPropertyChanging
				Me._Phone1 = value
				Me.SendPropertyChanged("Phone1")
				Me.OnPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone2", DbType:="NVarChar(50)")>  _
	Public Property Phone2() As String
		Get
			Return Me._Phone2
		End Get
		Set
			If (String.Equals(Me._Phone2, value) = false) Then
				Me.OnPhone2Changing(value)
				Me.SendPropertyChanging
				Me._Phone2 = value
				Me.SendPropertyChanged("Phone2")
				Me.OnPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankname", DbType:="NVarChar(MAX)")>  _
	Public Property Bankname() As String
		Get
			Return Me._Bankname
		End Get
		Set
			If (String.Equals(Me._Bankname, value) = false) Then
				Me.OnBanknameChanging(value)
				Me.SendPropertyChanging
				Me._Bankname = value
				Me.SendPropertyChanged("Bankname")
				Me.OnBanknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNo", DbType:="NVarChar(50)")>  _
	Public Property AccountNo() As String
		Get
			Return Me._AccountNo
		End Get
		Set
			If (String.Equals(Me._AccountNo, value) = false) Then
				Me.OnAccountNoChanging(value)
				Me.SendPropertyChanging
				Me._AccountNo = value
				Me.SendPropertyChanged("AccountNo")
				Me.OnAccountNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accounttype", DbType:="NVarChar(50)")>  _
	Public Property Accounttype() As String
		Get
			Return Me._Accounttype
		End Get
		Set
			If (String.Equals(Me._Accounttype, value) = false) Then
				Me.OnAccounttypeChanging(value)
				Me.SendPropertyChanging
				Me._Accounttype = value
				Me.SendPropertyChanged("Accounttype")
				Me.OnAccounttypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(MAX)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supply", DbType:="NVarChar(MAX)")>  _
	Public Property Supply() As String
		Get
			Return Me._Supply
		End Get
		Set
			If (String.Equals(Me._Supply, value) = false) Then
				Me.OnSupplyChanging(value)
				Me.SendPropertyChanging
				Me._Supply = value
				Me.SendPropertyChanged("Supply")
				Me.OnSupplyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updateddated", DbType:="NVarChar(50)")>  _
	Public Property Updateddated() As String
		Get
			Return Me._Updateddated
		End Get
		Set
			If (String.Equals(Me._Updateddated, value) = false) Then
				Me.OnUpdateddatedChanging(value)
				Me.SendPropertyChanging
				Me._Updateddated = value
				Me.SendPropertyChanged("Updateddated")
				Me.OnUpdateddatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_churchid", DbType:="NVarChar(50)")>  _
	Public Property churchid() As String
		Get
			Return Me._churchid
		End Get
		Set
			If (String.Equals(Me._churchid, value) = false) Then
				Me.OnchurchidChanging(value)
				Me.SendPropertyChanging
				Me._churchid = value
				Me.SendPropertyChanged("churchid")
				Me.OnchurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SupplierTable_RaiseExpensesHdTable", Storage:="_RaiseExpensesHdTables", ThisKey:="Supplerid", OtherKey:="Supplerid")>  _
	Public Property RaiseExpensesHdTables() As EntitySet(Of RaiseExpensesHdTable)
		Get
			Return Me._RaiseExpensesHdTables
		End Get
		Set
			Me._RaiseExpensesHdTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SupplierTable_AccountPayableTable", Storage:="_AccountPayableTables", ThisKey:="Supplerid", OtherKey:="Supplierid")>  _
	Public Property AccountPayableTables() As EntitySet(Of AccountPayableTable)
		Get
			Return Me._AccountPayableTables
		End Get
		Set
			Me._AccountPayableTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RaiseExpensesHdTables(ByVal entity As RaiseExpensesHdTable)
		Me.SendPropertyChanging
		entity.SupplierTable = Me
	End Sub
	
	Private Sub detach_RaiseExpensesHdTables(ByVal entity As RaiseExpensesHdTable)
		Me.SendPropertyChanging
		entity.SupplierTable = Nothing
	End Sub
	
	Private Sub attach_AccountPayableTables(ByVal entity As AccountPayableTable)
		Me.SendPropertyChanging
		entity.SupplierTable = Me
	End Sub
	
	Private Sub detach_AccountPayableTables(ByVal entity As AccountPayableTable)
		Me.SendPropertyChanging
		entity.SupplierTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomeTable")>  _
Partial Public Class IncomeTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Income As String
	
	Private _TitheTables As EntitySet(Of TitheTable)
	
	Private _TithePaymentTables As EntitySet(Of TithePaymentTable)
	
	Private _TitheAccountTables As EntitySet(Of TitheAccountTable)
	
	Private _PledgeAccountTables As EntitySet(Of PledgeAccountTable)
	
	Private _PledgeTables As EntitySet(Of PledgeTable)
	
	Private _IncomeAccountTables As EntitySet(Of IncomeAccountTable)
	
	Private _Other_incomeAccountTables As EntitySet(Of Other_incomeAccountTable)
	
	Private _IncomeOffTables As EntitySet(Of IncomeOffTable)
	
	Private _PastorsTitheAcountTables As EntitySet(Of PastorsTitheAcountTable)
	
	Private _PastorsTithePaymentTables As EntitySet(Of PastorsTithePaymentTable)
	
	Private _PastorsTitheTables As EntitySet(Of PastorsTitheTable)
	
	Private _HierarchyTables As EntitySet(Of HierarchyTable)
	
	Private _HierarcyAccountTables As EntitySet(Of HierarcyAccountTable)
	
	Private _PensionTables As EntitySet(Of PensionTable)
	
	Private _PensionPaymentTables As EntitySet(Of PensionPaymentTable)
	
	Private _PensionAccountTables As EntitySet(Of PensionAccountTable)
	
	Private _IncomePaymentTables As EntitySet(Of IncomePaymentTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnIncomeChanging(value As String)
    End Sub
    Partial Private Sub OnIncomeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TitheTables = New EntitySet(Of TitheTable)(AddressOf Me.attach_TitheTables, AddressOf Me.detach_TitheTables)
		Me._TithePaymentTables = New EntitySet(Of TithePaymentTable)(AddressOf Me.attach_TithePaymentTables, AddressOf Me.detach_TithePaymentTables)
		Me._TitheAccountTables = New EntitySet(Of TitheAccountTable)(AddressOf Me.attach_TitheAccountTables, AddressOf Me.detach_TitheAccountTables)
		Me._PledgeAccountTables = New EntitySet(Of PledgeAccountTable)(AddressOf Me.attach_PledgeAccountTables, AddressOf Me.detach_PledgeAccountTables)
		Me._PledgeTables = New EntitySet(Of PledgeTable)(AddressOf Me.attach_PledgeTables, AddressOf Me.detach_PledgeTables)
		Me._IncomeAccountTables = New EntitySet(Of IncomeAccountTable)(AddressOf Me.attach_IncomeAccountTables, AddressOf Me.detach_IncomeAccountTables)
		Me._Other_incomeAccountTables = New EntitySet(Of Other_incomeAccountTable)(AddressOf Me.attach_Other_incomeAccountTables, AddressOf Me.detach_Other_incomeAccountTables)
		Me._IncomeOffTables = New EntitySet(Of IncomeOffTable)(AddressOf Me.attach_IncomeOffTables, AddressOf Me.detach_IncomeOffTables)
		Me._PastorsTitheAcountTables = New EntitySet(Of PastorsTitheAcountTable)(AddressOf Me.attach_PastorsTitheAcountTables, AddressOf Me.detach_PastorsTitheAcountTables)
		Me._PastorsTithePaymentTables = New EntitySet(Of PastorsTithePaymentTable)(AddressOf Me.attach_PastorsTithePaymentTables, AddressOf Me.detach_PastorsTithePaymentTables)
		Me._PastorsTitheTables = New EntitySet(Of PastorsTitheTable)(AddressOf Me.attach_PastorsTitheTables, AddressOf Me.detach_PastorsTitheTables)
		Me._HierarchyTables = New EntitySet(Of HierarchyTable)(AddressOf Me.attach_HierarchyTables, AddressOf Me.detach_HierarchyTables)
		Me._HierarcyAccountTables = New EntitySet(Of HierarcyAccountTable)(AddressOf Me.attach_HierarcyAccountTables, AddressOf Me.detach_HierarcyAccountTables)
		Me._PensionTables = New EntitySet(Of PensionTable)(AddressOf Me.attach_PensionTables, AddressOf Me.detach_PensionTables)
		Me._PensionPaymentTables = New EntitySet(Of PensionPaymentTable)(AddressOf Me.attach_PensionPaymentTables, AddressOf Me.detach_PensionPaymentTables)
		Me._PensionAccountTables = New EntitySet(Of PensionAccountTable)(AddressOf Me.attach_PensionAccountTables, AddressOf Me.detach_PensionAccountTables)
		Me._IncomePaymentTables = New EntitySet(Of IncomePaymentTable)(AddressOf Me.attach_IncomePaymentTables, AddressOf Me.detach_IncomePaymentTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Income", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Income() As String
		Get
			Return Me._Income
		End Get
		Set
			If (String.Equals(Me._Income, value) = false) Then
				Me.OnIncomeChanging(value)
				Me.SendPropertyChanging
				Me._Income = value
				Me.SendPropertyChanged("Income")
				Me.OnIncomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_TitheTable", Storage:="_TitheTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property TitheTables() As EntitySet(Of TitheTable)
		Get
			Return Me._TitheTables
		End Get
		Set
			Me._TitheTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_TithePaymentTable", Storage:="_TithePaymentTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property TithePaymentTables() As EntitySet(Of TithePaymentTable)
		Get
			Return Me._TithePaymentTables
		End Get
		Set
			Me._TithePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_TitheAccountTable", Storage:="_TitheAccountTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property TitheAccountTables() As EntitySet(Of TitheAccountTable)
		Get
			Return Me._TitheAccountTables
		End Get
		Set
			Me._TitheAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PledgeAccountTable", Storage:="_PledgeAccountTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property PledgeAccountTables() As EntitySet(Of PledgeAccountTable)
		Get
			Return Me._PledgeAccountTables
		End Get
		Set
			Me._PledgeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PledgeTable", Storage:="_PledgeTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property PledgeTables() As EntitySet(Of PledgeTable)
		Get
			Return Me._PledgeTables
		End Get
		Set
			Me._PledgeTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_IncomeAccountTable", Storage:="_IncomeAccountTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property IncomeAccountTables() As EntitySet(Of IncomeAccountTable)
		Get
			Return Me._IncomeAccountTables
		End Get
		Set
			Me._IncomeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_Other_incomeAccountTable", Storage:="_Other_incomeAccountTables", ThisKey:="ID", OtherKey:="Other_incomeid")>  _
	Public Property Other_incomeAccountTables() As EntitySet(Of Other_incomeAccountTable)
		Get
			Return Me._Other_incomeAccountTables
		End Get
		Set
			Me._Other_incomeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_IncomeOffTable", Storage:="_IncomeOffTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property IncomeOffTables() As EntitySet(Of IncomeOffTable)
		Get
			Return Me._IncomeOffTables
		End Get
		Set
			Me._IncomeOffTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PastorsTitheAcountTable", Storage:="_PastorsTitheAcountTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property PastorsTitheAcountTables() As EntitySet(Of PastorsTitheAcountTable)
		Get
			Return Me._PastorsTitheAcountTables
		End Get
		Set
			Me._PastorsTitheAcountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PastorsTithePaymentTable", Storage:="_PastorsTithePaymentTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property PastorsTithePaymentTables() As EntitySet(Of PastorsTithePaymentTable)
		Get
			Return Me._PastorsTithePaymentTables
		End Get
		Set
			Me._PastorsTithePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PastorsTitheTable", Storage:="_PastorsTitheTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property PastorsTitheTables() As EntitySet(Of PastorsTitheTable)
		Get
			Return Me._PastorsTitheTables
		End Get
		Set
			Me._PastorsTitheTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_HierarchyTable", Storage:="_HierarchyTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property HierarchyTables() As EntitySet(Of HierarchyTable)
		Get
			Return Me._HierarchyTables
		End Get
		Set
			Me._HierarchyTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_HierarcyAccountTable", Storage:="_HierarcyAccountTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property HierarcyAccountTables() As EntitySet(Of HierarcyAccountTable)
		Get
			Return Me._HierarcyAccountTables
		End Get
		Set
			Me._HierarcyAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PensionTable", Storage:="_PensionTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property PensionTables() As EntitySet(Of PensionTable)
		Get
			Return Me._PensionTables
		End Get
		Set
			Me._PensionTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PensionPaymentTable", Storage:="_PensionPaymentTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property PensionPaymentTables() As EntitySet(Of PensionPaymentTable)
		Get
			Return Me._PensionPaymentTables
		End Get
		Set
			Me._PensionPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PensionAccountTable", Storage:="_PensionAccountTables", ThisKey:="ID", OtherKey:="incomeid")>  _
	Public Property PensionAccountTables() As EntitySet(Of PensionAccountTable)
		Get
			Return Me._PensionAccountTables
		End Get
		Set
			Me._PensionAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_IncomePaymentTable", Storage:="_IncomePaymentTables", ThisKey:="ID", OtherKey:="Incomeid")>  _
	Public Property IncomePaymentTables() As EntitySet(Of IncomePaymentTable)
		Get
			Return Me._IncomePaymentTables
		End Get
		Set
			Me._IncomePaymentTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TitheTables(ByVal entity As TitheTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_TitheTables(ByVal entity As TitheTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_TithePaymentTables(ByVal entity As TithePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_TithePaymentTables(ByVal entity As TithePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_TitheAccountTables(ByVal entity As TitheAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_TitheAccountTables(ByVal entity As TitheAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PledgeAccountTables(ByVal entity As PledgeAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PledgeAccountTables(ByVal entity As PledgeAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PledgeTables(ByVal entity As PledgeTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PledgeTables(ByVal entity As PledgeTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_IncomeAccountTables(ByVal entity As IncomeAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_IncomeAccountTables(ByVal entity As IncomeAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_Other_incomeAccountTables(ByVal entity As Other_incomeAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_Other_incomeAccountTables(ByVal entity As Other_incomeAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_IncomeOffTables(ByVal entity As IncomeOffTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_IncomeOffTables(ByVal entity As IncomeOffTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTitheAcountTables(ByVal entity As PastorsTitheAcountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PastorsTitheAcountTables(ByVal entity As PastorsTitheAcountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTithePaymentTables(ByVal entity As PastorsTithePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PastorsTithePaymentTables(ByVal entity As PastorsTithePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTitheTables(ByVal entity As PastorsTitheTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PastorsTitheTables(ByVal entity As PastorsTitheTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PensionTables(ByVal entity As PensionTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PensionTables(ByVal entity As PensionTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PensionPaymentTables(ByVal entity As PensionPaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PensionPaymentTables(ByVal entity As PensionPaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
	
	Private Sub attach_IncomePaymentTables(ByVal entity As IncomePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Me
	End Sub
	
	Private Sub detach_IncomePaymentTables(ByVal entity As IncomePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaymentMethodTable")>  _
Partial Public Class PaymentMethodTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _PaymentName As String
	
	Private _TithePaymentTables As EntitySet(Of TithePaymentTable)
	
	Private _TitheBankPaymentTables As EntitySet(Of TitheBankPaymentTable)
	
	Private _PledgeBankPaymentTables As EntitySet(Of PledgeBankPaymentTable)
	
	Private _PledgePaymentTables As EntitySet(Of PledgePaymentTable)
	
	Private _IncomeBankPaymentTables As EntitySet(Of IncomeBankPaymentTable)
	
	Private _WelfareBankPaymentTables As EntitySet(Of WelfareBankPaymentTable)
	
	Private _WarefarePaymentTables As EntitySet(Of WarefarePaymentTable)
	
	Private _RaiseExpenPaymentTables As EntitySet(Of RaiseExpenPaymentTable)
	
	Private _RaiseBankPaymentTables As EntitySet(Of RaiseBankPaymentTable)
	
	Private _pastorsTitheBankPaymentTables As EntitySet(Of pastorsTitheBankPaymentTable)
	
	Private _PastorsTithePaymentTables As EntitySet(Of PastorsTithePaymentTable)
	
	Private _HierarcyBankPaymentTables As EntitySet(Of HierarcyBankPaymentTable)
	
	Private _PensionPaymentTables As EntitySet(Of PensionPaymentTable)
	
	Private _PensionBankPaymentTables As EntitySet(Of PensionBankPaymentTable)
	
	Private _HierarchyPaymentTables As EntitySet(Of HierarchyPaymentTable)
	
	Private _IncomePaymentTables As EntitySet(Of IncomePaymentTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPaymentNameChanging(value As String)
    End Sub
    Partial Private Sub OnPaymentNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TithePaymentTables = New EntitySet(Of TithePaymentTable)(AddressOf Me.attach_TithePaymentTables, AddressOf Me.detach_TithePaymentTables)
		Me._TitheBankPaymentTables = New EntitySet(Of TitheBankPaymentTable)(AddressOf Me.attach_TitheBankPaymentTables, AddressOf Me.detach_TitheBankPaymentTables)
		Me._PledgeBankPaymentTables = New EntitySet(Of PledgeBankPaymentTable)(AddressOf Me.attach_PledgeBankPaymentTables, AddressOf Me.detach_PledgeBankPaymentTables)
		Me._PledgePaymentTables = New EntitySet(Of PledgePaymentTable)(AddressOf Me.attach_PledgePaymentTables, AddressOf Me.detach_PledgePaymentTables)
		Me._IncomeBankPaymentTables = New EntitySet(Of IncomeBankPaymentTable)(AddressOf Me.attach_IncomeBankPaymentTables, AddressOf Me.detach_IncomeBankPaymentTables)
		Me._WelfareBankPaymentTables = New EntitySet(Of WelfareBankPaymentTable)(AddressOf Me.attach_WelfareBankPaymentTables, AddressOf Me.detach_WelfareBankPaymentTables)
		Me._WarefarePaymentTables = New EntitySet(Of WarefarePaymentTable)(AddressOf Me.attach_WarefarePaymentTables, AddressOf Me.detach_WarefarePaymentTables)
		Me._RaiseExpenPaymentTables = New EntitySet(Of RaiseExpenPaymentTable)(AddressOf Me.attach_RaiseExpenPaymentTables, AddressOf Me.detach_RaiseExpenPaymentTables)
		Me._RaiseBankPaymentTables = New EntitySet(Of RaiseBankPaymentTable)(AddressOf Me.attach_RaiseBankPaymentTables, AddressOf Me.detach_RaiseBankPaymentTables)
		Me._pastorsTitheBankPaymentTables = New EntitySet(Of pastorsTitheBankPaymentTable)(AddressOf Me.attach_pastorsTitheBankPaymentTables, AddressOf Me.detach_pastorsTitheBankPaymentTables)
		Me._PastorsTithePaymentTables = New EntitySet(Of PastorsTithePaymentTable)(AddressOf Me.attach_PastorsTithePaymentTables, AddressOf Me.detach_PastorsTithePaymentTables)
		Me._HierarcyBankPaymentTables = New EntitySet(Of HierarcyBankPaymentTable)(AddressOf Me.attach_HierarcyBankPaymentTables, AddressOf Me.detach_HierarcyBankPaymentTables)
		Me._PensionPaymentTables = New EntitySet(Of PensionPaymentTable)(AddressOf Me.attach_PensionPaymentTables, AddressOf Me.detach_PensionPaymentTables)
		Me._PensionBankPaymentTables = New EntitySet(Of PensionBankPaymentTable)(AddressOf Me.attach_PensionBankPaymentTables, AddressOf Me.detach_PensionBankPaymentTables)
		Me._HierarchyPaymentTables = New EntitySet(Of HierarchyPaymentTable)(AddressOf Me.attach_HierarchyPaymentTables, AddressOf Me.detach_HierarchyPaymentTables)
		Me._IncomePaymentTables = New EntitySet(Of IncomePaymentTable)(AddressOf Me.attach_IncomePaymentTables, AddressOf Me.detach_IncomePaymentTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentName", DbType:="NVarChar(50)")>  _
	Public Property PaymentName() As String
		Get
			Return Me._PaymentName
		End Get
		Set
			If (String.Equals(Me._PaymentName, value) = false) Then
				Me.OnPaymentNameChanging(value)
				Me.SendPropertyChanging
				Me._PaymentName = value
				Me.SendPropertyChanged("PaymentName")
				Me.OnPaymentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_TithePaymentTable", Storage:="_TithePaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property TithePaymentTables() As EntitySet(Of TithePaymentTable)
		Get
			Return Me._TithePaymentTables
		End Get
		Set
			Me._TithePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_TitheBankPaymentTable", Storage:="_TitheBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property TitheBankPaymentTables() As EntitySet(Of TitheBankPaymentTable)
		Get
			Return Me._TitheBankPaymentTables
		End Get
		Set
			Me._TitheBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PledgeBankPaymentTable", Storage:="_PledgeBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property PledgeBankPaymentTables() As EntitySet(Of PledgeBankPaymentTable)
		Get
			Return Me._PledgeBankPaymentTables
		End Get
		Set
			Me._PledgeBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PledgePaymentTable", Storage:="_PledgePaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property PledgePaymentTables() As EntitySet(Of PledgePaymentTable)
		Get
			Return Me._PledgePaymentTables
		End Get
		Set
			Me._PledgePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_IncomeBankPaymentTable", Storage:="_IncomeBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property IncomeBankPaymentTables() As EntitySet(Of IncomeBankPaymentTable)
		Get
			Return Me._IncomeBankPaymentTables
		End Get
		Set
			Me._IncomeBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_WelfareBankPaymentTable", Storage:="_WelfareBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property WelfareBankPaymentTables() As EntitySet(Of WelfareBankPaymentTable)
		Get
			Return Me._WelfareBankPaymentTables
		End Get
		Set
			Me._WelfareBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_WarefarePaymentTable", Storage:="_WarefarePaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property WarefarePaymentTables() As EntitySet(Of WarefarePaymentTable)
		Get
			Return Me._WarefarePaymentTables
		End Get
		Set
			Me._WarefarePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_RaiseExpenPaymentTable", Storage:="_RaiseExpenPaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property RaiseExpenPaymentTables() As EntitySet(Of RaiseExpenPaymentTable)
		Get
			Return Me._RaiseExpenPaymentTables
		End Get
		Set
			Me._RaiseExpenPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_RaiseBankPaymentTable", Storage:="_RaiseBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property RaiseBankPaymentTables() As EntitySet(Of RaiseBankPaymentTable)
		Get
			Return Me._RaiseBankPaymentTables
		End Get
		Set
			Me._RaiseBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_pastorsTitheBankPaymentTable", Storage:="_pastorsTitheBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property pastorsTitheBankPaymentTables() As EntitySet(Of pastorsTitheBankPaymentTable)
		Get
			Return Me._pastorsTitheBankPaymentTables
		End Get
		Set
			Me._pastorsTitheBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PastorsTithePaymentTable", Storage:="_PastorsTithePaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property PastorsTithePaymentTables() As EntitySet(Of PastorsTithePaymentTable)
		Get
			Return Me._PastorsTithePaymentTables
		End Get
		Set
			Me._PastorsTithePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_HierarcyBankPaymentTable", Storage:="_HierarcyBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property HierarcyBankPaymentTables() As EntitySet(Of HierarcyBankPaymentTable)
		Get
			Return Me._HierarcyBankPaymentTables
		End Get
		Set
			Me._HierarcyBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PensionPaymentTable", Storage:="_PensionPaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property PensionPaymentTables() As EntitySet(Of PensionPaymentTable)
		Get
			Return Me._PensionPaymentTables
		End Get
		Set
			Me._PensionPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PensionBankPaymentTable", Storage:="_PensionBankPaymentTables", ThisKey:="Id", OtherKey:="Paymentid")>  _
	Public Property PensionBankPaymentTables() As EntitySet(Of PensionBankPaymentTable)
		Get
			Return Me._PensionBankPaymentTables
		End Get
		Set
			Me._PensionBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_HierarchyPaymentTable", Storage:="_HierarchyPaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property HierarchyPaymentTables() As EntitySet(Of HierarchyPaymentTable)
		Get
			Return Me._HierarchyPaymentTables
		End Get
		Set
			Me._HierarchyPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_IncomePaymentTable", Storage:="_IncomePaymentTables", ThisKey:="Id", OtherKey:="PaymentMethodid")>  _
	Public Property IncomePaymentTables() As EntitySet(Of IncomePaymentTable)
		Get
			Return Me._IncomePaymentTables
		End Get
		Set
			Me._IncomePaymentTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TithePaymentTables(ByVal entity As TithePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_TithePaymentTables(ByVal entity As TithePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_TitheBankPaymentTables(ByVal entity As TitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_TitheBankPaymentTables(ByVal entity As TitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_PledgeBankPaymentTables(ByVal entity As PledgeBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_PledgeBankPaymentTables(ByVal entity As PledgeBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_PledgePaymentTables(ByVal entity As PledgePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_PledgePaymentTables(ByVal entity As PledgePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_IncomeBankPaymentTables(ByVal entity As IncomeBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_IncomeBankPaymentTables(ByVal entity As IncomeBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_WelfareBankPaymentTables(ByVal entity As WelfareBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_WelfareBankPaymentTables(ByVal entity As WelfareBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_WarefarePaymentTables(ByVal entity As WarefarePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_WarefarePaymentTables(ByVal entity As WarefarePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_RaiseExpenPaymentTables(ByVal entity As RaiseExpenPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_RaiseExpenPaymentTables(ByVal entity As RaiseExpenPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_RaiseBankPaymentTables(ByVal entity As RaiseBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_RaiseBankPaymentTables(ByVal entity As RaiseBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_pastorsTitheBankPaymentTables(ByVal entity As pastorsTitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_pastorsTitheBankPaymentTables(ByVal entity As pastorsTitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTithePaymentTables(ByVal entity As PastorsTithePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_PastorsTithePaymentTables(ByVal entity As PastorsTithePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyBankPaymentTables(ByVal entity As HierarcyBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_HierarcyBankPaymentTables(ByVal entity As HierarcyBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_PensionPaymentTables(ByVal entity As PensionPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_PensionPaymentTables(ByVal entity As PensionPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_PensionBankPaymentTables(ByVal entity As PensionBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_PensionBankPaymentTables(ByVal entity As PensionBankPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_HierarchyPaymentTables(ByVal entity As HierarchyPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_HierarchyPaymentTables(ByVal entity As HierarchyPaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
	
	Private Sub attach_IncomePaymentTables(ByVal entity As IncomePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Me
	End Sub
	
	Private Sub detach_IncomePaymentTables(ByVal entity As IncomePaymentTable)
		Me.SendPropertyChanging
		entity.PaymentMethodTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cash_bankrelationshipTable")>  _
Partial Public Class Cash_bankrelationshipTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Cash_bankrelationship As String
	
	Private _ChartAccountTables As EntitySet(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCash_bankrelationshipChanging(value As String)
    End Sub
    Partial Private Sub OnCash_bankrelationshipChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTables = New EntitySet(Of ChartAccountTable)(AddressOf Me.attach_ChartAccountTables, AddressOf Me.detach_ChartAccountTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cash_bankrelationship", DbType:="NVarChar(50)")>  _
	Public Property Cash_bankrelationship() As String
		Get
			Return Me._Cash_bankrelationship
		End Get
		Set
			If (String.Equals(Me._Cash_bankrelationship, value) = false) Then
				Me.OnCash_bankrelationshipChanging(value)
				Me.SendPropertyChanging
				Me._Cash_bankrelationship = value
				Me.SendPropertyChanged("Cash_bankrelationship")
				Me.OnCash_bankrelationshipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cash_bankrelationshipTable_ChartAccountTable", Storage:="_ChartAccountTables", ThisKey:="Id", OtherKey:="cash_bank_relationshipid")>  _
	Public Property ChartAccountTables() As EntitySet(Of ChartAccountTable)
		Get
			Return Me._ChartAccountTables
		End Get
		Set
			Me._ChartAccountTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Cash_bankrelationshipTable = Me
	End Sub
	
	Private Sub detach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Cash_bankrelationshipTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Income_ExpenditureTable")>  _
Partial Public Class Income_ExpenditureTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Income_Expenditure As String
	
	Private _ChartAccountTables As EntitySet(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnIncome_ExpenditureChanging(value As String)
    End Sub
    Partial Private Sub OnIncome_ExpenditureChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTables = New EntitySet(Of ChartAccountTable)(AddressOf Me.attach_ChartAccountTables, AddressOf Me.detach_ChartAccountTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Income_Expenditure", DbType:="NVarChar(50)")>  _
	Public Property Income_Expenditure() As String
		Get
			Return Me._Income_Expenditure
		End Get
		Set
			If (String.Equals(Me._Income_Expenditure, value) = false) Then
				Me.OnIncome_ExpenditureChanging(value)
				Me.SendPropertyChanging
				Me._Income_Expenditure = value
				Me.SendPropertyChanged("Income_Expenditure")
				Me.OnIncome_ExpenditureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Income_ExpenditureTable_ChartAccountTable", Storage:="_ChartAccountTables", ThisKey:="id", OtherKey:="Income_expenditureid")>  _
	Public Property ChartAccountTables() As EntitySet(Of ChartAccountTable)
		Get
			Return Me._ChartAccountTables
		End Get
		Set
			Me._ChartAccountTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Income_ExpenditureTable = Me
	End Sub
	
	Private Sub detach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Income_ExpenditureTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Report_typeTable")>  _
Partial Public Class Report_typeTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Report_type As String
	
	Private _ChartAccountTables As EntitySet(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnReport_typeChanging(value As String)
    End Sub
    Partial Private Sub OnReport_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTables = New EntitySet(Of ChartAccountTable)(AddressOf Me.attach_ChartAccountTables, AddressOf Me.detach_ChartAccountTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Report_type", DbType:="NVarChar(50)")>  _
	Public Property Report_type() As String
		Get
			Return Me._Report_type
		End Get
		Set
			If (String.Equals(Me._Report_type, value) = false) Then
				Me.OnReport_typeChanging(value)
				Me.SendPropertyChanging
				Me._Report_type = value
				Me.SendPropertyChanged("Report_type")
				Me.OnReport_typeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Report_typeTable_ChartAccountTable", Storage:="_ChartAccountTables", ThisKey:="Id", OtherKey:="Reportid")>  _
	Public Property ChartAccountTables() As EntitySet(Of ChartAccountTable)
		Get
			Return Me._ChartAccountTables
		End Get
		Set
			Me._ChartAccountTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Report_typeTable = Me
	End Sub
	
	Private Sub detach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Report_typeTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Asset_liabilityTable")>  _
Partial Public Class Asset_liabilityTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Name As String
	
	Private _ChartAccountTables As EntitySet(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTables = New EntitySet(Of ChartAccountTable)(AddressOf Me.attach_ChartAccountTables, AddressOf Me.detach_ChartAccountTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Asset_liabilityTable_ChartAccountTable", Storage:="_ChartAccountTables", ThisKey:="id", OtherKey:="Asset_Liabilityid")>  _
	Public Property ChartAccountTables() As EntitySet(Of ChartAccountTable)
		Get
			Return Me._ChartAccountTables
		End Get
		Set
			Me._ChartAccountTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Asset_liabilityTable = Me
	End Sub
	
	Private Sub detach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Asset_liabilityTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Current_nonCurrentTable")>  _
Partial Public Class Current_nonCurrentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Current_nonCurrent As String
	
	Private _ChartAccountTables As EntitySet(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCurrent_nonCurrentChanging(value As String)
    End Sub
    Partial Private Sub OnCurrent_nonCurrentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTables = New EntitySet(Of ChartAccountTable)(AddressOf Me.attach_ChartAccountTables, AddressOf Me.detach_ChartAccountTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Current_nonCurrent", DbType:="NVarChar(50)")>  _
	Public Property Current_nonCurrent() As String
		Get
			Return Me._Current_nonCurrent
		End Get
		Set
			If (String.Equals(Me._Current_nonCurrent, value) = false) Then
				Me.OnCurrent_nonCurrentChanging(value)
				Me.SendPropertyChanging
				Me._Current_nonCurrent = value
				Me.SendPropertyChanged("Current_nonCurrent")
				Me.OnCurrent_nonCurrentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Current_nonCurrentTable_ChartAccountTable", Storage:="_ChartAccountTables", ThisKey:="Id", OtherKey:="Current_noncurrentid")>  _
	Public Property ChartAccountTables() As EntitySet(Of ChartAccountTable)
		Get
			Return Me._ChartAccountTables
		End Get
		Set
			Me._ChartAccountTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Current_nonCurrentTable = Me
	End Sub
	
	Private Sub detach_ChartAccountTables(ByVal entity As ChartAccountTable)
		Me.SendPropertyChanging
		entity.Current_nonCurrentTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TitheTable")>  _
Partial Public Class TitheTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Incomeid As Integer
	
	Private _Titheid As String
	
	Private _Membername As String
	
	Private _PhoneNumber As String
	
	Private _TitheNo As System.Nullable(Of Integer)
	
	Private _Year As String
	
	Private _Month As String
	
	Private _Week As String
	
	Private _Amountword As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Staffid As String
	
	Private _Churchid As String
	
	Private _TitheBankPaymentTables As EntitySet(Of TitheBankPaymentTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnMembernameChanging(value As String)
    End Sub
    Partial Private Sub OnMembernameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnTitheNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTitheNoChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As String)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnWeekChanging(value As String)
    End Sub
    Partial Private Sub OnWeekChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TitheBankPaymentTables = New EntitySet(Of TitheBankPaymentTable)(AddressOf Me.attach_TitheBankPaymentTables, AddressOf Me.detach_TitheBankPaymentTables)
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Membername", DbType:="NVarChar(50)")>  _
	Public Property Membername() As String
		Get
			Return Me._Membername
		End Get
		Set
			If (String.Equals(Me._Membername, value) = false) Then
				Me.OnMembernameChanging(value)
				Me.SendPropertyChanging
				Me._Membername = value
				Me.SendPropertyChanged("Membername")
				Me.OnMembernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitheNo", DbType:="Int")>  _
	Public Property TitheNo() As System.Nullable(Of Integer)
		Get
			Return Me._TitheNo
		End Get
		Set
			If (Me._TitheNo.Equals(value) = false) Then
				Me.OnTitheNoChanging(value)
				Me.SendPropertyChanging
				Me._TitheNo = value
				Me.SendPropertyChanged("TitheNo")
				Me.OnTitheNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Year() As String
		Get
			Return Me._Year
		End Get
		Set
			If (String.Equals(Me._Year, value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Week", DbType:="NVarChar(50)")>  _
	Public Property Week() As String
		Get
			Return Me._Week
		End Get
		Set
			If (String.Equals(Me._Week, value) = false) Then
				Me.OnWeekChanging(value)
				Me.SendPropertyChanging
				Me._Week = value
				Me.SendPropertyChanged("Week")
				Me.OnWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TitheTable_TitheBankPaymentTable", Storage:="_TitheBankPaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property TitheBankPaymentTables() As EntitySet(Of TitheBankPaymentTable)
		Get
			Return Me._TitheBankPaymentTables
		End Get
		Set
			Me._TitheBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_TitheTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.TitheTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TitheTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TitheBankPaymentTables(ByVal entity As TitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.TitheTable = Me
	End Sub
	
	Private Sub detach_TitheBankPaymentTables(ByVal entity As TitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.TitheTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TithePaymentTable")>  _
Partial Public Class TithePaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _Titheid As String
	
	Private _Incomeid As Integer
	
	Private _PaymentMethodid As Integer
	
	Private _Amount As Decimal
	
	Private _Datecreated As Date
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int NOT NULL")>  _
	Public Property PaymentMethodid() As Integer
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If ((Me._PaymentMethodid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_TithePaymentTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.TithePaymentTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TithePaymentTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_TithePaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.TithePaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TithePaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AccountRecivableTable")>  _
Partial Public Class AccountRecivableTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _Memberid As String
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _StaffId As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnMemberidChanging(value As String)
    End Sub
    Partial Private Sub OnMemberidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memberid", DbType:="NVarChar(50)")>  _
	Public Property Memberid() As String
		Get
			Return Me._Memberid
		End Get
		Set
			If (String.Equals(Me._Memberid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberidChanging(value)
				Me.SendPropertyChanging
				Me._Memberid = value
				Me.SendPropertyChanged("Memberid")
				Me.OnMemberidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_AccountRecivableTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.AccountRecivableTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AccountRecivableTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_AccountRecivableTable", Storage:="_MembershipTable", ThisKey:="Memberid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.AccountRecivableTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AccountRecivableTables.Add(Me)
					Me._Memberid = value.Memberid
				Else
					Me._Memberid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TitheAccountTable")>  _
Partial Public Class TitheAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _incomeid As Integer
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _StaffId As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_TitheAccountTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.TitheAccountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TitheAccountTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_TitheAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.TitheAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TitheAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChartAccountTable")>  _
Partial Public Class ChartAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Accountid As Integer
	
	Private _Accountname As String
	
	Private _Asset_Liabilityid As System.Nullable(Of Integer)
	
	Private _Current_noncurrentid As System.Nullable(Of Integer)
	
	Private _Income_expenditureid As System.Nullable(Of Integer)
	
	Private _cash_bank_relationshipid As System.Nullable(Of Integer)
	
	Private _Reportid As Integer
	
	Private _Description As String
	
	Private _Updatedby As String
	
	Private _Updatedate As String
	
	Private _Createdby As String
	
	Private _CreateDate As String
	
	Private _AccountRecivableTables As EntitySet(Of AccountRecivableTable)
	
	Private _TitheAccountTables As EntitySet(Of TitheAccountTable)
	
	Private _PledgeAccountTables As EntitySet(Of PledgeAccountTable)
	
	Private _IncomeAccountTables As EntitySet(Of IncomeAccountTable)
	
	Private _Other_incomeAccountTables As EntitySet(Of Other_incomeAccountTable)
	
	Private _Cash_BookTables As EntitySet(Of Cash_BookTable)
	
	Private _ExpensesAccountTables As EntitySet(Of ExpensesAccountTable)
	
	Private _AccountPayableTables As EntitySet(Of AccountPayableTable)
	
	Private _VowAccountTables As EntitySet(Of VowAccountTable)
	
	Private _SeedfaithaaccountTables As EntitySet(Of SeedfaithaaccountTable)
	
	Private _FirstfruitaccTables As EntitySet(Of FirstfruitaccTable)
	
	Private _PastorsTitheAcountTables As EntitySet(Of PastorsTitheAcountTable)
	
	Private _PastorsAccountTables As EntitySet(Of PastorsAccountTable)
	
	Private _HierarcyAccountTables As EntitySet(Of HierarcyAccountTable)
	
	Private _PensionAccountTables As EntitySet(Of PensionAccountTable)
	
	Private _WelfareAccountTables As EntitySet(Of WelfareAccountTable)
	
	Private _LoanAccountTables As EntitySet(Of LoanAccountTable)
	
	Private _Asset_liabilityTable As EntityRef(Of Asset_liabilityTable)
	
	Private _Cash_bankrelationshipTable As EntityRef(Of Cash_bankrelationshipTable)
	
	Private _Current_nonCurrentTable As EntityRef(Of Current_nonCurrentTable)
	
	Private _Income_ExpenditureTable As EntityRef(Of Income_ExpenditureTable)
	
	Private _Report_typeTable As EntityRef(Of Report_typeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAccountidChanging(value As Integer)
    End Sub
    Partial Private Sub OnAccountidChanged()
    End Sub
    Partial Private Sub OnAccountnameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountnameChanged()
    End Sub
    Partial Private Sub OnAsset_LiabilityidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAsset_LiabilityidChanged()
    End Sub
    Partial Private Sub OnCurrent_noncurrentidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrent_noncurrentidChanged()
    End Sub
    Partial Private Sub OnIncome_expenditureidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIncome_expenditureidChanged()
    End Sub
    Partial Private Sub Oncash_bank_relationshipidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncash_bank_relationshipidChanged()
    End Sub
    Partial Private Sub OnReportidChanging(value As Integer)
    End Sub
    Partial Private Sub OnReportidChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnUpdatedateChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedateChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As String)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AccountRecivableTables = New EntitySet(Of AccountRecivableTable)(AddressOf Me.attach_AccountRecivableTables, AddressOf Me.detach_AccountRecivableTables)
		Me._TitheAccountTables = New EntitySet(Of TitheAccountTable)(AddressOf Me.attach_TitheAccountTables, AddressOf Me.detach_TitheAccountTables)
		Me._PledgeAccountTables = New EntitySet(Of PledgeAccountTable)(AddressOf Me.attach_PledgeAccountTables, AddressOf Me.detach_PledgeAccountTables)
		Me._IncomeAccountTables = New EntitySet(Of IncomeAccountTable)(AddressOf Me.attach_IncomeAccountTables, AddressOf Me.detach_IncomeAccountTables)
		Me._Other_incomeAccountTables = New EntitySet(Of Other_incomeAccountTable)(AddressOf Me.attach_Other_incomeAccountTables, AddressOf Me.detach_Other_incomeAccountTables)
		Me._Cash_BookTables = New EntitySet(Of Cash_BookTable)(AddressOf Me.attach_Cash_BookTables, AddressOf Me.detach_Cash_BookTables)
		Me._ExpensesAccountTables = New EntitySet(Of ExpensesAccountTable)(AddressOf Me.attach_ExpensesAccountTables, AddressOf Me.detach_ExpensesAccountTables)
		Me._AccountPayableTables = New EntitySet(Of AccountPayableTable)(AddressOf Me.attach_AccountPayableTables, AddressOf Me.detach_AccountPayableTables)
		Me._VowAccountTables = New EntitySet(Of VowAccountTable)(AddressOf Me.attach_VowAccountTables, AddressOf Me.detach_VowAccountTables)
		Me._SeedfaithaaccountTables = New EntitySet(Of SeedfaithaaccountTable)(AddressOf Me.attach_SeedfaithaaccountTables, AddressOf Me.detach_SeedfaithaaccountTables)
		Me._FirstfruitaccTables = New EntitySet(Of FirstfruitaccTable)(AddressOf Me.attach_FirstfruitaccTables, AddressOf Me.detach_FirstfruitaccTables)
		Me._PastorsTitheAcountTables = New EntitySet(Of PastorsTitheAcountTable)(AddressOf Me.attach_PastorsTitheAcountTables, AddressOf Me.detach_PastorsTitheAcountTables)
		Me._PastorsAccountTables = New EntitySet(Of PastorsAccountTable)(AddressOf Me.attach_PastorsAccountTables, AddressOf Me.detach_PastorsAccountTables)
		Me._HierarcyAccountTables = New EntitySet(Of HierarcyAccountTable)(AddressOf Me.attach_HierarcyAccountTables, AddressOf Me.detach_HierarcyAccountTables)
		Me._PensionAccountTables = New EntitySet(Of PensionAccountTable)(AddressOf Me.attach_PensionAccountTables, AddressOf Me.detach_PensionAccountTables)
		Me._WelfareAccountTables = New EntitySet(Of WelfareAccountTable)(AddressOf Me.attach_WelfareAccountTables, AddressOf Me.detach_WelfareAccountTables)
		Me._LoanAccountTables = New EntitySet(Of LoanAccountTable)(AddressOf Me.attach_LoanAccountTables, AddressOf Me.detach_LoanAccountTables)
		Me._Asset_liabilityTable = CType(Nothing, EntityRef(Of Asset_liabilityTable))
		Me._Cash_bankrelationshipTable = CType(Nothing, EntityRef(Of Cash_bankrelationshipTable))
		Me._Current_nonCurrentTable = CType(Nothing, EntityRef(Of Current_nonCurrentTable))
		Me._Income_ExpenditureTable = CType(Nothing, EntityRef(Of Income_ExpenditureTable))
		Me._Report_typeTable = CType(Nothing, EntityRef(Of Report_typeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountid", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Accountid() As Integer
		Get
			Return Me._Accountid
		End Get
		Set
			If ((Me._Accountid = value)  _
						= false) Then
				Me.OnAccountidChanging(value)
				Me.SendPropertyChanging
				Me._Accountid = value
				Me.SendPropertyChanged("Accountid")
				Me.OnAccountidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Accountname() As String
		Get
			Return Me._Accountname
		End Get
		Set
			If (String.Equals(Me._Accountname, value) = false) Then
				Me.OnAccountnameChanging(value)
				Me.SendPropertyChanging
				Me._Accountname = value
				Me.SendPropertyChanged("Accountname")
				Me.OnAccountnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asset_Liabilityid", DbType:="Int")>  _
	Public Property Asset_Liabilityid() As System.Nullable(Of Integer)
		Get
			Return Me._Asset_Liabilityid
		End Get
		Set
			If (Me._Asset_Liabilityid.Equals(value) = false) Then
				If Me._Asset_liabilityTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAsset_LiabilityidChanging(value)
				Me.SendPropertyChanging
				Me._Asset_Liabilityid = value
				Me.SendPropertyChanged("Asset_Liabilityid")
				Me.OnAsset_LiabilityidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Current_noncurrentid", DbType:="Int")>  _
	Public Property Current_noncurrentid() As System.Nullable(Of Integer)
		Get
			Return Me._Current_noncurrentid
		End Get
		Set
			If (Me._Current_noncurrentid.Equals(value) = false) Then
				If Me._Current_nonCurrentTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrent_noncurrentidChanging(value)
				Me.SendPropertyChanging
				Me._Current_noncurrentid = value
				Me.SendPropertyChanged("Current_noncurrentid")
				Me.OnCurrent_noncurrentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Income_expenditureid", DbType:="Int")>  _
	Public Property Income_expenditureid() As System.Nullable(Of Integer)
		Get
			Return Me._Income_expenditureid
		End Get
		Set
			If (Me._Income_expenditureid.Equals(value) = false) Then
				If Me._Income_ExpenditureTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncome_expenditureidChanging(value)
				Me.SendPropertyChanging
				Me._Income_expenditureid = value
				Me.SendPropertyChanged("Income_expenditureid")
				Me.OnIncome_expenditureidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cash_bank_relationshipid", DbType:="Int")>  _
	Public Property cash_bank_relationshipid() As System.Nullable(Of Integer)
		Get
			Return Me._cash_bank_relationshipid
		End Get
		Set
			If (Me._cash_bank_relationshipid.Equals(value) = false) Then
				If Me._Cash_bankrelationshipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncash_bank_relationshipidChanging(value)
				Me.SendPropertyChanging
				Me._cash_bank_relationshipid = value
				Me.SendPropertyChanged("cash_bank_relationshipid")
				Me.Oncash_bank_relationshipidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reportid", DbType:="Int NOT NULL")>  _
	Public Property Reportid() As Integer
		Get
			Return Me._Reportid
		End Get
		Set
			If ((Me._Reportid = value)  _
						= false) Then
				If Me._Report_typeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnReportidChanging(value)
				Me.SendPropertyChanging
				Me._Reportid = value
				Me.SendPropertyChanged("Reportid")
				Me.OnReportidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedate", DbType:="NVarChar(50)")>  _
	Public Property Updatedate() As String
		Get
			Return Me._Updatedate
		End Get
		Set
			If (String.Equals(Me._Updatedate, value) = false) Then
				Me.OnUpdatedateChanging(value)
				Me.SendPropertyChanging
				Me._Updatedate = value
				Me.SendPropertyChanged("Updatedate")
				Me.OnUpdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="NVarChar(50)")>  _
	Public Property CreateDate() As String
		Get
			Return Me._CreateDate
		End Get
		Set
			If (String.Equals(Me._CreateDate, value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_AccountRecivableTable", Storage:="_AccountRecivableTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property AccountRecivableTables() As EntitySet(Of AccountRecivableTable)
		Get
			Return Me._AccountRecivableTables
		End Get
		Set
			Me._AccountRecivableTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_TitheAccountTable", Storage:="_TitheAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property TitheAccountTables() As EntitySet(Of TitheAccountTable)
		Get
			Return Me._TitheAccountTables
		End Get
		Set
			Me._TitheAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PledgeAccountTable", Storage:="_PledgeAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property PledgeAccountTables() As EntitySet(Of PledgeAccountTable)
		Get
			Return Me._PledgeAccountTables
		End Get
		Set
			Me._PledgeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_IncomeAccountTable", Storage:="_IncomeAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property IncomeAccountTables() As EntitySet(Of IncomeAccountTable)
		Get
			Return Me._IncomeAccountTables
		End Get
		Set
			Me._IncomeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_Other_incomeAccountTable", Storage:="_Other_incomeAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property Other_incomeAccountTables() As EntitySet(Of Other_incomeAccountTable)
		Get
			Return Me._Other_incomeAccountTables
		End Get
		Set
			Me._Other_incomeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_Cash_BookTable", Storage:="_Cash_BookTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property Cash_BookTables() As EntitySet(Of Cash_BookTable)
		Get
			Return Me._Cash_BookTables
		End Get
		Set
			Me._Cash_BookTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_ExpensesAccountTable", Storage:="_ExpensesAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property ExpensesAccountTables() As EntitySet(Of ExpensesAccountTable)
		Get
			Return Me._ExpensesAccountTables
		End Get
		Set
			Me._ExpensesAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_AccountPayableTable", Storage:="_AccountPayableTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property AccountPayableTables() As EntitySet(Of AccountPayableTable)
		Get
			Return Me._AccountPayableTables
		End Get
		Set
			Me._AccountPayableTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_VowAccountTable", Storage:="_VowAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property VowAccountTables() As EntitySet(Of VowAccountTable)
		Get
			Return Me._VowAccountTables
		End Get
		Set
			Me._VowAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_SeedfaithaaccountTable", Storage:="_SeedfaithaaccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property SeedfaithaaccountTables() As EntitySet(Of SeedfaithaaccountTable)
		Get
			Return Me._SeedfaithaaccountTables
		End Get
		Set
			Me._SeedfaithaaccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_FirstfruitaccTable", Storage:="_FirstfruitaccTables", ThisKey:="Accountname", OtherKey:="AccountidName")>  _
	Public Property FirstfruitaccTables() As EntitySet(Of FirstfruitaccTable)
		Get
			Return Me._FirstfruitaccTables
		End Get
		Set
			Me._FirstfruitaccTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PastorsTitheAcountTable", Storage:="_PastorsTitheAcountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property PastorsTitheAcountTables() As EntitySet(Of PastorsTitheAcountTable)
		Get
			Return Me._PastorsTitheAcountTables
		End Get
		Set
			Me._PastorsTitheAcountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PastorsAccountTable", Storage:="_PastorsAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property PastorsAccountTables() As EntitySet(Of PastorsAccountTable)
		Get
			Return Me._PastorsAccountTables
		End Get
		Set
			Me._PastorsAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_HierarcyAccountTable", Storage:="_HierarcyAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property HierarcyAccountTables() As EntitySet(Of HierarcyAccountTable)
		Get
			Return Me._HierarcyAccountTables
		End Get
		Set
			Me._HierarcyAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PensionAccountTable", Storage:="_PensionAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property PensionAccountTables() As EntitySet(Of PensionAccountTable)
		Get
			Return Me._PensionAccountTables
		End Get
		Set
			Me._PensionAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_WelfareAccountTable", Storage:="_WelfareAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property WelfareAccountTables() As EntitySet(Of WelfareAccountTable)
		Get
			Return Me._WelfareAccountTables
		End Get
		Set
			Me._WelfareAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_LoanAccountTable", Storage:="_LoanAccountTables", ThisKey:="Accountname", OtherKey:="AccountName")>  _
	Public Property LoanAccountTables() As EntitySet(Of LoanAccountTable)
		Get
			Return Me._LoanAccountTables
		End Get
		Set
			Me._LoanAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Asset_liabilityTable_ChartAccountTable", Storage:="_Asset_liabilityTable", ThisKey:="Asset_Liabilityid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Asset_liabilityTable() As Asset_liabilityTable
		Get
			Return Me._Asset_liabilityTable.Entity
		End Get
		Set
			Dim previousValue As Asset_liabilityTable = Me._Asset_liabilityTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Asset_liabilityTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Asset_liabilityTable.Entity = Nothing
					previousValue.ChartAccountTables.Remove(Me)
				End If
				Me._Asset_liabilityTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChartAccountTables.Add(Me)
					Me._Asset_Liabilityid = value.id
				Else
					Me._Asset_Liabilityid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Asset_liabilityTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cash_bankrelationshipTable_ChartAccountTable", Storage:="_Cash_bankrelationshipTable", ThisKey:="cash_bank_relationshipid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Cash_bankrelationshipTable() As Cash_bankrelationshipTable
		Get
			Return Me._Cash_bankrelationshipTable.Entity
		End Get
		Set
			Dim previousValue As Cash_bankrelationshipTable = Me._Cash_bankrelationshipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cash_bankrelationshipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cash_bankrelationshipTable.Entity = Nothing
					previousValue.ChartAccountTables.Remove(Me)
				End If
				Me._Cash_bankrelationshipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChartAccountTables.Add(Me)
					Me._cash_bank_relationshipid = value.Id
				Else
					Me._cash_bank_relationshipid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cash_bankrelationshipTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Current_nonCurrentTable_ChartAccountTable", Storage:="_Current_nonCurrentTable", ThisKey:="Current_noncurrentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Current_nonCurrentTable() As Current_nonCurrentTable
		Get
			Return Me._Current_nonCurrentTable.Entity
		End Get
		Set
			Dim previousValue As Current_nonCurrentTable = Me._Current_nonCurrentTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Current_nonCurrentTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Current_nonCurrentTable.Entity = Nothing
					previousValue.ChartAccountTables.Remove(Me)
				End If
				Me._Current_nonCurrentTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChartAccountTables.Add(Me)
					Me._Current_noncurrentid = value.Id
				Else
					Me._Current_noncurrentid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Current_nonCurrentTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Income_ExpenditureTable_ChartAccountTable", Storage:="_Income_ExpenditureTable", ThisKey:="Income_expenditureid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Income_ExpenditureTable() As Income_ExpenditureTable
		Get
			Return Me._Income_ExpenditureTable.Entity
		End Get
		Set
			Dim previousValue As Income_ExpenditureTable = Me._Income_ExpenditureTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Income_ExpenditureTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Income_ExpenditureTable.Entity = Nothing
					previousValue.ChartAccountTables.Remove(Me)
				End If
				Me._Income_ExpenditureTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChartAccountTables.Add(Me)
					Me._Income_expenditureid = value.id
				Else
					Me._Income_expenditureid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Income_ExpenditureTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Report_typeTable_ChartAccountTable", Storage:="_Report_typeTable", ThisKey:="Reportid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Report_typeTable() As Report_typeTable
		Get
			Return Me._Report_typeTable.Entity
		End Get
		Set
			Dim previousValue As Report_typeTable = Me._Report_typeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Report_typeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Report_typeTable.Entity = Nothing
					previousValue.ChartAccountTables.Remove(Me)
				End If
				Me._Report_typeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChartAccountTables.Add(Me)
					Me._Reportid = value.Id
				Else
					Me._Reportid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Report_typeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AccountRecivableTables(ByVal entity As AccountRecivableTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_AccountRecivableTables(ByVal entity As AccountRecivableTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_TitheAccountTables(ByVal entity As TitheAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_TitheAccountTables(ByVal entity As TitheAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_PledgeAccountTables(ByVal entity As PledgeAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_PledgeAccountTables(ByVal entity As PledgeAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_IncomeAccountTables(ByVal entity As IncomeAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_IncomeAccountTables(ByVal entity As IncomeAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_Other_incomeAccountTables(ByVal entity As Other_incomeAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_Other_incomeAccountTables(ByVal entity As Other_incomeAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_Cash_BookTables(ByVal entity As Cash_BookTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_Cash_BookTables(ByVal entity As Cash_BookTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_ExpensesAccountTables(ByVal entity As ExpensesAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_ExpensesAccountTables(ByVal entity As ExpensesAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_AccountPayableTables(ByVal entity As AccountPayableTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_AccountPayableTables(ByVal entity As AccountPayableTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_VowAccountTables(ByVal entity As VowAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_VowAccountTables(ByVal entity As VowAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_SeedfaithaaccountTables(ByVal entity As SeedfaithaaccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_SeedfaithaaccountTables(ByVal entity As SeedfaithaaccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_FirstfruitaccTables(ByVal entity As FirstfruitaccTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_FirstfruitaccTables(ByVal entity As FirstfruitaccTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTitheAcountTables(ByVal entity As PastorsTitheAcountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_PastorsTitheAcountTables(ByVal entity As PastorsTitheAcountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_PastorsAccountTables(ByVal entity As PastorsAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_PastorsAccountTables(ByVal entity As PastorsAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_WelfareAccountTables(ByVal entity As WelfareAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_WelfareAccountTables(ByVal entity As WelfareAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
	
	Private Sub attach_LoanAccountTables(ByVal entity As LoanAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Me
	End Sub
	
	Private Sub detach_LoanAccountTables(ByVal entity As LoanAccountTable)
		Me.SendPropertyChanging
		entity.ChartAccountTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PledgeAccountTable")>  _
Partial Public Class PledgeAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _Incomeid As Integer
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _StaffId As String
	
	Private _Dateupdated As String
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="NVarChar(50)")>  _
	Public Property Dateupdated() As String
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (String.Equals(Me._Dateupdated, value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PledgeAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.PledgeAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgeAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PledgeAccountTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PledgeAccountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgeAccountTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Country")>  _
Partial Public Class Country
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CountryName As String
	
	Private _Currency_CodeTables As EntitySet(Of Currency_CodeTable)
	
	Private _ChurchDetailTables As EntitySet(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCountryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCountryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Currency_CodeTables = New EntitySet(Of Currency_CodeTable)(AddressOf Me.attach_Currency_CodeTables, AddressOf Me.detach_Currency_CodeTables)
		Me._ChurchDetailTables = New EntitySet(Of ChurchDetailTable)(AddressOf Me.attach_ChurchDetailTables, AddressOf Me.detach_ChurchDetailTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property CountryName() As String
		Get
			Return Me._CountryName
		End Get
		Set
			If (String.Equals(Me._CountryName, value) = false) Then
				Me.OnCountryNameChanging(value)
				Me.SendPropertyChanging
				Me._CountryName = value
				Me.SendPropertyChanged("CountryName")
				Me.OnCountryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Country_Currency_CodeTable", Storage:="_Currency_CodeTables", ThisKey:="ID", OtherKey:="Countr_Name")>  _
	Public Property Currency_CodeTables() As EntitySet(Of Currency_CodeTable)
		Get
			Return Me._Currency_CodeTables
		End Get
		Set
			Me._Currency_CodeTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Country_ChurchDetailTable", Storage:="_ChurchDetailTables", ThisKey:="ID", OtherKey:="Country")>  _
	Public Property ChurchDetailTables() As EntitySet(Of ChurchDetailTable)
		Get
			Return Me._ChurchDetailTables
		End Get
		Set
			Me._ChurchDetailTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Currency_CodeTables(ByVal entity As Currency_CodeTable)
		Me.SendPropertyChanging
		entity.Country = Me
	End Sub
	
	Private Sub detach_Currency_CodeTables(ByVal entity As Currency_CodeTable)
		Me.SendPropertyChanging
		entity.Country = Nothing
	End Sub
	
	Private Sub attach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.Country1 = Me
	End Sub
	
	Private Sub detach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.Country1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Exchange_RateTable")>  _
Partial Public Class Exchange_RateTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Currency_Code As String
	
	Private _Exchange_Rate As System.Nullable(Of Decimal)
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _DateUpdated As String
	
	Private _Staffid As String
	
	Private _Updatedby As String
	
	Private _Currency_CodeTable As EntityRef(Of Currency_CodeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCurrency_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnCurrency_CodeChanged()
    End Sub
    Partial Private Sub OnExchange_RateChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExchange_RateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Currency_CodeTable = CType(Nothing, EntityRef(Of Currency_CodeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Currency_Code", DbType:="NVarChar(50)")>  _
	Public Property Currency_Code() As String
		Get
			Return Me._Currency_Code
		End Get
		Set
			If (String.Equals(Me._Currency_Code, value) = false) Then
				If Me._Currency_CodeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrency_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Currency_Code = value
				Me.SendPropertyChanged("Currency_Code")
				Me.OnCurrency_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Exchange_Rate", DbType:="Decimal(18,2)")>  _
	Public Property Exchange_Rate() As System.Nullable(Of Decimal)
		Get
			Return Me._Exchange_Rate
		End Get
		Set
			If (Me._Exchange_Rate.Equals(value) = false) Then
				Me.OnExchange_RateChanging(value)
				Me.SendPropertyChanging
				Me._Exchange_Rate = value
				Me.SendPropertyChanged("Exchange_Rate")
				Me.OnExchange_RateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="NVarChar(50)")>  _
	Public Property DateUpdated() As String
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (String.Equals(Me._DateUpdated, value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Currency_CodeTable_Exchange_RateTable", Storage:="_Currency_CodeTable", ThisKey:="Currency_Code", OtherKey:="Currency_Code", IsForeignKey:=true)>  _
	Public Property Currency_CodeTable() As Currency_CodeTable
		Get
			Return Me._Currency_CodeTable.Entity
		End Get
		Set
			Dim previousValue As Currency_CodeTable = Me._Currency_CodeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Currency_CodeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Currency_CodeTable.Entity = Nothing
					previousValue.Exchange_RateTables.Remove(Me)
				End If
				Me._Currency_CodeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Exchange_RateTables.Add(Me)
					Me._Currency_Code = value.Currency_Code
				Else
					Me._Currency_Code = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Currency_CodeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Currency_CodeTable")>  _
Partial Public Class Currency_CodeTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Currency_Code As String
	
	Private _Sysmbol As String
	
	Private _Countr_Name As System.Nullable(Of Integer)
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Staffid As String
	
	Private _Exchange_RateTables As EntitySet(Of Exchange_RateTable)
	
	Private _Country As EntityRef(Of Country)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCurrency_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnCurrency_CodeChanged()
    End Sub
    Partial Private Sub OnSysmbolChanging(value As String)
    End Sub
    Partial Private Sub OnSysmbolChanged()
    End Sub
    Partial Private Sub OnCountr_NameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCountr_NameChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Exchange_RateTables = New EntitySet(Of Exchange_RateTable)(AddressOf Me.attach_Exchange_RateTables, AddressOf Me.detach_Exchange_RateTables)
		Me._Country = CType(Nothing, EntityRef(Of Country))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Currency_Code", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Currency_Code() As String
		Get
			Return Me._Currency_Code
		End Get
		Set
			If (String.Equals(Me._Currency_Code, value) = false) Then
				Me.OnCurrency_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Currency_Code = value
				Me.SendPropertyChanged("Currency_Code")
				Me.OnCurrency_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sysmbol", DbType:="NVarChar(50)")>  _
	Public Property Sysmbol() As String
		Get
			Return Me._Sysmbol
		End Get
		Set
			If (String.Equals(Me._Sysmbol, value) = false) Then
				Me.OnSysmbolChanging(value)
				Me.SendPropertyChanging
				Me._Sysmbol = value
				Me.SendPropertyChanged("Sysmbol")
				Me.OnSysmbolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Countr_Name", DbType:="Int")>  _
	Public Property Countr_Name() As System.Nullable(Of Integer)
		Get
			Return Me._Countr_Name
		End Get
		Set
			If (Me._Countr_Name.Equals(value) = false) Then
				If Me._Country.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCountr_NameChanging(value)
				Me.SendPropertyChanging
				Me._Countr_Name = value
				Me.SendPropertyChanged("Countr_Name")
				Me.OnCountr_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Currency_CodeTable_Exchange_RateTable", Storage:="_Exchange_RateTables", ThisKey:="Currency_Code", OtherKey:="Currency_Code")>  _
	Public Property Exchange_RateTables() As EntitySet(Of Exchange_RateTable)
		Get
			Return Me._Exchange_RateTables
		End Get
		Set
			Me._Exchange_RateTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Country_Currency_CodeTable", Storage:="_Country", ThisKey:="Countr_Name", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Country() As Country
		Get
			Return Me._Country.Entity
		End Get
		Set
			Dim previousValue As Country = Me._Country.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Country.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Country.Entity = Nothing
					previousValue.Currency_CodeTables.Remove(Me)
				End If
				Me._Country.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Currency_CodeTables.Add(Me)
					Me._Countr_Name = value.ID
				Else
					Me._Countr_Name = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Country")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Exchange_RateTables(ByVal entity As Exchange_RateTable)
		Me.SendPropertyChanging
		entity.Currency_CodeTable = Me
	End Sub
	
	Private Sub detach_Exchange_RateTables(ByVal entity As Exchange_RateTable)
		Me.SendPropertyChanging
		entity.Currency_CodeTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TitheBankPaymentTable")>  _
Partial Public Class TitheBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Paymentid As System.Nullable(Of Integer)
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _TitheTable As EntityRef(Of TitheTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _BankTable As EntityRef(Of BankTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TitheTable = CType(Nothing, EntityRef(Of TitheTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._BankTable = CType(Nothing, EntityRef(Of BankTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50)")>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._TitheTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int")>  _
	Public Property Paymentid() As System.Nullable(Of Integer)
		Get
			Return Me._Paymentid
		End Get
		Set
			If (Me._Paymentid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				If Me._BankTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TitheTable_TitheBankPaymentTable", Storage:="_TitheTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property TitheTable() As TitheTable
		Get
			Return Me._TitheTable.Entity
		End Get
		Set
			Dim previousValue As TitheTable = Me._TitheTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TitheTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TitheTable.Entity = Nothing
					previousValue.TitheBankPaymentTables.Remove(Me)
				End If
				Me._TitheTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TitheBankPaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("TitheTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_TitheBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.TitheBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TitheBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_TitheBankPaymentTable", Storage:="_BankTable", ThisKey:="Bankid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BankTable() As BankTable
		Get
			Return Me._BankTable.Entity
		End Get
		Set
			Dim previousValue As BankTable = Me._BankTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BankTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BankTable.Entity = Nothing
					previousValue.TitheBankPaymentTables.Remove(Me)
				End If
				Me._BankTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TitheBankPaymentTables.Add(Me)
					Me._Bankid = value.id
				Else
					Me._Bankid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BankTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PledgeTable")>  _
Partial Public Class PledgeTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _incomeid As Integer
	
	Private _Pledgeid As String
	
	Private _MemberName As String
	
	Private _Phone As String
	
	Private _Project As String
	
	Private _Year As String
	
	Private _frequency As String
	
	Private _Amountword As String
	
	Private _Datecreated As String
	
	Private _Staffid As String
	
	Private _Updatedby As String
	
	Private _Churchid As String
	
	Private _PledgeBankPaymentTables As EntitySet(Of PledgeBankPaymentTable)
	
	Private _PledgePaymentTables As EntitySet(Of PledgePaymentTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnPledgeidChanging(value As String)
    End Sub
    Partial Private Sub OnPledgeidChanged()
    End Sub
    Partial Private Sub OnMemberNameChanging(value As String)
    End Sub
    Partial Private Sub OnMemberNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnProjectChanging(value As String)
    End Sub
    Partial Private Sub OnProjectChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As String)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnfrequencyChanging(value As String)
    End Sub
    Partial Private Sub OnfrequencyChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As String)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PledgeBankPaymentTables = New EntitySet(Of PledgeBankPaymentTable)(AddressOf Me.attach_PledgeBankPaymentTables, AddressOf Me.detach_PledgeBankPaymentTables)
		Me._PledgePaymentTables = New EntitySet(Of PledgePaymentTable)(AddressOf Me.attach_PledgePaymentTables, AddressOf Me.detach_PledgePaymentTables)
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pledgeid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Pledgeid() As String
		Get
			Return Me._Pledgeid
		End Get
		Set
			If (String.Equals(Me._Pledgeid, value) = false) Then
				Me.OnPledgeidChanging(value)
				Me.SendPropertyChanging
				Me._Pledgeid = value
				Me.SendPropertyChanged("Pledgeid")
				Me.OnPledgeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberName", DbType:="NVarChar(50)")>  _
	Public Property MemberName() As String
		Get
			Return Me._MemberName
		End Get
		Set
			If (String.Equals(Me._MemberName, value) = false) Then
				Me.OnMemberNameChanging(value)
				Me.SendPropertyChanging
				Me._MemberName = value
				Me.SendPropertyChanged("MemberName")
				Me.OnMemberNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Project", DbType:="NVarChar(MAX)")>  _
	Public Property Project() As String
		Get
			Return Me._Project
		End Get
		Set
			If (String.Equals(Me._Project, value) = false) Then
				Me.OnProjectChanging(value)
				Me.SendPropertyChanging
				Me._Project = value
				Me.SendPropertyChanged("Project")
				Me.OnProjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="NVarChar(50)")>  _
	Public Property Year() As String
		Get
			Return Me._Year
		End Get
		Set
			If (String.Equals(Me._Year, value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_frequency", DbType:="NVarChar(50)")>  _
	Public Property frequency() As String
		Get
			Return Me._frequency
		End Get
		Set
			If (String.Equals(Me._frequency, value) = false) Then
				Me.OnfrequencyChanging(value)
				Me.SendPropertyChanging
				Me._frequency = value
				Me.SendPropertyChanged("frequency")
				Me.OnfrequencyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX)")>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="NVarChar(50)")>  _
	Public Property Datecreated() As String
		Get
			Return Me._Datecreated
		End Get
		Set
			If (String.Equals(Me._Datecreated, value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PledgeTable_PledgeBankPaymentTable", Storage:="_PledgeBankPaymentTables", ThisKey:="Pledgeid", OtherKey:="PledgeId")>  _
	Public Property PledgeBankPaymentTables() As EntitySet(Of PledgeBankPaymentTable)
		Get
			Return Me._PledgeBankPaymentTables
		End Get
		Set
			Me._PledgeBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PledgeTable_PledgePaymentTable", Storage:="_PledgePaymentTables", ThisKey:="Pledgeid", OtherKey:="PledgeId")>  _
	Public Property PledgePaymentTables() As EntitySet(Of PledgePaymentTable)
		Get
			Return Me._PledgePaymentTables
		End Get
		Set
			Me._PledgePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PledgeTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PledgeTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgeTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PledgeBankPaymentTables(ByVal entity As PledgeBankPaymentTable)
		Me.SendPropertyChanging
		entity.PledgeTable = Me
	End Sub
	
	Private Sub detach_PledgeBankPaymentTables(ByVal entity As PledgeBankPaymentTable)
		Me.SendPropertyChanging
		entity.PledgeTable = Nothing
	End Sub
	
	Private Sub attach_PledgePaymentTables(ByVal entity As PledgePaymentTable)
		Me.SendPropertyChanging
		entity.PledgeTable = Me
	End Sub
	
	Private Sub detach_PledgePaymentTables(ByVal entity As PledgePaymentTable)
		Me.SendPropertyChanging
		entity.PledgeTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PledgeBankPaymentTable")>  _
Partial Public Class PledgeBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _PledgeId As String
	
	Private _Paymentid As Integer
	
	Private _BankId As Integer
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _PledgeTable As EntityRef(Of PledgeTable)
	
	Private _BankTable As EntityRef(Of BankTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnPledgeIdChanging(value As String)
    End Sub
    Partial Private Sub OnPledgeIdChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnBankIdChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._PledgeTable = CType(Nothing, EntityRef(Of PledgeTable))
		Me._BankTable = CType(Nothing, EntityRef(Of BankTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PledgeId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PledgeId() As String
		Get
			Return Me._PledgeId
		End Get
		Set
			If (String.Equals(Me._PledgeId, value) = false) Then
				If Me._PledgeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPledgeIdChanging(value)
				Me.SendPropertyChanging
				Me._PledgeId = value
				Me.SendPropertyChanged("PledgeId")
				Me.OnPledgeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int NOT NULL")>  _
	Public Property Paymentid() As Integer
		Get
			Return Me._Paymentid
		End Get
		Set
			If ((Me._Paymentid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankId", DbType:="Int NOT NULL")>  _
	Public Property BankId() As Integer
		Get
			Return Me._BankId
		End Get
		Set
			If ((Me._BankId = value)  _
						= false) Then
				If Me._BankTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankIdChanging(value)
				Me.SendPropertyChanging
				Me._BankId = value
				Me.SendPropertyChanged("BankId")
				Me.OnBankIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PledgeBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.PledgeBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgeBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PledgeTable_PledgeBankPaymentTable", Storage:="_PledgeTable", ThisKey:="PledgeId", OtherKey:="Pledgeid", IsForeignKey:=true)>  _
	Public Property PledgeTable() As PledgeTable
		Get
			Return Me._PledgeTable.Entity
		End Get
		Set
			Dim previousValue As PledgeTable = Me._PledgeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PledgeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PledgeTable.Entity = Nothing
					previousValue.PledgeBankPaymentTables.Remove(Me)
				End If
				Me._PledgeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgeBankPaymentTables.Add(Me)
					Me._PledgeId = value.Pledgeid
				Else
					Me._PledgeId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PledgeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_PledgeBankPaymentTable", Storage:="_BankTable", ThisKey:="BankId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BankTable() As BankTable
		Get
			Return Me._BankTable.Entity
		End Get
		Set
			Dim previousValue As BankTable = Me._BankTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BankTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BankTable.Entity = Nothing
					previousValue.PledgeBankPaymentTables.Remove(Me)
				End If
				Me._BankTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgeBankPaymentTables.Add(Me)
					Me._BankId = value.id
				Else
					Me._BankId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BankTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PledgePaymentTable")>  _
Partial Public Class PledgePaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _PledgeId As String
	
	Private _Incomeid As Integer
	
	Private _PaymentMethodid As Integer
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Datecreated As Date
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _PledgeTable As EntityRef(Of PledgeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnPledgeIdChanging(value As String)
    End Sub
    Partial Private Sub OnPledgeIdChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._PledgeTable = CType(Nothing, EntityRef(Of PledgeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PledgeId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PledgeId() As String
		Get
			Return Me._PledgeId
		End Get
		Set
			If (String.Equals(Me._PledgeId, value) = false) Then
				If Me._PledgeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPledgeIdChanging(value)
				Me.SendPropertyChanging
				Me._PledgeId = value
				Me.SendPropertyChanged("PledgeId")
				Me.OnPledgeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int NOT NULL")>  _
	Public Property PaymentMethodid() As Integer
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If ((Me._PaymentMethodid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PledgePaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.PledgePaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgePaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PledgeTable_PledgePaymentTable", Storage:="_PledgeTable", ThisKey:="PledgeId", OtherKey:="Pledgeid", IsForeignKey:=true)>  _
	Public Property PledgeTable() As PledgeTable
		Get
			Return Me._PledgeTable.Entity
		End Get
		Set
			Dim previousValue As PledgeTable = Me._PledgeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PledgeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PledgeTable.Entity = Nothing
					previousValue.PledgePaymentTables.Remove(Me)
				End If
				Me._PledgeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PledgePaymentTables.Add(Me)
					Me._PledgeId = value.Pledgeid
				Else
					Me._PledgeId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PledgeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomeAccountTable")>  _
Partial Public Class IncomeAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _incomeid As Integer
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _StaffId As String
	
	Private _Dateupdated As String
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="NVarChar(50)")>  _
	Public Property Dateupdated() As String
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (String.Equals(Me._Dateupdated, value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_IncomeAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.IncomeAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomeAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_IncomeAccountTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.IncomeAccountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomeAccountTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomeBankPaymentTable")>  _
Partial Public Class IncomeBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Offeringid As String
	
	Private _Paymentid As System.Nullable(Of Integer)
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _IncomeOffTable As EntityRef(Of IncomeOffTable)
	
	Private _BankTable As EntityRef(Of BankTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnOfferingidChanging(value As String)
    End Sub
    Partial Private Sub OnOfferingidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._IncomeOffTable = CType(Nothing, EntityRef(Of IncomeOffTable))
		Me._BankTable = CType(Nothing, EntityRef(Of BankTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offeringid", DbType:="NVarChar(50)")>  _
	Public Property Offeringid() As String
		Get
			Return Me._Offeringid
		End Get
		Set
			If (String.Equals(Me._Offeringid, value) = false) Then
				If Me._IncomeOffTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOfferingidChanging(value)
				Me.SendPropertyChanging
				Me._Offeringid = value
				Me.SendPropertyChanged("Offeringid")
				Me.OnOfferingidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int")>  _
	Public Property Paymentid() As System.Nullable(Of Integer)
		Get
			Return Me._Paymentid
		End Get
		Set
			If (Me._Paymentid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				If Me._BankTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_IncomeBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.IncomeBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomeBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeOffTable_IncomeBankPaymentTable", Storage:="_IncomeOffTable", ThisKey:="Offeringid", OtherKey:="Offeringid", IsForeignKey:=true)>  _
	Public Property IncomeOffTable() As IncomeOffTable
		Get
			Return Me._IncomeOffTable.Entity
		End Get
		Set
			Dim previousValue As IncomeOffTable = Me._IncomeOffTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeOffTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeOffTable.Entity = Nothing
					previousValue.IncomeBankPaymentTables.Remove(Me)
				End If
				Me._IncomeOffTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomeBankPaymentTables.Add(Me)
					Me._Offeringid = value.Offeringid
				Else
					Me._Offeringid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("IncomeOffTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_IncomeBankPaymentTable", Storage:="_BankTable", ThisKey:="Bankid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BankTable() As BankTable
		Get
			Return Me._BankTable.Entity
		End Get
		Set
			Dim previousValue As BankTable = Me._BankTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BankTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BankTable.Entity = Nothing
					previousValue.IncomeBankPaymentTables.Remove(Me)
				End If
				Me._BankTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomeBankPaymentTables.Add(Me)
					Me._Bankid = value.id
				Else
					Me._Bankid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BankTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Other_incomeAccountTable")>  _
Partial Public Class Other_incomeAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TransactionDate As Date
	
	Private _Other_incomeid As System.Nullable(Of Integer)
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As String
	
	Private _StaffId As String
	
	Private _Dateupdated As String
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTransactionDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransactionDateChanged()
    End Sub
    Partial Private Sub OnOther_incomeidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOther_incomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As String)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDate", DbType:="Date NOT NULL")>  _
	Public Property TransactionDate() As Date
		Get
			Return Me._TransactionDate
		End Get
		Set
			If ((Me._TransactionDate = value)  _
						= false) Then
				Me.OnTransactionDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDate = value
				Me.SendPropertyChanged("TransactionDate")
				Me.OnTransactionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Other_incomeid", DbType:="Int")>  _
	Public Property Other_incomeid() As System.Nullable(Of Integer)
		Get
			Return Me._Other_incomeid
		End Get
		Set
			If (Me._Other_incomeid.Equals(value) = false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOther_incomeidChanging(value)
				Me.SendPropertyChanging
				Me._Other_incomeid = value
				Me.SendPropertyChanged("Other_incomeid")
				Me.OnOther_incomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="NVarChar(50)")>  _
	Public Property Datecreated() As String
		Get
			Return Me._Datecreated
		End Get
		Set
			If (String.Equals(Me._Datecreated, value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="NVarChar(50)")>  _
	Public Property Dateupdated() As String
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (String.Equals(Me._Dateupdated, value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_Other_incomeAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.Other_incomeAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Other_incomeAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_Other_incomeAccountTable", Storage:="_IncomeTable", ThisKey:="Other_incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.Other_incomeAccountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Other_incomeAccountTables.Add(Me)
					Me._Other_incomeid = value.ID
				Else
					Me._Other_incomeid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_Other_incomeAccountTable", Storage:="_MembershipTable", ThisKey:="StaffId", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.Other_incomeAccountTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Other_incomeAccountTables.Add(Me)
					Me._StaffId = value.Memberid
				Else
					Me._StaffId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomeOffTable")>  _
Partial Public Class IncomeOffTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _incomeid As Integer
	
	Private _Offeringid As String
	
	Private _EventDate As System.Nullable(Of Date)
	
	Private _Topic As String
	
	Private _Minister As String
	
	Private _Period As String
	
	Private _Name As String
	
	Private _Amountword As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Updatedate As String
	
	Private _Staffid As String
	
	Private _Churchid As String
	
	Private _IncomeBankPaymentTables As EntitySet(Of IncomeBankPaymentTable)
	
	Private _IncomePaymentTables As EntitySet(Of IncomePaymentTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnOfferingidChanging(value As String)
    End Sub
    Partial Private Sub OnOfferingidChanged()
    End Sub
    Partial Private Sub OnEventDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEventDateChanged()
    End Sub
    Partial Private Sub OnTopicChanging(value As String)
    End Sub
    Partial Private Sub OnTopicChanged()
    End Sub
    Partial Private Sub OnMinisterChanging(value As String)
    End Sub
    Partial Private Sub OnMinisterChanged()
    End Sub
    Partial Private Sub OnPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnPeriodChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnUpdatedateChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedateChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomeBankPaymentTables = New EntitySet(Of IncomeBankPaymentTable)(AddressOf Me.attach_IncomeBankPaymentTables, AddressOf Me.detach_IncomeBankPaymentTables)
		Me._IncomePaymentTables = New EntitySet(Of IncomePaymentTable)(AddressOf Me.attach_IncomePaymentTables, AddressOf Me.detach_IncomePaymentTables)
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offeringid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Offeringid() As String
		Get
			Return Me._Offeringid
		End Get
		Set
			If (String.Equals(Me._Offeringid, value) = false) Then
				Me.OnOfferingidChanging(value)
				Me.SendPropertyChanging
				Me._Offeringid = value
				Me.SendPropertyChanged("Offeringid")
				Me.OnOfferingidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDate", DbType:="Date")>  _
	Public Property EventDate() As System.Nullable(Of Date)
		Get
			Return Me._EventDate
		End Get
		Set
			If (Me._EventDate.Equals(value) = false) Then
				Me.OnEventDateChanging(value)
				Me.SendPropertyChanging
				Me._EventDate = value
				Me.SendPropertyChanged("EventDate")
				Me.OnEventDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Topic", DbType:="NVarChar(MAX)")>  _
	Public Property Topic() As String
		Get
			Return Me._Topic
		End Get
		Set
			If (String.Equals(Me._Topic, value) = false) Then
				Me.OnTopicChanging(value)
				Me.SendPropertyChanging
				Me._Topic = value
				Me.SendPropertyChanged("Topic")
				Me.OnTopicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minister", DbType:="NVarChar(50)")>  _
	Public Property Minister() As String
		Get
			Return Me._Minister
		End Get
		Set
			If (String.Equals(Me._Minister, value) = false) Then
				Me.OnMinisterChanging(value)
				Me.SendPropertyChanging
				Me._Minister = value
				Me.SendPropertyChanged("Minister")
				Me.OnMinisterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Period", DbType:="NVarChar(50)")>  _
	Public Property Period() As String
		Get
			Return Me._Period
		End Get
		Set
			If (String.Equals(Me._Period, value) = false) Then
				Me.OnPeriodChanging(value)
				Me.SendPropertyChanging
				Me._Period = value
				Me.SendPropertyChanged("Period")
				Me.OnPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX)")>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedate", DbType:="NVarChar(50)")>  _
	Public Property Updatedate() As String
		Get
			Return Me._Updatedate
		End Get
		Set
			If (String.Equals(Me._Updatedate, value) = false) Then
				Me.OnUpdatedateChanging(value)
				Me.SendPropertyChanging
				Me._Updatedate = value
				Me.SendPropertyChanged("Updatedate")
				Me.OnUpdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeOffTable_IncomeBankPaymentTable", Storage:="_IncomeBankPaymentTables", ThisKey:="Offeringid", OtherKey:="Offeringid")>  _
	Public Property IncomeBankPaymentTables() As EntitySet(Of IncomeBankPaymentTable)
		Get
			Return Me._IncomeBankPaymentTables
		End Get
		Set
			Me._IncomeBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeOffTable_IncomePaymentTable", Storage:="_IncomePaymentTables", ThisKey:="Offeringid", OtherKey:="Offeringid")>  _
	Public Property IncomePaymentTables() As EntitySet(Of IncomePaymentTable)
		Get
			Return Me._IncomePaymentTables
		End Get
		Set
			Me._IncomePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_IncomeOffTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.IncomeOffTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomeOffTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_IncomeBankPaymentTables(ByVal entity As IncomeBankPaymentTable)
		Me.SendPropertyChanging
		entity.IncomeOffTable = Me
	End Sub
	
	Private Sub detach_IncomeBankPaymentTables(ByVal entity As IncomeBankPaymentTable)
		Me.SendPropertyChanging
		entity.IncomeOffTable = Nothing
	End Sub
	
	Private Sub attach_IncomePaymentTables(ByVal entity As IncomePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeOffTable = Me
	End Sub
	
	Private Sub detach_IncomePaymentTables(ByVal entity As IncomePaymentTable)
		Me.SendPropertyChanging
		entity.IncomeOffTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cash_BookTable")>  _
Partial Public Class Cash_BookTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Transactiondate As System.Nullable(Of Date)
	
	Private _Cash_Bank As String
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Accountdetails1 As String
	
	Private _TransactionType As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Remark As String
	
	Private _Datecreated As String
	
	Private _Staffid As String
	
	Private _Updatedate As String
	
	Private _Updateby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTransactiondateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactiondateChanged()
    End Sub
    Partial Private Sub OnCash_BankChanging(value As String)
    End Sub
    Partial Private Sub OnCash_BankChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnAccountdetails1Changing(value As String)
    End Sub
    Partial Private Sub OnAccountdetails1Changed()
    End Sub
    Partial Private Sub OnTransactionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionTypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As String)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnUpdatedateChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedateChanged()
    End Sub
    Partial Private Sub OnUpdatebyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatebyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transactiondate", DbType:="Date")>  _
	Public Property Transactiondate() As System.Nullable(Of Date)
		Get
			Return Me._Transactiondate
		End Get
		Set
			If (Me._Transactiondate.Equals(value) = false) Then
				Me.OnTransactiondateChanging(value)
				Me.SendPropertyChanging
				Me._Transactiondate = value
				Me.SendPropertyChanged("Transactiondate")
				Me.OnTransactiondateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cash_Bank", DbType:="NVarChar(50)")>  _
	Public Property Cash_Bank() As String
		Get
			Return Me._Cash_Bank
		End Get
		Set
			If (String.Equals(Me._Cash_Bank, value) = false) Then
				Me.OnCash_BankChanging(value)
				Me.SendPropertyChanging
				Me._Cash_Bank = value
				Me.SendPropertyChanged("Cash_Bank")
				Me.OnCash_BankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(50)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails1", DbType:="NVarChar(50)")>  _
	Public Property Accountdetails1() As String
		Get
			Return Me._Accountdetails1
		End Get
		Set
			If (String.Equals(Me._Accountdetails1, value) = false) Then
				Me.OnAccountdetails1Changing(value)
				Me.SendPropertyChanging
				Me._Accountdetails1 = value
				Me.SendPropertyChanged("Accountdetails1")
				Me.OnAccountdetails1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionType", DbType:="NVarChar(50)")>  _
	Public Property TransactionType() As String
		Get
			Return Me._TransactionType
		End Get
		Set
			If (String.Equals(Me._TransactionType, value) = false) Then
				Me.OnTransactionTypeChanging(value)
				Me.SendPropertyChanging
				Me._TransactionType = value
				Me.SendPropertyChanged("TransactionType")
				Me.OnTransactionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(50)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="NVarChar(50)")>  _
	Public Property Datecreated() As String
		Get
			Return Me._Datecreated
		End Get
		Set
			If (String.Equals(Me._Datecreated, value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedate", DbType:="NVarChar(50)")>  _
	Public Property Updatedate() As String
		Get
			Return Me._Updatedate
		End Get
		Set
			If (String.Equals(Me._Updatedate, value) = false) Then
				Me.OnUpdatedateChanging(value)
				Me.SendPropertyChanging
				Me._Updatedate = value
				Me.SendPropertyChanged("Updatedate")
				Me.OnUpdatedateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updateby", DbType:="NVarChar(50)")>  _
	Public Property Updateby() As String
		Get
			Return Me._Updateby
		End Get
		Set
			If (String.Equals(Me._Updateby, value) = false) Then
				Me.OnUpdatebyChanging(value)
				Me.SendPropertyChanging
				Me._Updateby = value
				Me.SendPropertyChanged("Updateby")
				Me.OnUpdatebyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_Cash_BookTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.Cash_BookTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cash_BookTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChurchDetailTable")>  _
Partial Public Class ChurchDetailTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ChurchDetailID As String
	
	Private _ChurchDesgID As String
	
	Private _ChurchName As String
	
	Private _Country As System.Nullable(Of Integer)
	
	Private _Assign As System.Nullable(Of Boolean)
	
	Private _Stateid As String
	
	Private _Locationid As String
	
	Private _Email As String
	
	Private _Address As String
	
	Private _Datecreated As Date
	
	Private _ChurchvaluesTables As EntitySet(Of ChurchvaluesTable)
	
	Private _ChurchHierachies As EntitySet(Of ChurchHierachy)
	
	Private _AddvisitorTables As EntitySet(Of AddvisitorTable)
	
	Private _BaptismTables As EntitySet(Of BaptismTable)
	
	Private _EventTables As EntitySet(Of EventTable)
	
	Private _MinisterTables As EntitySet(Of MinisterTable)
	
	Private _FunctionalGroupTables As EntitySet(Of FunctionalGroupTable)
	
	Private _OrderServiceTables As EntitySet(Of OrderServiceTable)
	
	Private _HierarchyTables As EntitySet(Of HierarchyTable)
	
	Private _HierarcyAccountTables As EntitySet(Of HierarcyAccountTable)
	
	Private _PensionAccountTables As EntitySet(Of PensionAccountTable)
	
	Private _HomecellTables As EntitySet(Of HomecellTable)
	
	Private _DedicationTables As EntitySet(Of DedicationTable)
	
	Private _MembershipTables As EntitySet(Of MembershipTable)
	
	Private _Country1 As EntityRef(Of Country)
	
	Private _StateTable As EntityRef(Of StateTable)
	
	Private _ChurchDesignationTable As EntityRef(Of ChurchDesignationTable)
	
	Private _Location As EntityRef(Of Location)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnChurchDesgIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDesgIDChanged()
    End Sub
    Partial Private Sub OnChurchNameChanging(value As String)
    End Sub
    Partial Private Sub OnChurchNameChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnAssignChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAssignChanged()
    End Sub
    Partial Private Sub OnStateidChanging(value As String)
    End Sub
    Partial Private Sub OnStateidChanged()
    End Sub
    Partial Private Sub OnLocationidChanging(value As String)
    End Sub
    Partial Private Sub OnLocationidChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchvaluesTables = New EntitySet(Of ChurchvaluesTable)(AddressOf Me.attach_ChurchvaluesTables, AddressOf Me.detach_ChurchvaluesTables)
		Me._ChurchHierachies = New EntitySet(Of ChurchHierachy)(AddressOf Me.attach_ChurchHierachies, AddressOf Me.detach_ChurchHierachies)
		Me._AddvisitorTables = New EntitySet(Of AddvisitorTable)(AddressOf Me.attach_AddvisitorTables, AddressOf Me.detach_AddvisitorTables)
		Me._BaptismTables = New EntitySet(Of BaptismTable)(AddressOf Me.attach_BaptismTables, AddressOf Me.detach_BaptismTables)
		Me._EventTables = New EntitySet(Of EventTable)(AddressOf Me.attach_EventTables, AddressOf Me.detach_EventTables)
		Me._MinisterTables = New EntitySet(Of MinisterTable)(AddressOf Me.attach_MinisterTables, AddressOf Me.detach_MinisterTables)
		Me._FunctionalGroupTables = New EntitySet(Of FunctionalGroupTable)(AddressOf Me.attach_FunctionalGroupTables, AddressOf Me.detach_FunctionalGroupTables)
		Me._OrderServiceTables = New EntitySet(Of OrderServiceTable)(AddressOf Me.attach_OrderServiceTables, AddressOf Me.detach_OrderServiceTables)
		Me._HierarchyTables = New EntitySet(Of HierarchyTable)(AddressOf Me.attach_HierarchyTables, AddressOf Me.detach_HierarchyTables)
		Me._HierarcyAccountTables = New EntitySet(Of HierarcyAccountTable)(AddressOf Me.attach_HierarcyAccountTables, AddressOf Me.detach_HierarcyAccountTables)
		Me._PensionAccountTables = New EntitySet(Of PensionAccountTable)(AddressOf Me.attach_PensionAccountTables, AddressOf Me.detach_PensionAccountTables)
		Me._HomecellTables = New EntitySet(Of HomecellTable)(AddressOf Me.attach_HomecellTables, AddressOf Me.detach_HomecellTables)
		Me._DedicationTables = New EntitySet(Of DedicationTable)(AddressOf Me.attach_DedicationTables, AddressOf Me.detach_DedicationTables)
		Me._MembershipTables = New EntitySet(Of MembershipTable)(AddressOf Me.attach_MembershipTables, AddressOf Me.detach_MembershipTables)
		Me._Country1 = CType(Nothing, EntityRef(Of Country))
		Me._StateTable = CType(Nothing, EntityRef(Of StateTable))
		Me._ChurchDesignationTable = CType(Nothing, EntityRef(Of ChurchDesignationTable))
		Me._Location = CType(Nothing, EntityRef(Of Location))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDesgID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDesgID() As String
		Get
			Return Me._ChurchDesgID
		End Get
		Set
			If (String.Equals(Me._ChurchDesgID, value) = false) Then
				If Me._ChurchDesignationTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDesgIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDesgID = value
				Me.SendPropertyChanged("ChurchDesgID")
				Me.OnChurchDesgIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchName", DbType:="NVarChar(MAX)")>  _
	Public Property ChurchName() As String
		Get
			Return Me._ChurchName
		End Get
		Set
			If (String.Equals(Me._ChurchName, value) = false) Then
				Me.OnChurchNameChanging(value)
				Me.SendPropertyChanging
				Me._ChurchName = value
				Me.SendPropertyChanged("ChurchName")
				Me.OnChurchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="Int")>  _
	Public Property Country() As System.Nullable(Of Integer)
		Get
			Return Me._Country
		End Get
		Set
			If (Me._Country.Equals(value) = false) Then
				If Me._Country1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Assign", DbType:="Bit")>  _
	Public Property Assign() As System.Nullable(Of Boolean)
		Get
			Return Me._Assign
		End Get
		Set
			If (Me._Assign.Equals(value) = false) Then
				Me.OnAssignChanging(value)
				Me.SendPropertyChanging
				Me._Assign = value
				Me.SendPropertyChanged("Assign")
				Me.OnAssignChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stateid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Stateid() As String
		Get
			Return Me._Stateid
		End Get
		Set
			If (String.Equals(Me._Stateid, value) = false) Then
				If Me._StateTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStateidChanging(value)
				Me.SendPropertyChanging
				Me._Stateid = value
				Me.SendPropertyChanged("Stateid")
				Me.OnStateidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locationid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Locationid() As String
		Get
			Return Me._Locationid
		End Get
		Set
			If (String.Equals(Me._Locationid, value) = false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationidChanging(value)
				Me.SendPropertyChanging
				Me._Locationid = value
				Me.SendPropertyChanged("Locationid")
				Me.OnLocationidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_ChurchvaluesTable", Storage:="_ChurchvaluesTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID")>  _
	Public Property ChurchvaluesTables() As EntitySet(Of ChurchvaluesTable)
		Get
			Return Me._ChurchvaluesTables
		End Get
		Set
			Me._ChurchvaluesTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_ChurchHierachy", Storage:="_ChurchHierachies", ThisKey:="ChurchDetailID", OtherKey:="ChurchParent")>  _
	Public Property ChurchHierachies() As EntitySet(Of ChurchHierachy)
		Get
			Return Me._ChurchHierachies
		End Get
		Set
			Me._ChurchHierachies.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_AddvisitorTable", Storage:="_AddvisitorTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID")>  _
	Public Property AddvisitorTables() As EntitySet(Of AddvisitorTable)
		Get
			Return Me._AddvisitorTables
		End Get
		Set
			Me._AddvisitorTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_BaptismTable", Storage:="_BaptismTables", ThisKey:="ChurchDetailID", OtherKey:="Churchid")>  _
	Public Property BaptismTables() As EntitySet(Of BaptismTable)
		Get
			Return Me._BaptismTables
		End Get
		Set
			Me._BaptismTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_EventTable", Storage:="_EventTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchID")>  _
	Public Property EventTables() As EntitySet(Of EventTable)
		Get
			Return Me._EventTables
		End Get
		Set
			Me._EventTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_MinisterTable", Storage:="_MinisterTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID")>  _
	Public Property MinisterTables() As EntitySet(Of MinisterTable)
		Get
			Return Me._MinisterTables
		End Get
		Set
			Me._MinisterTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_FunctionalGroupTable", Storage:="_FunctionalGroupTables", ThisKey:="ChurchDetailID", OtherKey:="Churchid")>  _
	Public Property FunctionalGroupTables() As EntitySet(Of FunctionalGroupTable)
		Get
			Return Me._FunctionalGroupTables
		End Get
		Set
			Me._FunctionalGroupTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_OrderServiceTable", Storage:="_OrderServiceTables", ThisKey:="ChurchDetailID", OtherKey:="churchid")>  _
	Public Property OrderServiceTables() As EntitySet(Of OrderServiceTable)
		Get
			Return Me._OrderServiceTables
		End Get
		Set
			Me._OrderServiceTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_HierarchyTable", Storage:="_HierarchyTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID")>  _
	Public Property HierarchyTables() As EntitySet(Of HierarchyTable)
		Get
			Return Me._HierarchyTables
		End Get
		Set
			Me._HierarchyTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_HierarcyAccountTable", Storage:="_HierarcyAccountTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailsID")>  _
	Public Property HierarcyAccountTables() As EntitySet(Of HierarcyAccountTable)
		Get
			Return Me._HierarcyAccountTables
		End Get
		Set
			Me._HierarcyAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_PensionAccountTable", Storage:="_PensionAccountTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailsID")>  _
	Public Property PensionAccountTables() As EntitySet(Of PensionAccountTable)
		Get
			Return Me._PensionAccountTables
		End Get
		Set
			Me._PensionAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_HomecellTable", Storage:="_HomecellTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID")>  _
	Public Property HomecellTables() As EntitySet(Of HomecellTable)
		Get
			Return Me._HomecellTables
		End Get
		Set
			Me._HomecellTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_DedicationTable", Storage:="_DedicationTables", ThisKey:="ChurchDetailID", OtherKey:="Churchid")>  _
	Public Property DedicationTables() As EntitySet(Of DedicationTable)
		Get
			Return Me._DedicationTables
		End Get
		Set
			Me._DedicationTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_MembershipTable", Storage:="_MembershipTables", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID")>  _
	Public Property MembershipTables() As EntitySet(Of MembershipTable)
		Get
			Return Me._MembershipTables
		End Get
		Set
			Me._MembershipTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Country_ChurchDetailTable", Storage:="_Country1", ThisKey:="Country", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Country1() As Country
		Get
			Return Me._Country1.Entity
		End Get
		Set
			Dim previousValue As Country = Me._Country1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Country1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Country1.Entity = Nothing
					previousValue.ChurchDetailTables.Remove(Me)
				End If
				Me._Country1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchDetailTables.Add(Me)
					Me._Country = value.ID
				Else
					Me._Country = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Country1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="StateTable_ChurchDetailTable", Storage:="_StateTable", ThisKey:="Stateid", OtherKey:="Stateid", IsForeignKey:=true)>  _
	Public Property StateTable() As StateTable
		Get
			Return Me._StateTable.Entity
		End Get
		Set
			Dim previousValue As StateTable = Me._StateTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StateTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StateTable.Entity = Nothing
					previousValue.ChurchDetailTables.Remove(Me)
				End If
				Me._StateTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchDetailTables.Add(Me)
					Me._Stateid = value.Stateid
				Else
					Me._Stateid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("StateTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_ChurchDetailTable", Storage:="_ChurchDesignationTable", ThisKey:="ChurchDesgID", OtherKey:="ChurchDesgID", IsForeignKey:=true)>  _
	Public Property ChurchDesignationTable() As ChurchDesignationTable
		Get
			Return Me._ChurchDesignationTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDesignationTable = Me._ChurchDesignationTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDesignationTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDesignationTable.Entity = Nothing
					previousValue.ChurchDetailTables.Remove(Me)
				End If
				Me._ChurchDesignationTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchDetailTables.Add(Me)
					Me._ChurchDesgID = value.ChurchDesgID
				Else
					Me._ChurchDesgID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDesignationTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_ChurchDetailTable", Storage:="_Location", ThisKey:="Locationid", OtherKey:="Locationid", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.ChurchDetailTables.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChurchDetailTables.Add(Me)
					Me._Locationid = value.Locationid
				Else
					Me._Locationid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChurchvaluesTables(ByVal entity As ChurchvaluesTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_ChurchvaluesTables(ByVal entity As ChurchvaluesTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_ChurchHierachies(ByVal entity As ChurchHierachy)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_ChurchHierachies(ByVal entity As ChurchHierachy)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_AddvisitorTables(ByVal entity As AddvisitorTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_AddvisitorTables(ByVal entity As AddvisitorTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_BaptismTables(ByVal entity As BaptismTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_BaptismTables(ByVal entity As BaptismTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_EventTables(ByVal entity As EventTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_EventTables(ByVal entity As EventTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_MinisterTables(ByVal entity As MinisterTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_MinisterTables(ByVal entity As MinisterTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_FunctionalGroupTables(ByVal entity As FunctionalGroupTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_FunctionalGroupTables(ByVal entity As FunctionalGroupTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_OrderServiceTables(ByVal entity As OrderServiceTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_OrderServiceTables(ByVal entity As OrderServiceTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_DedicationTables(ByVal entity As DedicationTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_DedicationTables(ByVal entity As DedicationTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
	
	Private Sub attach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Me
	End Sub
	
	Private Sub detach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.ChurchDetailTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MemberImageTable")>  _
Partial Public Class MemberImageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _MemberID As String
	
	Private _ScanName As String
	
	Private _ScanType As String
	
	Private _SourceDocumentScan As System.Data.Linq.Binary
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMemberIDChanging(value As String)
    End Sub
    Partial Private Sub OnMemberIDChanged()
    End Sub
    Partial Private Sub OnScanNameChanging(value As String)
    End Sub
    Partial Private Sub OnScanNameChanged()
    End Sub
    Partial Private Sub OnScanTypeChanging(value As String)
    End Sub
    Partial Private Sub OnScanTypeChanged()
    End Sub
    Partial Private Sub OnSourceDocumentScanChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSourceDocumentScanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MemberID() As String
		Get
			Return Me._MemberID
		End Get
		Set
			If (String.Equals(Me._MemberID, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberIDChanging(value)
				Me.SendPropertyChanging
				Me._MemberID = value
				Me.SendPropertyChanged("MemberID")
				Me.OnMemberIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanName", DbType:="NVarChar(50)")>  _
	Public Property ScanName() As String
		Get
			Return Me._ScanName
		End Get
		Set
			If (String.Equals(Me._ScanName, value) = false) Then
				Me.OnScanNameChanging(value)
				Me.SendPropertyChanging
				Me._ScanName = value
				Me.SendPropertyChanged("ScanName")
				Me.OnScanNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanType", DbType:="NVarChar(50)")>  _
	Public Property ScanType() As String
		Get
			Return Me._ScanType
		End Get
		Set
			If (String.Equals(Me._ScanType, value) = false) Then
				Me.OnScanTypeChanging(value)
				Me.SendPropertyChanging
				Me._ScanType = value
				Me.SendPropertyChanged("ScanType")
				Me.OnScanTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDocumentScan", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SourceDocumentScan() As System.Data.Linq.Binary
		Get
			Return Me._SourceDocumentScan
		End Get
		Set
			If (Object.Equals(Me._SourceDocumentScan, value) = false) Then
				Me.OnSourceDocumentScanChanging(value)
				Me.SendPropertyChanging
				Me._SourceDocumentScan = value
				Me.SendPropertyChanged("SourceDocumentScan")
				Me.OnSourceDocumentScanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_MemberImageTable", Storage:="_MembershipTable", ThisKey:="MemberID", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.MemberImageTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MemberImageTables.Add(Me)
					Me._MemberID = value.Memberid
				Else
					Me._MemberID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ExpensesdetailsTable")>  _
Partial Public Class ExpensesdetailsTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Expensesid As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _staffid As String
	
	Private _WelfareMainTables As EntitySet(Of WelfareMainTable)
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnExpensesidChanging(value As Integer)
    End Sub
    Partial Private Sub OnExpensesidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnstaffidChanging(value As String)
    End Sub
    Partial Private Sub OnstaffidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._WelfareMainTables = New EntitySet(Of WelfareMainTable)(AddressOf Me.attach_WelfareMainTables, AddressOf Me.detach_WelfareMainTables)
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expensesid", DbType:="Int NOT NULL")>  _
	Public Property Expensesid() As Integer
		Get
			Return Me._Expensesid
		End Get
		Set
			If ((Me._Expensesid = value)  _
						= false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpensesidChanging(value)
				Me.SendPropertyChanging
				Me._Expensesid = value
				Me.SendPropertyChanged("Expensesid")
				Me.OnExpensesidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffid", DbType:="NVarChar(50)")>  _
	Public Property staffid() As String
		Get
			Return Me._staffid
		End Get
		Set
			If (String.Equals(Me._staffid, value) = false) Then
				Me.OnstaffidChanging(value)
				Me.SendPropertyChanging
				Me._staffid = value
				Me.SendPropertyChanged("staffid")
				Me.OnstaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesdetailsTable_WelfareMainTable", Storage:="_WelfareMainTables", ThisKey:="ID", OtherKey:="ExpensesDetails")>  _
	Public Property WelfareMainTables() As EntitySet(Of WelfareMainTable)
		Get
			Return Me._WelfareMainTables
		End Get
		Set
			Me._WelfareMainTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_ExpensesdetailsTable", Storage:="_ExpensesHeadTable", ThisKey:="Expensesid", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.ExpensesdetailsTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExpensesdetailsTables.Add(Me)
					Me._Expensesid = value.Expensesid
				Else
					Me._Expensesid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WelfareMainTables(ByVal entity As WelfareMainTable)
		Me.SendPropertyChanging
		entity.ExpensesdetailsTable = Me
	End Sub
	
	Private Sub detach_WelfareMainTables(ByVal entity As WelfareMainTable)
		Me.SendPropertyChanging
		entity.ExpensesdetailsTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ExpensesHeadTable")>  _
Partial Public Class ExpensesHeadTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Expensesid As Integer
	
	Private _Name As String
	
	Private _ExpensesdetailsTables As EntitySet(Of ExpensesdetailsTable)
	
	Private _WarefarePaymentTables As EntitySet(Of WarefarePaymentTable)
	
	Private _WelfareMainTables As EntitySet(Of WelfareMainTable)
	
	Private _RaiseExpensesHdTables As EntitySet(Of RaiseExpensesHdTable)
	
	Private _RaiseExpenPaymentTables As EntitySet(Of RaiseExpenPaymentTable)
	
	Private _ExpensesAccountTables As EntitySet(Of ExpensesAccountTable)
	
	Private _PaymentVoucherTables As EntitySet(Of PaymentVoucherTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnExpensesidChanging(value As Integer)
    End Sub
    Partial Private Sub OnExpensesidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExpensesdetailsTables = New EntitySet(Of ExpensesdetailsTable)(AddressOf Me.attach_ExpensesdetailsTables, AddressOf Me.detach_ExpensesdetailsTables)
		Me._WarefarePaymentTables = New EntitySet(Of WarefarePaymentTable)(AddressOf Me.attach_WarefarePaymentTables, AddressOf Me.detach_WarefarePaymentTables)
		Me._WelfareMainTables = New EntitySet(Of WelfareMainTable)(AddressOf Me.attach_WelfareMainTables, AddressOf Me.detach_WelfareMainTables)
		Me._RaiseExpensesHdTables = New EntitySet(Of RaiseExpensesHdTable)(AddressOf Me.attach_RaiseExpensesHdTables, AddressOf Me.detach_RaiseExpensesHdTables)
		Me._RaiseExpenPaymentTables = New EntitySet(Of RaiseExpenPaymentTable)(AddressOf Me.attach_RaiseExpenPaymentTables, AddressOf Me.detach_RaiseExpenPaymentTables)
		Me._ExpensesAccountTables = New EntitySet(Of ExpensesAccountTable)(AddressOf Me.attach_ExpensesAccountTables, AddressOf Me.detach_ExpensesAccountTables)
		Me._PaymentVoucherTables = New EntitySet(Of PaymentVoucherTable)(AddressOf Me.attach_PaymentVoucherTables, AddressOf Me.detach_PaymentVoucherTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expensesid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Expensesid() As Integer
		Get
			Return Me._Expensesid
		End Get
		Set
			If ((Me._Expensesid = value)  _
						= false) Then
				Me.OnExpensesidChanging(value)
				Me.SendPropertyChanging
				Me._Expensesid = value
				Me.SendPropertyChanged("Expensesid")
				Me.OnExpensesidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_ExpensesdetailsTable", Storage:="_ExpensesdetailsTables", ThisKey:="Expensesid", OtherKey:="Expensesid")>  _
	Public Property ExpensesdetailsTables() As EntitySet(Of ExpensesdetailsTable)
		Get
			Return Me._ExpensesdetailsTables
		End Get
		Set
			Me._ExpensesdetailsTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_WarefarePaymentTable", Storage:="_WarefarePaymentTables", ThisKey:="Expensesid", OtherKey:="Expensesid")>  _
	Public Property WarefarePaymentTables() As EntitySet(Of WarefarePaymentTable)
		Get
			Return Me._WarefarePaymentTables
		End Get
		Set
			Me._WarefarePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_WelfareMainTable", Storage:="_WelfareMainTables", ThisKey:="Expensesid", OtherKey:="ExpenseHeadid")>  _
	Public Property WelfareMainTables() As EntitySet(Of WelfareMainTable)
		Get
			Return Me._WelfareMainTables
		End Get
		Set
			Me._WelfareMainTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_RaiseExpensesHdTable", Storage:="_RaiseExpensesHdTables", ThisKey:="Expensesid", OtherKey:="ExpenseHead")>  _
	Public Property RaiseExpensesHdTables() As EntitySet(Of RaiseExpensesHdTable)
		Get
			Return Me._RaiseExpensesHdTables
		End Get
		Set
			Me._RaiseExpensesHdTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_RaiseExpenPaymentTable", Storage:="_RaiseExpenPaymentTables", ThisKey:="Expensesid", OtherKey:="Expenseid")>  _
	Public Property RaiseExpenPaymentTables() As EntitySet(Of RaiseExpenPaymentTable)
		Get
			Return Me._RaiseExpenPaymentTables
		End Get
		Set
			Me._RaiseExpenPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_ExpensesAccountTable", Storage:="_ExpensesAccountTables", ThisKey:="Expensesid", OtherKey:="ExpensesHeadid")>  _
	Public Property ExpensesAccountTables() As EntitySet(Of ExpensesAccountTable)
		Get
			Return Me._ExpensesAccountTables
		End Get
		Set
			Me._ExpensesAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_PaymentVoucherTable", Storage:="_PaymentVoucherTables", ThisKey:="Expensesid", OtherKey:="ExpensesHeadiD")>  _
	Public Property PaymentVoucherTables() As EntitySet(Of PaymentVoucherTable)
		Get
			Return Me._PaymentVoucherTables
		End Get
		Set
			Me._PaymentVoucherTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ExpensesdetailsTables(ByVal entity As ExpensesdetailsTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_ExpensesdetailsTables(ByVal entity As ExpensesdetailsTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
	
	Private Sub attach_WarefarePaymentTables(ByVal entity As WarefarePaymentTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_WarefarePaymentTables(ByVal entity As WarefarePaymentTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
	
	Private Sub attach_WelfareMainTables(ByVal entity As WelfareMainTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_WelfareMainTables(ByVal entity As WelfareMainTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
	
	Private Sub attach_RaiseExpensesHdTables(ByVal entity As RaiseExpensesHdTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_RaiseExpensesHdTables(ByVal entity As RaiseExpensesHdTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
	
	Private Sub attach_RaiseExpenPaymentTables(ByVal entity As RaiseExpenPaymentTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_RaiseExpenPaymentTables(ByVal entity As RaiseExpenPaymentTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
	
	Private Sub attach_ExpensesAccountTables(ByVal entity As ExpensesAccountTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_ExpensesAccountTables(ByVal entity As ExpensesAccountTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
	
	Private Sub attach_PaymentVoucherTables(ByVal entity As PaymentVoucherTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Me
	End Sub
	
	Private Sub detach_PaymentVoucherTables(ByVal entity As PaymentVoucherTable)
		Me.SendPropertyChanging
		entity.ExpensesHeadTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WelfareBankPaymentTable")>  _
Partial Public Class WelfareBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _id As String
	
	Private _Paymentid As System.Nullable(Of Integer)
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _WelfareMainTable As EntityRef(Of WelfareMainTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._WelfareMainTable = CType(Nothing, EntityRef(Of WelfareMainTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(50)")>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				If Me._WelfareMainTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int")>  _
	Public Property Paymentid() As System.Nullable(Of Integer)
		Get
			Return Me._Paymentid
		End Get
		Set
			If (Me._Paymentid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_WelfareBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.WelfareBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WelfareBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WelfareMainTable_WelfareBankPaymentTable", Storage:="_WelfareMainTable", ThisKey:="id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property WelfareMainTable() As WelfareMainTable
		Get
			Return Me._WelfareMainTable.Entity
		End Get
		Set
			Dim previousValue As WelfareMainTable = Me._WelfareMainTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WelfareMainTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WelfareMainTable.Entity = Nothing
					previousValue.WelfareBankPaymentTables.Remove(Me)
				End If
				Me._WelfareMainTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WelfareBankPaymentTables.Add(Me)
					Me._id = value.id
				Else
					Me._id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("WelfareMainTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WarefarePaymentTable")>  _
Partial Public Class WarefarePaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _id As String
	
	Private _Expensesid As System.Nullable(Of Integer)
	
	Private _PaymentMethodid As System.Nullable(Of Integer)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _WelfareMainTable As EntityRef(Of WelfareMainTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnExpensesidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpensesidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._WelfareMainTable = CType(Nothing, EntityRef(Of WelfareMainTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(50)")>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				If Me._WelfareMainTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expensesid", DbType:="Int")>  _
	Public Property Expensesid() As System.Nullable(Of Integer)
		Get
			Return Me._Expensesid
		End Get
		Set
			If (Me._Expensesid.Equals(value) = false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpensesidChanging(value)
				Me.SendPropertyChanging
				Me._Expensesid = value
				Me.SendPropertyChanged("Expensesid")
				Me.OnExpensesidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int")>  _
	Public Property PaymentMethodid() As System.Nullable(Of Integer)
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If (Me._PaymentMethodid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_WarefarePaymentTable", Storage:="_ExpensesHeadTable", ThisKey:="Expensesid", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.WarefarePaymentTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WarefarePaymentTables.Add(Me)
					Me._Expensesid = value.Expensesid
				Else
					Me._Expensesid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_WarefarePaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.WarefarePaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WarefarePaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WelfareMainTable_WarefarePaymentTable", Storage:="_WelfareMainTable", ThisKey:="id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property WelfareMainTable() As WelfareMainTable
		Get
			Return Me._WelfareMainTable.Entity
		End Get
		Set
			Dim previousValue As WelfareMainTable = Me._WelfareMainTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WelfareMainTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WelfareMainTable.Entity = Nothing
					previousValue.WarefarePaymentTables.Remove(Me)
				End If
				Me._WelfareMainTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WarefarePaymentTables.Add(Me)
					Me._id = value.id
				Else
					Me._id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("WelfareMainTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WelfareMainTable")>  _
Partial Public Class WelfareMainTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _id As String
	
	Private _ExpensesDetails As System.Nullable(Of Integer)
	
	Private _ExpenseHeadid As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _DateRaised As String
	
	Private _year As String
	
	Private _Amountword As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Staffid As String
	
	Private _Churchid As String
	
	Private _WelfareBankPaymentTables As EntitySet(Of WelfareBankPaymentTable)
	
	Private _WarefarePaymentTables As EntitySet(Of WarefarePaymentTable)
	
	Private _ExpensesdetailsTable As EntityRef(Of ExpensesdetailsTable)
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnExpensesDetailsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpensesDetailsChanged()
    End Sub
    Partial Private Sub OnExpenseHeadidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpenseHeadidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDateRaisedChanging(value As String)
    End Sub
    Partial Private Sub OnDateRaisedChanged()
    End Sub
    Partial Private Sub OnyearChanging(value As String)
    End Sub
    Partial Private Sub OnyearChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._WelfareBankPaymentTables = New EntitySet(Of WelfareBankPaymentTable)(AddressOf Me.attach_WelfareBankPaymentTables, AddressOf Me.detach_WelfareBankPaymentTables)
		Me._WarefarePaymentTables = New EntitySet(Of WarefarePaymentTable)(AddressOf Me.attach_WarefarePaymentTables, AddressOf Me.detach_WarefarePaymentTables)
		Me._ExpensesdetailsTable = CType(Nothing, EntityRef(Of ExpensesdetailsTable))
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpensesDetails", DbType:="Int")>  _
	Public Property ExpensesDetails() As System.Nullable(Of Integer)
		Get
			Return Me._ExpensesDetails
		End Get
		Set
			If (Me._ExpensesDetails.Equals(value) = false) Then
				If Me._ExpensesdetailsTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpensesDetailsChanging(value)
				Me.SendPropertyChanging
				Me._ExpensesDetails = value
				Me.SendPropertyChanged("ExpensesDetails")
				Me.OnExpensesDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpenseHeadid", DbType:="Int")>  _
	Public Property ExpenseHeadid() As System.Nullable(Of Integer)
		Get
			Return Me._ExpenseHeadid
		End Get
		Set
			If (Me._ExpenseHeadid.Equals(value) = false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpenseHeadidChanging(value)
				Me.SendPropertyChanging
				Me._ExpenseHeadid = value
				Me.SendPropertyChanged("ExpenseHeadid")
				Me.OnExpenseHeadidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateRaised", DbType:="NVarChar(50)")>  _
	Public Property DateRaised() As String
		Get
			Return Me._DateRaised
		End Get
		Set
			If (String.Equals(Me._DateRaised, value) = false) Then
				Me.OnDateRaisedChanging(value)
				Me.SendPropertyChanging
				Me._DateRaised = value
				Me.SendPropertyChanged("DateRaised")
				Me.OnDateRaisedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_year", DbType:="NVarChar(50)")>  _
	Public Property year() As String
		Get
			Return Me._year
		End Get
		Set
			If (String.Equals(Me._year, value) = false) Then
				Me.OnyearChanging(value)
				Me.SendPropertyChanging
				Me._year = value
				Me.SendPropertyChanged("year")
				Me.OnyearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX)")>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WelfareMainTable_WelfareBankPaymentTable", Storage:="_WelfareBankPaymentTables", ThisKey:="id", OtherKey:="id")>  _
	Public Property WelfareBankPaymentTables() As EntitySet(Of WelfareBankPaymentTable)
		Get
			Return Me._WelfareBankPaymentTables
		End Get
		Set
			Me._WelfareBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WelfareMainTable_WarefarePaymentTable", Storage:="_WarefarePaymentTables", ThisKey:="id", OtherKey:="id")>  _
	Public Property WarefarePaymentTables() As EntitySet(Of WarefarePaymentTable)
		Get
			Return Me._WarefarePaymentTables
		End Get
		Set
			Me._WarefarePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesdetailsTable_WelfareMainTable", Storage:="_ExpensesdetailsTable", ThisKey:="ExpensesDetails", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ExpensesdetailsTable() As ExpensesdetailsTable
		Get
			Return Me._ExpensesdetailsTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesdetailsTable = Me._ExpensesdetailsTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesdetailsTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesdetailsTable.Entity = Nothing
					previousValue.WelfareMainTables.Remove(Me)
				End If
				Me._ExpensesdetailsTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WelfareMainTables.Add(Me)
					Me._ExpensesDetails = value.ID
				Else
					Me._ExpensesDetails = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ExpensesdetailsTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_WelfareMainTable", Storage:="_ExpensesHeadTable", ThisKey:="ExpenseHeadid", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.WelfareMainTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WelfareMainTables.Add(Me)
					Me._ExpenseHeadid = value.Expensesid
				Else
					Me._ExpenseHeadid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_WelfareBankPaymentTables(ByVal entity As WelfareBankPaymentTable)
		Me.SendPropertyChanging
		entity.WelfareMainTable = Me
	End Sub
	
	Private Sub detach_WelfareBankPaymentTables(ByVal entity As WelfareBankPaymentTable)
		Me.SendPropertyChanging
		entity.WelfareMainTable = Nothing
	End Sub
	
	Private Sub attach_WarefarePaymentTables(ByVal entity As WarefarePaymentTable)
		Me.SendPropertyChanging
		entity.WelfareMainTable = Me
	End Sub
	
	Private Sub detach_WarefarePaymentTables(ByVal entity As WarefarePaymentTable)
		Me.SendPropertyChanging
		entity.WelfareMainTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MarriageTable")>  _
Partial Public Class MarriageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Marriageid As String
	
	Private _Hfirstname As String
	
	Private _Hlastname As String
	
	Private _Hphone As String
	
	Private _Hdob As System.Nullable(Of Date)
	
	Private _Hparents As String
	
	Private _HparentsNo As String
	
	Private _HparentsAd As String
	
	Private _Wfirstname As String
	
	Private _Wlastnamae As String
	
	Private _Wphone As String
	
	Private _Wdob As System.Nullable(Of Date)
	
	Private _Wparents As String
	
	Private _Wparentsno As String
	
	Private _Wparentsad As String
	
	Private _Pastor As String
	
	Private _Witness1 As String
	
	Private _Witness2 As String
	
	Private _Month As String
	
	Private _Sponsor As String
	
	Private _MarriageDate As System.Nullable(Of Date)
	
	Private _ResidentAddress As String
	
	Private _venue As String
	
	Private _Updatedby As String
	
	Private _Churchid As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnMarriageidChanging(value As String)
    End Sub
    Partial Private Sub OnMarriageidChanged()
    End Sub
    Partial Private Sub OnHfirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnHfirstnameChanged()
    End Sub
    Partial Private Sub OnHlastnameChanging(value As String)
    End Sub
    Partial Private Sub OnHlastnameChanged()
    End Sub
    Partial Private Sub OnHphoneChanging(value As String)
    End Sub
    Partial Private Sub OnHphoneChanged()
    End Sub
    Partial Private Sub OnHdobChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHdobChanged()
    End Sub
    Partial Private Sub OnHparentsChanging(value As String)
    End Sub
    Partial Private Sub OnHparentsChanged()
    End Sub
    Partial Private Sub OnHparentsNoChanging(value As String)
    End Sub
    Partial Private Sub OnHparentsNoChanged()
    End Sub
    Partial Private Sub OnHparentsAdChanging(value As String)
    End Sub
    Partial Private Sub OnHparentsAdChanged()
    End Sub
    Partial Private Sub OnWfirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnWfirstnameChanged()
    End Sub
    Partial Private Sub OnWlastnamaeChanging(value As String)
    End Sub
    Partial Private Sub OnWlastnamaeChanged()
    End Sub
    Partial Private Sub OnWphoneChanging(value As String)
    End Sub
    Partial Private Sub OnWphoneChanged()
    End Sub
    Partial Private Sub OnWdobChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnWdobChanged()
    End Sub
    Partial Private Sub OnWparentsChanging(value As String)
    End Sub
    Partial Private Sub OnWparentsChanged()
    End Sub
    Partial Private Sub OnWparentsnoChanging(value As String)
    End Sub
    Partial Private Sub OnWparentsnoChanged()
    End Sub
    Partial Private Sub OnWparentsadChanging(value As String)
    End Sub
    Partial Private Sub OnWparentsadChanged()
    End Sub
    Partial Private Sub OnPastorChanging(value As String)
    End Sub
    Partial Private Sub OnPastorChanged()
    End Sub
    Partial Private Sub OnWitness1Changing(value As String)
    End Sub
    Partial Private Sub OnWitness1Changed()
    End Sub
    Partial Private Sub OnWitness2Changing(value As String)
    End Sub
    Partial Private Sub OnWitness2Changed()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnSponsorChanging(value As String)
    End Sub
    Partial Private Sub OnSponsorChanged()
    End Sub
    Partial Private Sub OnMarriageDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMarriageDateChanged()
    End Sub
    Partial Private Sub OnResidentAddressChanging(value As String)
    End Sub
    Partial Private Sub OnResidentAddressChanged()
    End Sub
    Partial Private Sub OnvenueChanging(value As String)
    End Sub
    Partial Private Sub OnvenueChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Marriageid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Marriageid() As String
		Get
			Return Me._Marriageid
		End Get
		Set
			If (String.Equals(Me._Marriageid, value) = false) Then
				Me.OnMarriageidChanging(value)
				Me.SendPropertyChanging
				Me._Marriageid = value
				Me.SendPropertyChanged("Marriageid")
				Me.OnMarriageidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hfirstname", DbType:="NVarChar(50)")>  _
	Public Property Hfirstname() As String
		Get
			Return Me._Hfirstname
		End Get
		Set
			If (String.Equals(Me._Hfirstname, value) = false) Then
				Me.OnHfirstnameChanging(value)
				Me.SendPropertyChanging
				Me._Hfirstname = value
				Me.SendPropertyChanged("Hfirstname")
				Me.OnHfirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hlastname", DbType:="NVarChar(50)")>  _
	Public Property Hlastname() As String
		Get
			Return Me._Hlastname
		End Get
		Set
			If (String.Equals(Me._Hlastname, value) = false) Then
				Me.OnHlastnameChanging(value)
				Me.SendPropertyChanging
				Me._Hlastname = value
				Me.SendPropertyChanged("Hlastname")
				Me.OnHlastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hphone", DbType:="NVarChar(50)")>  _
	Public Property Hphone() As String
		Get
			Return Me._Hphone
		End Get
		Set
			If (String.Equals(Me._Hphone, value) = false) Then
				Me.OnHphoneChanging(value)
				Me.SendPropertyChanging
				Me._Hphone = value
				Me.SendPropertyChanged("Hphone")
				Me.OnHphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hdob", DbType:="Date")>  _
	Public Property Hdob() As System.Nullable(Of Date)
		Get
			Return Me._Hdob
		End Get
		Set
			If (Me._Hdob.Equals(value) = false) Then
				Me.OnHdobChanging(value)
				Me.SendPropertyChanging
				Me._Hdob = value
				Me.SendPropertyChanged("Hdob")
				Me.OnHdobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hparents", DbType:="NVarChar(MAX)")>  _
	Public Property Hparents() As String
		Get
			Return Me._Hparents
		End Get
		Set
			If (String.Equals(Me._Hparents, value) = false) Then
				Me.OnHparentsChanging(value)
				Me.SendPropertyChanging
				Me._Hparents = value
				Me.SendPropertyChanged("Hparents")
				Me.OnHparentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HparentsNo", DbType:="NVarChar(50)")>  _
	Public Property HparentsNo() As String
		Get
			Return Me._HparentsNo
		End Get
		Set
			If (String.Equals(Me._HparentsNo, value) = false) Then
				Me.OnHparentsNoChanging(value)
				Me.SendPropertyChanging
				Me._HparentsNo = value
				Me.SendPropertyChanged("HparentsNo")
				Me.OnHparentsNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HparentsAd", DbType:="NVarChar(MAX)")>  _
	Public Property HparentsAd() As String
		Get
			Return Me._HparentsAd
		End Get
		Set
			If (String.Equals(Me._HparentsAd, value) = false) Then
				Me.OnHparentsAdChanging(value)
				Me.SendPropertyChanging
				Me._HparentsAd = value
				Me.SendPropertyChanged("HparentsAd")
				Me.OnHparentsAdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wfirstname", DbType:="NVarChar(50)")>  _
	Public Property Wfirstname() As String
		Get
			Return Me._Wfirstname
		End Get
		Set
			If (String.Equals(Me._Wfirstname, value) = false) Then
				Me.OnWfirstnameChanging(value)
				Me.SendPropertyChanging
				Me._Wfirstname = value
				Me.SendPropertyChanged("Wfirstname")
				Me.OnWfirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wlastnamae", DbType:="NVarChar(50)")>  _
	Public Property Wlastnamae() As String
		Get
			Return Me._Wlastnamae
		End Get
		Set
			If (String.Equals(Me._Wlastnamae, value) = false) Then
				Me.OnWlastnamaeChanging(value)
				Me.SendPropertyChanging
				Me._Wlastnamae = value
				Me.SendPropertyChanged("Wlastnamae")
				Me.OnWlastnamaeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wphone", DbType:="NVarChar(50)")>  _
	Public Property Wphone() As String
		Get
			Return Me._Wphone
		End Get
		Set
			If (String.Equals(Me._Wphone, value) = false) Then
				Me.OnWphoneChanging(value)
				Me.SendPropertyChanging
				Me._Wphone = value
				Me.SendPropertyChanged("Wphone")
				Me.OnWphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wdob", DbType:="Date")>  _
	Public Property Wdob() As System.Nullable(Of Date)
		Get
			Return Me._Wdob
		End Get
		Set
			If (Me._Wdob.Equals(value) = false) Then
				Me.OnWdobChanging(value)
				Me.SendPropertyChanging
				Me._Wdob = value
				Me.SendPropertyChanged("Wdob")
				Me.OnWdobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wparents", DbType:="NVarChar(MAX)")>  _
	Public Property Wparents() As String
		Get
			Return Me._Wparents
		End Get
		Set
			If (String.Equals(Me._Wparents, value) = false) Then
				Me.OnWparentsChanging(value)
				Me.SendPropertyChanging
				Me._Wparents = value
				Me.SendPropertyChanged("Wparents")
				Me.OnWparentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wparentsno", DbType:="NVarChar(50)")>  _
	Public Property Wparentsno() As String
		Get
			Return Me._Wparentsno
		End Get
		Set
			If (String.Equals(Me._Wparentsno, value) = false) Then
				Me.OnWparentsnoChanging(value)
				Me.SendPropertyChanging
				Me._Wparentsno = value
				Me.SendPropertyChanged("Wparentsno")
				Me.OnWparentsnoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Wparentsad", DbType:="NVarChar(MAX)")>  _
	Public Property Wparentsad() As String
		Get
			Return Me._Wparentsad
		End Get
		Set
			If (String.Equals(Me._Wparentsad, value) = false) Then
				Me.OnWparentsadChanging(value)
				Me.SendPropertyChanging
				Me._Wparentsad = value
				Me.SendPropertyChanged("Wparentsad")
				Me.OnWparentsadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastor", DbType:="NVarChar(50)")>  _
	Public Property Pastor() As String
		Get
			Return Me._Pastor
		End Get
		Set
			If (String.Equals(Me._Pastor, value) = false) Then
				Me.OnPastorChanging(value)
				Me.SendPropertyChanging
				Me._Pastor = value
				Me.SendPropertyChanged("Pastor")
				Me.OnPastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Witness1", DbType:="NVarChar(MAX)")>  _
	Public Property Witness1() As String
		Get
			Return Me._Witness1
		End Get
		Set
			If (String.Equals(Me._Witness1, value) = false) Then
				Me.OnWitness1Changing(value)
				Me.SendPropertyChanging
				Me._Witness1 = value
				Me.SendPropertyChanged("Witness1")
				Me.OnWitness1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Witness2", DbType:="NVarChar(MAX)")>  _
	Public Property Witness2() As String
		Get
			Return Me._Witness2
		End Get
		Set
			If (String.Equals(Me._Witness2, value) = false) Then
				Me.OnWitness2Changing(value)
				Me.SendPropertyChanging
				Me._Witness2 = value
				Me.SendPropertyChanged("Witness2")
				Me.OnWitness2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sponsor", DbType:="NVarChar(MAX)")>  _
	Public Property Sponsor() As String
		Get
			Return Me._Sponsor
		End Get
		Set
			If (String.Equals(Me._Sponsor, value) = false) Then
				Me.OnSponsorChanging(value)
				Me.SendPropertyChanging
				Me._Sponsor = value
				Me.SendPropertyChanged("Sponsor")
				Me.OnSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarriageDate", DbType:="Date")>  _
	Public Property MarriageDate() As System.Nullable(Of Date)
		Get
			Return Me._MarriageDate
		End Get
		Set
			If (Me._MarriageDate.Equals(value) = false) Then
				Me.OnMarriageDateChanging(value)
				Me.SendPropertyChanging
				Me._MarriageDate = value
				Me.SendPropertyChanged("MarriageDate")
				Me.OnMarriageDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResidentAddress", DbType:="NVarChar(MAX)")>  _
	Public Property ResidentAddress() As String
		Get
			Return Me._ResidentAddress
		End Get
		Set
			If (String.Equals(Me._ResidentAddress, value) = false) Then
				Me.OnResidentAddressChanging(value)
				Me.SendPropertyChanging
				Me._ResidentAddress = value
				Me.SendPropertyChanged("ResidentAddress")
				Me.OnResidentAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_venue", DbType:="NVarChar(MAX)")>  _
	Public Property venue() As String
		Get
			Return Me._venue
		End Get
		Set
			If (String.Equals(Me._venue, value) = false) Then
				Me.OnvenueChanging(value)
				Me.SendPropertyChanging
				Me._venue = value
				Me.SendPropertyChanged("venue")
				Me.OnvenueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(MAX)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DedicationImageTable")>  _
Partial Public Class DedicationImageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _DedicationID As String
	
	Private _ScanName As String
	
	Private _ScanType As String
	
	Private _SourceDocumentScan As System.Data.Linq.Binary
	
	Private _DedicationTable As EntityRef(Of DedicationTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDedicationIDChanging(value As String)
    End Sub
    Partial Private Sub OnDedicationIDChanged()
    End Sub
    Partial Private Sub OnScanNameChanging(value As String)
    End Sub
    Partial Private Sub OnScanNameChanged()
    End Sub
    Partial Private Sub OnScanTypeChanging(value As String)
    End Sub
    Partial Private Sub OnScanTypeChanged()
    End Sub
    Partial Private Sub OnSourceDocumentScanChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSourceDocumentScanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DedicationTable = CType(Nothing, EntityRef(Of DedicationTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DedicationID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DedicationID() As String
		Get
			Return Me._DedicationID
		End Get
		Set
			If (String.Equals(Me._DedicationID, value) = false) Then
				If Me._DedicationTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDedicationIDChanging(value)
				Me.SendPropertyChanging
				Me._DedicationID = value
				Me.SendPropertyChanged("DedicationID")
				Me.OnDedicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanName", DbType:="NVarChar(50)")>  _
	Public Property ScanName() As String
		Get
			Return Me._ScanName
		End Get
		Set
			If (String.Equals(Me._ScanName, value) = false) Then
				Me.OnScanNameChanging(value)
				Me.SendPropertyChanging
				Me._ScanName = value
				Me.SendPropertyChanged("ScanName")
				Me.OnScanNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanType", DbType:="NVarChar(50)")>  _
	Public Property ScanType() As String
		Get
			Return Me._ScanType
		End Get
		Set
			If (String.Equals(Me._ScanType, value) = false) Then
				Me.OnScanTypeChanging(value)
				Me.SendPropertyChanging
				Me._ScanType = value
				Me.SendPropertyChanged("ScanType")
				Me.OnScanTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDocumentScan", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SourceDocumentScan() As System.Data.Linq.Binary
		Get
			Return Me._SourceDocumentScan
		End Get
		Set
			If (Object.Equals(Me._SourceDocumentScan, value) = false) Then
				Me.OnSourceDocumentScanChanging(value)
				Me.SendPropertyChanging
				Me._SourceDocumentScan = value
				Me.SendPropertyChanged("SourceDocumentScan")
				Me.OnSourceDocumentScanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DedicationTable_DedicationImageTable", Storage:="_DedicationTable", ThisKey:="DedicationID", OtherKey:="DedicationId", IsForeignKey:=true)>  _
	Public Property DedicationTable() As DedicationTable
		Get
			Return Me._DedicationTable.Entity
		End Get
		Set
			Dim previousValue As DedicationTable = Me._DedicationTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DedicationTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DedicationTable.Entity = Nothing
					previousValue.DedicationImageTables.Remove(Me)
				End If
				Me._DedicationTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DedicationImageTables.Add(Me)
					Me._DedicationID = value.DedicationId
				Else
					Me._DedicationID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("DedicationTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VisitationTable")>  _
Partial Public Class VisitationTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _Visitorid As String
	
	Private _Name As String
	
	Private _Phone As String
	
	Private _Address As String
	
	Private _Pastor As String
	
	Private _Phone1 As String
	
	Private _Visitedby As String
	
	Private _Others As String
	
	Private _Reason As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Staffid As String
	
	Private _Churchid As String
	
	Private _Updatedby As String
	
	Private _DateUpdated As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnVisitoridChanging(value As String)
    End Sub
    Partial Private Sub OnVisitoridChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPastorChanging(value As String)
    End Sub
    Partial Private Sub OnPastorChanged()
    End Sub
    Partial Private Sub OnPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnPhone1Changed()
    End Sub
    Partial Private Sub OnVisitedbyChanging(value As String)
    End Sub
    Partial Private Sub OnVisitedbyChanged()
    End Sub
    Partial Private Sub OnOthersChanging(value As String)
    End Sub
    Partial Private Sub OnOthersChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visitorid", DbType:="NVarChar(50)")>  _
	Public Property Visitorid() As String
		Get
			Return Me._Visitorid
		End Get
		Set
			If (String.Equals(Me._Visitorid, value) = false) Then
				Me.OnVisitoridChanging(value)
				Me.SendPropertyChanging
				Me._Visitorid = value
				Me.SendPropertyChanged("Visitorid")
				Me.OnVisitoridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastor", DbType:="NVarChar(50)")>  _
	Public Property Pastor() As String
		Get
			Return Me._Pastor
		End Get
		Set
			If (String.Equals(Me._Pastor, value) = false) Then
				Me.OnPastorChanging(value)
				Me.SendPropertyChanging
				Me._Pastor = value
				Me.SendPropertyChanged("Pastor")
				Me.OnPastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(50)")>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me.OnPhone1Changing(value)
				Me.SendPropertyChanging
				Me._Phone1 = value
				Me.SendPropertyChanged("Phone1")
				Me.OnPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Visitedby", DbType:="NVarChar(50)")>  _
	Public Property Visitedby() As String
		Get
			Return Me._Visitedby
		End Get
		Set
			If (String.Equals(Me._Visitedby, value) = false) Then
				Me.OnVisitedbyChanging(value)
				Me.SendPropertyChanging
				Me._Visitedby = value
				Me.SendPropertyChanged("Visitedby")
				Me.OnVisitedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Others", DbType:="NVarChar(MAX)")>  _
	Public Property Others() As String
		Get
			Return Me._Others
		End Get
		Set
			If (String.Equals(Me._Others, value) = false) Then
				Me.OnOthersChanging(value)
				Me.SendPropertyChanging
				Me._Others = value
				Me.SendPropertyChanged("Others")
				Me.OnOthersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NVarChar(MAX)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DateUpdated() As String
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (String.Equals(Me._DateUpdated, value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BaptismTable")>  _
Partial Public Class BaptismTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Baptismid As String
	
	Private _Churchid As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Gender As String
	
	Private _PhoneNo As String
	
	Private _Parents As String
	
	Private _Pastor As String
	
	Private _Phone As String
	
	Private _DOB As System.Nullable(Of Date)
	
	Private _BaptismDate As System.Nullable(Of Date)
	
	Private _ResidentAddress As String
	
	Private _POB As String
	
	Private _DateCreation As System.Nullable(Of Date)
	
	Private _BaptismImageTables As EntitySet(Of BaptismImageTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnBaptismidChanging(value As String)
    End Sub
    Partial Private Sub OnBaptismidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnParentsChanging(value As String)
    End Sub
    Partial Private Sub OnParentsChanged()
    End Sub
    Partial Private Sub OnPastorChanging(value As String)
    End Sub
    Partial Private Sub OnPastorChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnBaptismDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBaptismDateChanged()
    End Sub
    Partial Private Sub OnResidentAddressChanging(value As String)
    End Sub
    Partial Private Sub OnResidentAddressChanged()
    End Sub
    Partial Private Sub OnPOBChanging(value As String)
    End Sub
    Partial Private Sub OnPOBChanged()
    End Sub
    Partial Private Sub OnDateCreationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BaptismImageTables = New EntitySet(Of BaptismImageTable)(AddressOf Me.attach_BaptismImageTables, AddressOf Me.detach_BaptismImageTables)
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Baptismid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Baptismid() As String
		Get
			Return Me._Baptismid
		End Get
		Set
			If (String.Equals(Me._Baptismid, value) = false) Then
				Me.OnBaptismidChanging(value)
				Me.SendPropertyChanging
				Me._Baptismid = value
				Me.SendPropertyChanged("Baptismid")
				Me.OnBaptismidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(MAX)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(MAX)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(50)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parents", DbType:="NVarChar(MAX)")>  _
	Public Property Parents() As String
		Get
			Return Me._Parents
		End Get
		Set
			If (String.Equals(Me._Parents, value) = false) Then
				Me.OnParentsChanging(value)
				Me.SendPropertyChanging
				Me._Parents = value
				Me.SendPropertyChanged("Parents")
				Me.OnParentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastor", DbType:="NVarChar(50)")>  _
	Public Property Pastor() As String
		Get
			Return Me._Pastor
		End Get
		Set
			If (String.Equals(Me._Pastor, value) = false) Then
				Me.OnPastorChanging(value)
				Me.SendPropertyChanging
				Me._Pastor = value
				Me.SendPropertyChanged("Pastor")
				Me.OnPastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="Date")>  _
	Public Property DOB() As System.Nullable(Of Date)
		Get
			Return Me._DOB
		End Get
		Set
			If (Me._DOB.Equals(value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaptismDate", DbType:="Date")>  _
	Public Property BaptismDate() As System.Nullable(Of Date)
		Get
			Return Me._BaptismDate
		End Get
		Set
			If (Me._BaptismDate.Equals(value) = false) Then
				Me.OnBaptismDateChanging(value)
				Me.SendPropertyChanging
				Me._BaptismDate = value
				Me.SendPropertyChanged("BaptismDate")
				Me.OnBaptismDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResidentAddress", DbType:="NVarChar(MAX)")>  _
	Public Property ResidentAddress() As String
		Get
			Return Me._ResidentAddress
		End Get
		Set
			If (String.Equals(Me._ResidentAddress, value) = false) Then
				Me.OnResidentAddressChanging(value)
				Me.SendPropertyChanging
				Me._ResidentAddress = value
				Me.SendPropertyChanged("ResidentAddress")
				Me.OnResidentAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POB", DbType:="NVarChar(MAX)")>  _
	Public Property POB() As String
		Get
			Return Me._POB
		End Get
		Set
			If (String.Equals(Me._POB, value) = false) Then
				Me.OnPOBChanging(value)
				Me.SendPropertyChanging
				Me._POB = value
				Me.SendPropertyChanged("POB")
				Me.OnPOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreation", DbType:="Date")>  _
	Public Property DateCreation() As System.Nullable(Of Date)
		Get
			Return Me._DateCreation
		End Get
		Set
			If (Me._DateCreation.Equals(value) = false) Then
				Me.OnDateCreationChanging(value)
				Me.SendPropertyChanging
				Me._DateCreation = value
				Me.SendPropertyChanged("DateCreation")
				Me.OnDateCreationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BaptismTable_BaptismImageTable", Storage:="_BaptismImageTables", ThisKey:="Baptismid", OtherKey:="BaptismID")>  _
	Public Property BaptismImageTables() As EntitySet(Of BaptismImageTable)
		Get
			Return Me._BaptismImageTables
		End Get
		Set
			Me._BaptismImageTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_BaptismTable", Storage:="_ChurchDetailTable", ThisKey:="Churchid", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.BaptismTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BaptismTables.Add(Me)
					Me._Churchid = value.ChurchDetailID
				Else
					Me._Churchid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BaptismImageTables(ByVal entity As BaptismImageTable)
		Me.SendPropertyChanging
		entity.BaptismTable = Me
	End Sub
	
	Private Sub detach_BaptismImageTables(ByVal entity As BaptismImageTable)
		Me.SendPropertyChanging
		entity.BaptismTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BaptismImageTable")>  _
Partial Public Class BaptismImageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _BaptismID As String
	
	Private _ScanName As String
	
	Private _ScanType As String
	
	Private _SourceDocumentScan As System.Data.Linq.Binary
	
	Private _BaptismTable As EntityRef(Of BaptismTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBaptismIDChanging(value As String)
    End Sub
    Partial Private Sub OnBaptismIDChanged()
    End Sub
    Partial Private Sub OnScanNameChanging(value As String)
    End Sub
    Partial Private Sub OnScanNameChanged()
    End Sub
    Partial Private Sub OnScanTypeChanging(value As String)
    End Sub
    Partial Private Sub OnScanTypeChanged()
    End Sub
    Partial Private Sub OnSourceDocumentScanChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSourceDocumentScanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BaptismTable = CType(Nothing, EntityRef(Of BaptismTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaptismID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property BaptismID() As String
		Get
			Return Me._BaptismID
		End Get
		Set
			If (String.Equals(Me._BaptismID, value) = false) Then
				If Me._BaptismTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBaptismIDChanging(value)
				Me.SendPropertyChanging
				Me._BaptismID = value
				Me.SendPropertyChanged("BaptismID")
				Me.OnBaptismIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanName", DbType:="NVarChar(50)")>  _
	Public Property ScanName() As String
		Get
			Return Me._ScanName
		End Get
		Set
			If (String.Equals(Me._ScanName, value) = false) Then
				Me.OnScanNameChanging(value)
				Me.SendPropertyChanging
				Me._ScanName = value
				Me.SendPropertyChanged("ScanName")
				Me.OnScanNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanType", DbType:="NVarChar(50)")>  _
	Public Property ScanType() As String
		Get
			Return Me._ScanType
		End Get
		Set
			If (String.Equals(Me._ScanType, value) = false) Then
				Me.OnScanTypeChanging(value)
				Me.SendPropertyChanging
				Me._ScanType = value
				Me.SendPropertyChanged("ScanType")
				Me.OnScanTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDocumentScan", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SourceDocumentScan() As System.Data.Linq.Binary
		Get
			Return Me._SourceDocumentScan
		End Get
		Set
			If (Object.Equals(Me._SourceDocumentScan, value) = false) Then
				Me.OnSourceDocumentScanChanging(value)
				Me.SendPropertyChanging
				Me._SourceDocumentScan = value
				Me.SendPropertyChanged("SourceDocumentScan")
				Me.OnSourceDocumentScanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BaptismTable_BaptismImageTable", Storage:="_BaptismTable", ThisKey:="BaptismID", OtherKey:="Baptismid", IsForeignKey:=true)>  _
	Public Property BaptismTable() As BaptismTable
		Get
			Return Me._BaptismTable.Entity
		End Get
		Set
			Dim previousValue As BaptismTable = Me._BaptismTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BaptismTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BaptismTable.Entity = Nothing
					previousValue.BaptismImageTables.Remove(Me)
				End If
				Me._BaptismTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BaptismImageTables.Add(Me)
					Me._BaptismID = value.Baptismid
				Else
					Me._BaptismID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BaptismTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EventTable")>  _
Partial Public Class EventTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _Eventid As String
	
	Private _NewEvent As String
	
	Private _Period As String
	
	Private _Descrip As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _Createdby As String
	
	Private _ChurchID As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnEventidChanging(value As String)
    End Sub
    Partial Private Sub OnEventidChanged()
    End Sub
    Partial Private Sub OnNewEventChanging(value As String)
    End Sub
    Partial Private Sub OnNewEventChanged()
    End Sub
    Partial Private Sub OnPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnPeriodChanged()
    End Sub
    Partial Private Sub OnDescripChanging(value As String)
    End Sub
    Partial Private Sub OnDescripChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnChurchIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchIDChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Eventid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Eventid() As String
		Get
			Return Me._Eventid
		End Get
		Set
			If (String.Equals(Me._Eventid, value) = false) Then
				Me.OnEventidChanging(value)
				Me.SendPropertyChanging
				Me._Eventid = value
				Me.SendPropertyChanged("Eventid")
				Me.OnEventidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewEvent", DbType:="NVarChar(MAX)")>  _
	Public Property NewEvent() As String
		Get
			Return Me._NewEvent
		End Get
		Set
			If (String.Equals(Me._NewEvent, value) = false) Then
				Me.OnNewEventChanging(value)
				Me.SendPropertyChanging
				Me._NewEvent = value
				Me.SendPropertyChanged("NewEvent")
				Me.OnNewEventChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Period", DbType:="NVarChar(50)")>  _
	Public Property Period() As String
		Get
			Return Me._Period
		End Get
		Set
			If (String.Equals(Me._Period, value) = false) Then
				Me.OnPeriodChanging(value)
				Me.SendPropertyChanging
				Me._Period = value
				Me.SendPropertyChanged("Period")
				Me.OnPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrip", DbType:="NVarChar(MAX)")>  _
	Public Property Descrip() As String
		Get
			Return Me._Descrip
		End Get
		Set
			If (String.Equals(Me._Descrip, value) = false) Then
				Me.OnDescripChanging(value)
				Me.SendPropertyChanging
				Me._Descrip = value
				Me.SendPropertyChanged("Descrip")
				Me.OnDescripChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchID", DbType:="NVarChar(50)")>  _
	Public Property ChurchID() As String
		Get
			Return Me._ChurchID
		End Get
		Set
			If (String.Equals(Me._ChurchID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchID = value
				Me.SendPropertyChanged("ChurchID")
				Me.OnChurchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_EventTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.EventTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EventTables.Add(Me)
					Me._ChurchID = value.ChurchDetailID
				Else
					Me._ChurchID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RaiseExpensesHdTable")>  _
Partial Public Class RaiseExpensesHdTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ExpenseHead As Integer
	
	Private _Supplerid As System.Nullable(Of Integer)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Createdby As String
	
	Private _RaiseExpensedDetailTables As EntitySet(Of RaiseExpensedDetailTable)
	
	Private _PaymentVoucherTables As EntitySet(Of PaymentVoucherTable)
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
	Private _SupplierTable As EntityRef(Of SupplierTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnExpenseHeadChanging(value As Integer)
    End Sub
    Partial Private Sub OnExpenseHeadChanged()
    End Sub
    Partial Private Sub OnSuppleridChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSuppleridChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RaiseExpensedDetailTables = New EntitySet(Of RaiseExpensedDetailTable)(AddressOf Me.attach_RaiseExpensedDetailTables, AddressOf Me.detach_RaiseExpensedDetailTables)
		Me._PaymentVoucherTables = New EntitySet(Of PaymentVoucherTable)(AddressOf Me.attach_PaymentVoucherTables, AddressOf Me.detach_PaymentVoucherTables)
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		Me._SupplierTable = CType(Nothing, EntityRef(Of SupplierTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpenseHead", DbType:="Int NOT NULL")>  _
	Public Property ExpenseHead() As Integer
		Get
			Return Me._ExpenseHead
		End Get
		Set
			If ((Me._ExpenseHead = value)  _
						= false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpenseHeadChanging(value)
				Me.SendPropertyChanging
				Me._ExpenseHead = value
				Me.SendPropertyChanged("ExpenseHead")
				Me.OnExpenseHeadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplerid", DbType:="Int")>  _
	Public Property Supplerid() As System.Nullable(Of Integer)
		Get
			Return Me._Supplerid
		End Get
		Set
			If (Me._Supplerid.Equals(value) = false) Then
				If Me._SupplierTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSuppleridChanging(value)
				Me.SendPropertyChanging
				Me._Supplerid = value
				Me.SendPropertyChanged("Supplerid")
				Me.OnSuppleridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RaiseExpensesHdTable_RaiseExpensedDetailTable", Storage:="_RaiseExpensedDetailTables", ThisKey:="ID", OtherKey:="RasieHeadid")>  _
	Public Property RaiseExpensedDetailTables() As EntitySet(Of RaiseExpensedDetailTable)
		Get
			Return Me._RaiseExpensedDetailTables
		End Get
		Set
			Me._RaiseExpensedDetailTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RaiseExpensesHdTable_PaymentVoucherTable", Storage:="_PaymentVoucherTables", ThisKey:="ID", OtherKey:="RaiseExpenseId")>  _
	Public Property PaymentVoucherTables() As EntitySet(Of PaymentVoucherTable)
		Get
			Return Me._PaymentVoucherTables
		End Get
		Set
			Me._PaymentVoucherTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_RaiseExpensesHdTable", Storage:="_ExpensesHeadTable", ThisKey:="ExpenseHead", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.RaiseExpensesHdTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RaiseExpensesHdTables.Add(Me)
					Me._ExpenseHead = value.Expensesid
				Else
					Me._ExpenseHead = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SupplierTable_RaiseExpensesHdTable", Storage:="_SupplierTable", ThisKey:="Supplerid", OtherKey:="Supplerid", IsForeignKey:=true)>  _
	Public Property SupplierTable() As SupplierTable
		Get
			Return Me._SupplierTable.Entity
		End Get
		Set
			Dim previousValue As SupplierTable = Me._SupplierTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SupplierTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SupplierTable.Entity = Nothing
					previousValue.RaiseExpensesHdTables.Remove(Me)
				End If
				Me._SupplierTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RaiseExpensesHdTables.Add(Me)
					Me._Supplerid = value.Supplerid
				Else
					Me._Supplerid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SupplierTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RaiseExpensedDetailTables(ByVal entity As RaiseExpensedDetailTable)
		Me.SendPropertyChanging
		entity.RaiseExpensesHdTable = Me
	End Sub
	
	Private Sub detach_RaiseExpensedDetailTables(ByVal entity As RaiseExpensedDetailTable)
		Me.SendPropertyChanging
		entity.RaiseExpensesHdTable = Nothing
	End Sub
	
	Private Sub attach_PaymentVoucherTables(ByVal entity As PaymentVoucherTable)
		Me.SendPropertyChanging
		entity.RaiseExpensesHdTable = Me
	End Sub
	
	Private Sub detach_PaymentVoucherTables(ByVal entity As PaymentVoucherTable)
		Me.SendPropertyChanging
		entity.RaiseExpensesHdTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RaiseExpensedDetailTable")>  _
Partial Public Class RaiseExpensedDetailTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _RasieHeadid As Integer
	
	Private _ExpensesDetails As String
	
	Private _Description As String
	
	Private _UnitPrice As System.Nullable(Of Decimal)
	
	Private _Quantity As System.Nullable(Of Integer)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _RaiseExpensesHdTable As EntityRef(Of RaiseExpensesHdTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRasieHeadidChanging(value As Integer)
    End Sub
    Partial Private Sub OnRasieHeadidChanged()
    End Sub
    Partial Private Sub OnExpensesDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnExpensesDetailsChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RaiseExpensesHdTable = CType(Nothing, EntityRef(Of RaiseExpensesHdTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RasieHeadid", DbType:="Int NOT NULL")>  _
	Public Property RasieHeadid() As Integer
		Get
			Return Me._RasieHeadid
		End Get
		Set
			If ((Me._RasieHeadid = value)  _
						= false) Then
				If Me._RaiseExpensesHdTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRasieHeadidChanging(value)
				Me.SendPropertyChanging
				Me._RasieHeadid = value
				Me.SendPropertyChanged("RasieHeadid")
				Me.OnRasieHeadidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpensesDetails", DbType:="NVarChar(MAX)")>  _
	Public Property ExpensesDetails() As String
		Get
			Return Me._ExpensesDetails
		End Get
		Set
			If (String.Equals(Me._ExpensesDetails, value) = false) Then
				Me.OnExpensesDetailsChanging(value)
				Me.SendPropertyChanging
				Me._ExpensesDetails = value
				Me.SendPropertyChanged("ExpensesDetails")
				Me.OnExpensesDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Decimal(18,2)")>  _
	Public Property UnitPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitPrice
		End Get
		Set
			If (Me._UnitPrice.Equals(value) = false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Int")>  _
	Public Property Quantity() As System.Nullable(Of Integer)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RaiseExpensesHdTable_RaiseExpensedDetailTable", Storage:="_RaiseExpensesHdTable", ThisKey:="RasieHeadid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property RaiseExpensesHdTable() As RaiseExpensesHdTable
		Get
			Return Me._RaiseExpensesHdTable.Entity
		End Get
		Set
			Dim previousValue As RaiseExpensesHdTable = Me._RaiseExpensesHdTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RaiseExpensesHdTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RaiseExpensesHdTable.Entity = Nothing
					previousValue.RaiseExpensedDetailTables.Remove(Me)
				End If
				Me._RaiseExpensesHdTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RaiseExpensedDetailTables.Add(Me)
					Me._RasieHeadid = value.ID
				Else
					Me._RasieHeadid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RaiseExpensesHdTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RaiseExpenPaymentTable")>  _
Partial Public Class RaiseExpenPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Expenseid As Integer
	
	Private _RaiseexpHdid As Integer
	
	Private _PaymentMethodid As System.Nullable(Of Integer)
	
	Private _AmountW As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnExpenseidChanging(value As Integer)
    End Sub
    Partial Private Sub OnExpenseidChanged()
    End Sub
    Partial Private Sub OnRaiseexpHdidChanging(value As Integer)
    End Sub
    Partial Private Sub OnRaiseexpHdidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountWChanging(value As String)
    End Sub
    Partial Private Sub OnAmountWChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expenseid", DbType:="Int NOT NULL")>  _
	Public Property Expenseid() As Integer
		Get
			Return Me._Expenseid
		End Get
		Set
			If ((Me._Expenseid = value)  _
						= false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpenseidChanging(value)
				Me.SendPropertyChanging
				Me._Expenseid = value
				Me.SendPropertyChanged("Expenseid")
				Me.OnExpenseidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RaiseexpHdid", DbType:="Int NOT NULL")>  _
	Public Property RaiseexpHdid() As Integer
		Get
			Return Me._RaiseexpHdid
		End Get
		Set
			If ((Me._RaiseexpHdid = value)  _
						= false) Then
				Me.OnRaiseexpHdidChanging(value)
				Me.SendPropertyChanging
				Me._RaiseexpHdid = value
				Me.SendPropertyChanged("RaiseexpHdid")
				Me.OnRaiseexpHdidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int")>  _
	Public Property PaymentMethodid() As System.Nullable(Of Integer)
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If (Me._PaymentMethodid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountW", DbType:="NVarChar(MAX)")>  _
	Public Property AmountW() As String
		Get
			Return Me._AmountW
		End Get
		Set
			If (String.Equals(Me._AmountW, value) = false) Then
				Me.OnAmountWChanging(value)
				Me.SendPropertyChanging
				Me._AmountW = value
				Me.SendPropertyChanged("AmountW")
				Me.OnAmountWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_RaiseExpenPaymentTable", Storage:="_ExpensesHeadTable", ThisKey:="Expenseid", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.RaiseExpenPaymentTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RaiseExpenPaymentTables.Add(Me)
					Me._Expenseid = value.Expensesid
				Else
					Me._Expenseid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_RaiseExpenPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.RaiseExpenPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RaiseExpenPaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RaiseBankPaymentTable")>  _
Partial Public Class RaiseBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _RaiseExpenHdid As System.Nullable(Of Integer)
	
	Private _Paymentid As System.Nullable(Of Integer)
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnRaiseExpenHdidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRaiseExpenHdidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RaiseExpenHdid", DbType:="Int")>  _
	Public Property RaiseExpenHdid() As System.Nullable(Of Integer)
		Get
			Return Me._RaiseExpenHdid
		End Get
		Set
			If (Me._RaiseExpenHdid.Equals(value) = false) Then
				Me.OnRaiseExpenHdidChanging(value)
				Me.SendPropertyChanging
				Me._RaiseExpenHdid = value
				Me.SendPropertyChanged("RaiseExpenHdid")
				Me.OnRaiseExpenHdidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int")>  _
	Public Property Paymentid() As System.Nullable(Of Integer)
		Get
			Return Me._Paymentid
		End Get
		Set
			If (Me._Paymentid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_RaiseBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.RaiseBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RaiseBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ExpensesAccountTable")>  _
Partial Public Class ExpensesAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ExpensesHeadid As System.Nullable(Of Integer)
	
	Private _ExpensesName As String
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _Accountdetails As String
	
	Private _AccountName As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Transcationtype As String
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnExpensesHeadidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpensesHeadidChanged()
    End Sub
    Partial Private Sub OnExpensesNameChanging(value As String)
    End Sub
    Partial Private Sub OnExpensesNameChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpensesHeadid", DbType:="Int")>  _
	Public Property ExpensesHeadid() As System.Nullable(Of Integer)
		Get
			Return Me._ExpensesHeadid
		End Get
		Set
			If (Me._ExpensesHeadid.Equals(value) = false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpensesHeadidChanging(value)
				Me.SendPropertyChanging
				Me._ExpensesHeadid = value
				Me.SendPropertyChanged("ExpensesHeadid")
				Me.OnExpensesHeadidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpensesName", DbType:="NVarChar(MAX)")>  _
	Public Property ExpensesName() As String
		Get
			Return Me._ExpensesName
		End Get
		Set
			If (String.Equals(Me._ExpensesName, value) = false) Then
				Me.OnExpensesNameChanging(value)
				Me.SendPropertyChanging
				Me._ExpensesName = value
				Me.SendPropertyChanged("ExpensesName")
				Me.OnExpensesNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_ExpensesAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.ExpensesAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExpensesAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_ExpensesAccountTable", Storage:="_ExpensesHeadTable", ThisKey:="ExpensesHeadid", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.ExpensesAccountTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExpensesAccountTables.Add(Me)
					Me._ExpensesHeadid = value.Expensesid
				Else
					Me._ExpensesHeadid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PaymentVoucherTable")>  _
Partial Public Class PaymentVoucherTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Pvid As Integer
	
	Private _ExpensesHeadiD As System.Nullable(Of Integer)
	
	Private _RaiseExpenseId As System.Nullable(Of Integer)
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Createdby As String
	
	Private _ExpensesHeadTable As EntityRef(Of ExpensesHeadTable)
	
	Private _RaiseExpensesHdTable As EntityRef(Of RaiseExpensesHdTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnPvidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPvidChanged()
    End Sub
    Partial Private Sub OnExpensesHeadiDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExpensesHeadiDChanged()
    End Sub
    Partial Private Sub OnRaiseExpenseIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRaiseExpenseIdChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExpensesHeadTable = CType(Nothing, EntityRef(Of ExpensesHeadTable))
		Me._RaiseExpensesHdTable = CType(Nothing, EntityRef(Of RaiseExpensesHdTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pvid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Pvid() As Integer
		Get
			Return Me._Pvid
		End Get
		Set
			If ((Me._Pvid = value)  _
						= false) Then
				Me.OnPvidChanging(value)
				Me.SendPropertyChanging
				Me._Pvid = value
				Me.SendPropertyChanged("Pvid")
				Me.OnPvidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpensesHeadiD", DbType:="Int")>  _
	Public Property ExpensesHeadiD() As System.Nullable(Of Integer)
		Get
			Return Me._ExpensesHeadiD
		End Get
		Set
			If (Me._ExpensesHeadiD.Equals(value) = false) Then
				If Me._ExpensesHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExpensesHeadiDChanging(value)
				Me.SendPropertyChanging
				Me._ExpensesHeadiD = value
				Me.SendPropertyChanged("ExpensesHeadiD")
				Me.OnExpensesHeadiDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RaiseExpenseId", DbType:="Int")>  _
	Public Property RaiseExpenseId() As System.Nullable(Of Integer)
		Get
			Return Me._RaiseExpenseId
		End Get
		Set
			If (Me._RaiseExpenseId.Equals(value) = false) Then
				If Me._RaiseExpensesHdTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRaiseExpenseIdChanging(value)
				Me.SendPropertyChanging
				Me._RaiseExpenseId = value
				Me.SendPropertyChanged("RaiseExpenseId")
				Me.OnRaiseExpenseIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExpensesHeadTable_PaymentVoucherTable", Storage:="_ExpensesHeadTable", ThisKey:="ExpensesHeadiD", OtherKey:="Expensesid", IsForeignKey:=true)>  _
	Public Property ExpensesHeadTable() As ExpensesHeadTable
		Get
			Return Me._ExpensesHeadTable.Entity
		End Get
		Set
			Dim previousValue As ExpensesHeadTable = Me._ExpensesHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExpensesHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExpensesHeadTable.Entity = Nothing
					previousValue.PaymentVoucherTables.Remove(Me)
				End If
				Me._ExpensesHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PaymentVoucherTables.Add(Me)
					Me._ExpensesHeadiD = value.Expensesid
				Else
					Me._ExpensesHeadiD = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ExpensesHeadTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RaiseExpensesHdTable_PaymentVoucherTable", Storage:="_RaiseExpensesHdTable", ThisKey:="RaiseExpenseId", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property RaiseExpensesHdTable() As RaiseExpensesHdTable
		Get
			Return Me._RaiseExpensesHdTable.Entity
		End Get
		Set
			Dim previousValue As RaiseExpensesHdTable = Me._RaiseExpensesHdTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RaiseExpensesHdTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RaiseExpensesHdTable.Entity = Nothing
					previousValue.PaymentVoucherTables.Remove(Me)
				End If
				Me._RaiseExpensesHdTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PaymentVoucherTables.Add(Me)
					Me._RaiseExpenseId = value.ID
				Else
					Me._RaiseExpenseId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("RaiseExpensesHdTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AccountPayableTable")>  _
Partial Public Class AccountPayableTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Supplierid As System.Nullable(Of Integer)
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _SupplierTable As EntityRef(Of SupplierTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnSupplieridChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupplieridChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._SupplierTable = CType(Nothing, EntityRef(Of SupplierTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplierid", DbType:="Int")>  _
	Public Property Supplierid() As System.Nullable(Of Integer)
		Get
			Return Me._Supplierid
		End Get
		Set
			If (Me._Supplierid.Equals(value) = false) Then
				If Me._SupplierTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSupplieridChanging(value)
				Me.SendPropertyChanging
				Me._Supplierid = value
				Me.SendPropertyChanged("Supplierid")
				Me.OnSupplieridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_AccountPayableTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.AccountPayableTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AccountPayableTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SupplierTable_AccountPayableTable", Storage:="_SupplierTable", ThisKey:="Supplierid", OtherKey:="Supplerid", IsForeignKey:=true)>  _
	Public Property SupplierTable() As SupplierTable
		Get
			Return Me._SupplierTable.Entity
		End Get
		Set
			Dim previousValue As SupplierTable = Me._SupplierTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SupplierTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SupplierTable.Entity = Nothing
					previousValue.AccountPayableTables.Remove(Me)
				End If
				Me._SupplierTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AccountPayableTables.Add(Me)
					Me._Supplierid = value.Supplerid
				Else
					Me._Supplierid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SupplierTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuthenticalTable")>  _
Partial Public Class AuthenticalTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _Memberid As String
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Question1 As String
	
	Private _Answer As String
	
	Private _Question2 As String
	
	Private _Answer2 As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _QuestionTable As EntityRef(Of QuestionTable)
	
	Private _QuestionTable1 As EntityRef(Of QuestionTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnMemberidChanging(value As String)
    End Sub
    Partial Private Sub OnMemberidChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnQuestion1Changing(value As String)
    End Sub
    Partial Private Sub OnQuestion1Changed()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    Partial Private Sub OnQuestion2Changing(value As String)
    End Sub
    Partial Private Sub OnQuestion2Changed()
    End Sub
    Partial Private Sub OnAnswer2Changing(value As String)
    End Sub
    Partial Private Sub OnAnswer2Changed()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuestionTable = CType(Nothing, EntityRef(Of QuestionTable))
		Me._QuestionTable1 = CType(Nothing, EntityRef(Of QuestionTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memberid", DbType:="NVarChar(50)")>  _
	Public Property Memberid() As String
		Get
			Return Me._Memberid
		End Get
		Set
			If (String.Equals(Me._Memberid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberidChanging(value)
				Me.SendPropertyChanging
				Me._Memberid = value
				Me.SendPropertyChanged("Memberid")
				Me.OnMemberidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(50)")>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question1", DbType:="NVarChar(50)")>  _
	Public Property Question1() As String
		Get
			Return Me._Question1
		End Get
		Set
			If (String.Equals(Me._Question1, value) = false) Then
				If Me._QuestionTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQuestion1Changing(value)
				Me.SendPropertyChanging
				Me._Question1 = value
				Me.SendPropertyChanged("Question1")
				Me.OnQuestion1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer", DbType:="NVarChar(MAX)")>  _
	Public Property Answer() As String
		Get
			Return Me._Answer
		End Get
		Set
			If (String.Equals(Me._Answer, value) = false) Then
				Me.OnAnswerChanging(value)
				Me.SendPropertyChanging
				Me._Answer = value
				Me.SendPropertyChanged("Answer")
				Me.OnAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question2", DbType:="NVarChar(50)")>  _
	Public Property Question2() As String
		Get
			Return Me._Question2
		End Get
		Set
			If (String.Equals(Me._Question2, value) = false) Then
				If Me._QuestionTable1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQuestion2Changing(value)
				Me.SendPropertyChanging
				Me._Question2 = value
				Me.SendPropertyChanged("Question2")
				Me.OnQuestion2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Answer2", DbType:="NVarChar(MAX)")>  _
	Public Property Answer2() As String
		Get
			Return Me._Answer2
		End Get
		Set
			If (String.Equals(Me._Answer2, value) = false) Then
				Me.OnAnswer2Changing(value)
				Me.SendPropertyChanging
				Me._Answer2 = value
				Me.SendPropertyChanged("Answer2")
				Me.OnAnswer2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuestionTable_AuthenticalTable", Storage:="_QuestionTable", ThisKey:="Question1", OtherKey:="Question", IsForeignKey:=true)>  _
	Public Property QuestionTable() As QuestionTable
		Get
			Return Me._QuestionTable.Entity
		End Get
		Set
			Dim previousValue As QuestionTable = Me._QuestionTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuestionTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuestionTable.Entity = Nothing
					previousValue.AuthenticalTables.Remove(Me)
				End If
				Me._QuestionTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthenticalTables.Add(Me)
					Me._Question1 = value.Question
				Else
					Me._Question1 = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("QuestionTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuestionTable_AuthenticalTable1", Storage:="_QuestionTable1", ThisKey:="Question2", OtherKey:="Question", IsForeignKey:=true)>  _
	Public Property QuestionTable1() As QuestionTable
		Get
			Return Me._QuestionTable1.Entity
		End Get
		Set
			Dim previousValue As QuestionTable = Me._QuestionTable1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuestionTable1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuestionTable1.Entity = Nothing
					previousValue.AuthenticalTables1.Remove(Me)
				End If
				Me._QuestionTable1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthenticalTables1.Add(Me)
					Me._Question2 = value.Question
				Else
					Me._Question2 = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("QuestionTable1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_AuthenticalTable", Storage:="_MembershipTable", ThisKey:="Memberid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.AuthenticalTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthenticalTables.Add(Me)
					Me._Memberid = value.Memberid
				Else
					Me._Memberid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QuestionTable")>  _
Partial Public Class QuestionTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Question As String
	
	Private _AuthenticalTables As EntitySet(Of AuthenticalTable)
	
	Private _AuthenticalTables1 As EntitySet(Of AuthenticalTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthenticalTables = New EntitySet(Of AuthenticalTable)(AddressOf Me.attach_AuthenticalTables, AddressOf Me.detach_AuthenticalTables)
		Me._AuthenticalTables1 = New EntitySet(Of AuthenticalTable)(AddressOf Me.attach_AuthenticalTables1, AddressOf Me.detach_AuthenticalTables1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Question", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Question() As String
		Get
			Return Me._Question
		End Get
		Set
			If (String.Equals(Me._Question, value) = false) Then
				Me.OnQuestionChanging(value)
				Me.SendPropertyChanging
				Me._Question = value
				Me.SendPropertyChanged("Question")
				Me.OnQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuestionTable_AuthenticalTable", Storage:="_AuthenticalTables", ThisKey:="Question", OtherKey:="Question1")>  _
	Public Property AuthenticalTables() As EntitySet(Of AuthenticalTable)
		Get
			Return Me._AuthenticalTables
		End Get
		Set
			Me._AuthenticalTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QuestionTable_AuthenticalTable1", Storage:="_AuthenticalTables1", ThisKey:="Question", OtherKey:="Question2")>  _
	Public Property AuthenticalTables1() As EntitySet(Of AuthenticalTable)
		Get
			Return Me._AuthenticalTables1
		End Get
		Set
			Me._AuthenticalTables1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AuthenticalTables(ByVal entity As AuthenticalTable)
		Me.SendPropertyChanging
		entity.QuestionTable = Me
	End Sub
	
	Private Sub detach_AuthenticalTables(ByVal entity As AuthenticalTable)
		Me.SendPropertyChanging
		entity.QuestionTable = Nothing
	End Sub
	
	Private Sub attach_AuthenticalTables1(ByVal entity As AuthenticalTable)
		Me.SendPropertyChanging
		entity.QuestionTable1 = Me
	End Sub
	
	Private Sub detach_AuthenticalTables1(ByVal entity As AuthenticalTable)
		Me.SendPropertyChanging
		entity.QuestionTable1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Roles")>  _
Partial Public Class aspnet_Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _RoleName As String
	
	Private _LoweredRoleName As String
	
	Private _Description As String
	
	Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnLoweredRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredRoleNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredRoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredRoleName() As String
		Get
			Return Me._LoweredRoleName
		End Get
		Set
			If (String.Equals(Me._LoweredRoleName, value) = false) Then
				Me.OnLoweredRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredRoleName = value
				Me.SendPropertyChanged("LoweredRoleName")
				Me.OnLoweredRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="RoleId", OtherKey:="RoleId")>  _
	Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
		Get
			Return Me._aspnet_UsersInRoles
		End Get
		Set
			Me._aspnet_UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Roles.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Roles.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Me
	End Sub
	
	Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Applications")>  _
Partial Public Class aspnet_Application
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationName As String
	
	Private _LoweredApplicationName As String
	
	Private _ApplicationId As System.Guid
	
	Private _Description As String
	
	Private _aspnet_Roles As EntitySet(Of aspnet_Role)
	
	Private _aspnet_Users As EntitySet(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Roles = New EntitySet(Of aspnet_Role)(AddressOf Me.attach_aspnet_Roles, AddressOf Me.detach_aspnet_Roles)
		Me._aspnet_Users = New EntitySet(Of aspnet_User)(AddressOf Me.attach_aspnet_Users, AddressOf Me.detach_aspnet_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredApplicationName() As String
		Get
			Return Me._LoweredApplicationName
		End Get
		Set
			If (String.Equals(Me._LoweredApplicationName, value) = false) Then
				Me.OnLoweredApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredApplicationName = value
				Me.SendPropertyChanged("LoweredApplicationName")
				Me.OnLoweredApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Role", Storage:="_aspnet_Roles", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Roles() As EntitySet(Of aspnet_Role)
		Get
			Return Me._aspnet_Roles
		End Get
		Set
			Me._aspnet_Roles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Users", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Users() As EntitySet(Of aspnet_User)
		Get
			Return Me._aspnet_Users
		End Get
		Set
			Me._aspnet_Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_Roles(ByVal entity As aspnet_Role)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Roles(ByVal entity As aspnet_Role)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")>  _
Partial Public Class aspnet_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _UserName As String
	
	Private _LoweredUserName As String
	
	Private _MobileAlias As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _aspnet_UsersInRoles As EntitySet(Of aspnet_UsersInRole)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLoweredUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredUserNameChanged()
    End Sub
    Partial Private Sub OnMobileAliasChanging(value As String)
    End Sub
    Partial Private Sub OnMobileAliasChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_UsersInRoles = New EntitySet(Of aspnet_UsersInRole)(AddressOf Me.attach_aspnet_UsersInRoles, AddressOf Me.detach_aspnet_UsersInRoles)
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredUserName() As String
		Get
			Return Me._LoweredUserName
		End Get
		Set
			If (String.Equals(Me._LoweredUserName, value) = false) Then
				Me.OnLoweredUserNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredUserName = value
				Me.SendPropertyChanged("LoweredUserName")
				Me.OnLoweredUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>  _
	Public Property MobileAlias() As String
		Get
			Return Me._MobileAlias
		End Get
		Set
			If (String.Equals(Me._MobileAlias, value) = false) Then
				Me.OnMobileAliasChanging(value)
				Me.SendPropertyChanging
				Me._MobileAlias = value
				Me.SendPropertyChanged("MobileAlias")
				Me.OnMobileAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_UsersInRoles", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property aspnet_UsersInRoles() As EntitySet(Of aspnet_UsersInRole)
		Get
			Return Me._aspnet_UsersInRoles
		End Get
		Set
			Me._aspnet_UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Users.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Users.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_User = Me
	End Sub
	
	Private Sub detach_aspnet_UsersInRoles(ByVal entity As aspnet_UsersInRole)
		Me.SendPropertyChanging
		entity.aspnet_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_UsersInRoles")>  _
Partial Public Class aspnet_UsersInRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _aspnet_Role As EntityRef(Of aspnet_Role)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Role = CType(Nothing, EntityRef(Of aspnet_Role))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				If Me._aspnet_Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Role_aspnet_UsersInRole", Storage:="_aspnet_Role", ThisKey:="RoleId", OtherKey:="RoleId", IsForeignKey:=true)>  _
	Public Property aspnet_Role() As aspnet_Role
		Get
			Return Me._aspnet_Role.Entity
		End Get
		Set
			Dim previousValue As aspnet_Role = Me._aspnet_Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Role.Entity = Nothing
					previousValue.aspnet_UsersInRoles.Remove(Me)
				End If
				Me._aspnet_Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_UsersInRoles.Add(Me)
					Me._RoleId = value.RoleId
				Else
					Me._RoleId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_UsersInRole", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_UsersInRoles.Remove(Me)
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_UsersInRoles.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VowAccountTable")>  _
Partial Public Class VowAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Vowid As System.Nullable(Of Integer)
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnVowidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVowidChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Vowid", DbType:="Int")>  _
	Public Property Vowid() As System.Nullable(Of Integer)
		Get
			Return Me._Vowid
		End Get
		Set
			If (Me._Vowid.Equals(value) = false) Then
				Me.OnVowidChanging(value)
				Me.SendPropertyChanging
				Me._Vowid = value
				Me.SendPropertyChanged("Vowid")
				Me.OnVowidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_VowAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.VowAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VowAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SeedfaithaaccountTable")>  _
Partial Public Class SeedfaithaaccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Seedfaithid As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnSeedfaithidChanging(value As Integer)
    End Sub
    Partial Private Sub OnSeedfaithidChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seedfaithid", DbType:="Int NOT NULL")>  _
	Public Property Seedfaithid() As Integer
		Get
			Return Me._Seedfaithid
		End Get
		Set
			If ((Me._Seedfaithid = value)  _
						= false) Then
				Me.OnSeedfaithidChanging(value)
				Me.SendPropertyChanging
				Me._Seedfaithid = value
				Me.SendPropertyChanged("Seedfaithid")
				Me.OnSeedfaithidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_SeedfaithaaccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.SeedfaithaaccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SeedfaithaaccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FirstfruitaccTable")>  _
Partial Public Class FirstfruitaccTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Firstfruitid As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _AccountidName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnFirstfruitidChanging(value As Integer)
    End Sub
    Partial Private Sub OnFirstfruitidChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnAccountidNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountidNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Firstfruitid", DbType:="Int NOT NULL")>  _
	Public Property Firstfruitid() As Integer
		Get
			Return Me._Firstfruitid
		End Get
		Set
			If ((Me._Firstfruitid = value)  _
						= false) Then
				Me.OnFirstfruitidChanging(value)
				Me.SendPropertyChanging
				Me._Firstfruitid = value
				Me.SendPropertyChanged("Firstfruitid")
				Me.OnFirstfruitidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountidName", DbType:="NVarChar(50)")>  _
	Public Property AccountidName() As String
		Get
			Return Me._AccountidName
		End Get
		Set
			If (String.Equals(Me._AccountidName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountidNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountidName = value
				Me.SendPropertyChanged("AccountidName")
				Me.OnAccountidNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_FirstfruitaccTable", Storage:="_ChartAccountTable", ThisKey:="AccountidName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.FirstfruitaccTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FirstfruitaccTables.Add(Me)
					Me._AccountidName = value.Accountname
				Else
					Me._AccountidName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MembersGroup")>  _
Partial Public Class MembersGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _GroupName As String
	
	Private _Description As String
	
	Private _EnterBy As String
	
	Private _DateCreated As Date
	
	Private _FunctionalGroupTables As EntitySet(Of FunctionalGroupTable)
	
	Private _ChildrenTables As EntitySet(Of ChildrenTable)
	
	Private _MembershipTables As EntitySet(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEnterByChanging(value As String)
    End Sub
    Partial Private Sub OnEnterByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FunctionalGroupTables = New EntitySet(Of FunctionalGroupTable)(AddressOf Me.attach_FunctionalGroupTables, AddressOf Me.detach_FunctionalGroupTables)
		Me._ChildrenTables = New EntitySet(Of ChildrenTable)(AddressOf Me.attach_ChildrenTables, AddressOf Me.detach_ChildrenTables)
		Me._MembershipTables = New EntitySet(Of MembershipTable)(AddressOf Me.attach_MembershipTables, AddressOf Me.detach_MembershipTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnterBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EnterBy() As String
		Get
			Return Me._EnterBy
		End Get
		Set
			If (String.Equals(Me._EnterBy, value) = false) Then
				Me.OnEnterByChanging(value)
				Me.SendPropertyChanging
				Me._EnterBy = value
				Me.SendPropertyChanged("EnterBy")
				Me.OnEnterByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembersGroup_FunctionalGroupTable", Storage:="_FunctionalGroupTables", ThisKey:="ID", OtherKey:="MemberGroupID")>  _
	Public Property FunctionalGroupTables() As EntitySet(Of FunctionalGroupTable)
		Get
			Return Me._FunctionalGroupTables
		End Get
		Set
			Me._FunctionalGroupTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembersGroup_ChildrenTable", Storage:="_ChildrenTables", ThisKey:="ID", OtherKey:="FunctiongroupID")>  _
	Public Property ChildrenTables() As EntitySet(Of ChildrenTable)
		Get
			Return Me._ChildrenTables
		End Get
		Set
			Me._ChildrenTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembersGroup_MembershipTable", Storage:="_MembershipTables", ThisKey:="ID", OtherKey:="MemberssGroup")>  _
	Public Property MembershipTables() As EntitySet(Of MembershipTable)
		Get
			Return Me._MembershipTables
		End Get
		Set
			Me._MembershipTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FunctionalGroupTables(ByVal entity As FunctionalGroupTable)
		Me.SendPropertyChanging
		entity.MembersGroup = Me
	End Sub
	
	Private Sub detach_FunctionalGroupTables(ByVal entity As FunctionalGroupTable)
		Me.SendPropertyChanging
		entity.MembersGroup = Nothing
	End Sub
	
	Private Sub attach_ChildrenTables(ByVal entity As ChildrenTable)
		Me.SendPropertyChanging
		entity.MembersGroup = Me
	End Sub
	
	Private Sub detach_ChildrenTables(ByVal entity As ChildrenTable)
		Me.SendPropertyChanging
		entity.MembersGroup = Nothing
	End Sub
	
	Private Sub attach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.MembersGroup = Me
	End Sub
	
	Private Sub detach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.MembersGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PendingSavingUnit")>  _
Partial Public Class PendingSavingUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ServiceID As String
	
	Private _CreatedBy As String
	
	Private _UnitTable As EntityRef(Of UnitTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnServiceIDChanging(value As String)
    End Sub
    Partial Private Sub OnServiceIDChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UnitTable = CType(Nothing, EntityRef(Of UnitTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceID", DbType:="NVarChar(50)")>  _
	Public Property ServiceID() As String
		Get
			Return Me._ServiceID
		End Get
		Set
			If (String.Equals(Me._ServiceID, value) = false) Then
				If Me._UnitTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnServiceIDChanging(value)
				Me.SendPropertyChanging
				Me._ServiceID = value
				Me.SendPropertyChanged("ServiceID")
				Me.OnServiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnitTable_PendingSavingUnit", Storage:="_UnitTable", ThisKey:="ServiceID", OtherKey:="ServiceId", IsForeignKey:=true)>  _
	Public Property UnitTable() As UnitTable
		Get
			Return Me._UnitTable.Entity
		End Get
		Set
			Dim previousValue As UnitTable = Me._UnitTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UnitTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UnitTable.Entity = Nothing
					previousValue.PendingSavingUnits.Remove(Me)
				End If
				Me._UnitTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PendingSavingUnits.Add(Me)
					Me._ServiceID = value.ServiceId
				Else
					Me._ServiceID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("UnitTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MembersUnit")>  _
Partial Public Class MembersUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Memberid As String
	
	Private _ServiceUnitID As String
	
	Private _UnitTable As EntityRef(Of UnitTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMemberidChanging(value As String)
    End Sub
    Partial Private Sub OnMemberidChanged()
    End Sub
    Partial Private Sub OnServiceUnitIDChanging(value As String)
    End Sub
    Partial Private Sub OnServiceUnitIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UnitTable = CType(Nothing, EntityRef(Of UnitTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memberid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Memberid() As String
		Get
			Return Me._Memberid
		End Get
		Set
			If (String.Equals(Me._Memberid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberidChanging(value)
				Me.SendPropertyChanging
				Me._Memberid = value
				Me.SendPropertyChanged("Memberid")
				Me.OnMemberidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUnitID", DbType:="NVarChar(50)")>  _
	Public Property ServiceUnitID() As String
		Get
			Return Me._ServiceUnitID
		End Get
		Set
			If (String.Equals(Me._ServiceUnitID, value) = false) Then
				If Me._UnitTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnServiceUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUnitID = value
				Me.SendPropertyChanged("ServiceUnitID")
				Me.OnServiceUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UnitTable_MembersUnit", Storage:="_UnitTable", ThisKey:="ServiceUnitID", OtherKey:="ServiceId", IsForeignKey:=true)>  _
	Public Property UnitTable() As UnitTable
		Get
			Return Me._UnitTable.Entity
		End Get
		Set
			Dim previousValue As UnitTable = Me._UnitTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UnitTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UnitTable.Entity = Nothing
					previousValue.MembersUnits.Remove(Me)
				End If
				Me._UnitTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembersUnits.Add(Me)
					Me._ServiceUnitID = value.ServiceId
				Else
					Me._ServiceUnitID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("UnitTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_MembersUnit", Storage:="_MembershipTable", ThisKey:="Memberid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.MembersUnits.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembersUnits.Add(Me)
					Me._Memberid = value.Memberid
				Else
					Me._Memberid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MemberDeath")>  _
Partial Public Class MemberDeath
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MemeberName As String
	
	Private _PhoneNumer As String
	
	Private _Description As String
	
	Private _CreatedBy As String
	
	Private _DeathDate As Date
	
	Private _DateCreated As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMemeberNameChanging(value As String)
    End Sub
    Partial Private Sub OnMemeberNameChanged()
    End Sub
    Partial Private Sub OnPhoneNumerChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumerChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnDeathDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDeathDateChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemeberName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MemeberName() As String
		Get
			Return Me._MemeberName
		End Get
		Set
			If (String.Equals(Me._MemeberName, value) = false) Then
				Me.OnMemeberNameChanging(value)
				Me.SendPropertyChanging
				Me._MemeberName = value
				Me.SendPropertyChanged("MemeberName")
				Me.OnMemeberNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumer", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumer() As String
		Get
			Return Me._PhoneNumer
		End Get
		Set
			If (String.Equals(Me._PhoneNumer, value) = false) Then
				Me.OnPhoneNumerChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumer = value
				Me.SendPropertyChanged("PhoneNumer")
				Me.OnPhoneNumerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeathDate", DbType:="Date NOT NULL")>  _
	Public Property DeathDate() As Date
		Get
			Return Me._DeathDate
		End Get
		Set
			If ((Me._DeathDate = value)  _
						= false) Then
				Me.OnDeathDateChanging(value)
				Me.SendPropertyChanging
				Me._DeathDate = value
				Me.SendPropertyChanged("DeathDate")
				Me.OnDeathDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChurchDesignationTable")>  _
Partial Public Class ChurchDesignationTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sn As Integer
	
	Private _ChurchDesgID As String
	
	Private _Branch As String
	
	Private _Desicription As String
	
	Private _EnteredBy As String
	
	Private _Datecreated As Date
	
	Private _ChurchvaluesTables As EntitySet(Of ChurchvaluesTable)
	
	Private _ChurchDetailTables As EntitySet(Of ChurchDetailTable)
	
	Private _HierarchyTables As EntitySet(Of HierarchyTable)
	
	Private _HierarcyAccountTables As EntitySet(Of HierarcyAccountTable)
	
	Private _PensionAccountTables As EntitySet(Of PensionAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSnChanging(value As Integer)
    End Sub
    Partial Private Sub OnSnChanged()
    End Sub
    Partial Private Sub OnChurchDesgIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDesgIDChanged()
    End Sub
    Partial Private Sub OnBranchChanging(value As String)
    End Sub
    Partial Private Sub OnBranchChanged()
    End Sub
    Partial Private Sub OnDesicriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDesicriptionChanged()
    End Sub
    Partial Private Sub OnEnteredByChanging(value As String)
    End Sub
    Partial Private Sub OnEnteredByChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchvaluesTables = New EntitySet(Of ChurchvaluesTable)(AddressOf Me.attach_ChurchvaluesTables, AddressOf Me.detach_ChurchvaluesTables)
		Me._ChurchDetailTables = New EntitySet(Of ChurchDetailTable)(AddressOf Me.attach_ChurchDetailTables, AddressOf Me.detach_ChurchDetailTables)
		Me._HierarchyTables = New EntitySet(Of HierarchyTable)(AddressOf Me.attach_HierarchyTables, AddressOf Me.detach_HierarchyTables)
		Me._HierarcyAccountTables = New EntitySet(Of HierarcyAccountTable)(AddressOf Me.attach_HierarcyAccountTables, AddressOf Me.detach_HierarcyAccountTables)
		Me._PensionAccountTables = New EntitySet(Of PensionAccountTable)(AddressOf Me.attach_PensionAccountTables, AddressOf Me.detach_PensionAccountTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sn", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Sn() As Integer
		Get
			Return Me._Sn
		End Get
		Set
			If ((Me._Sn = value)  _
						= false) Then
				Me.OnSnChanging(value)
				Me.SendPropertyChanging
				Me._Sn = value
				Me.SendPropertyChanged("Sn")
				Me.OnSnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDesgID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ChurchDesgID() As String
		Get
			Return Me._ChurchDesgID
		End Get
		Set
			If (String.Equals(Me._ChurchDesgID, value) = false) Then
				Me.OnChurchDesgIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDesgID = value
				Me.SendPropertyChanged("ChurchDesgID")
				Me.OnChurchDesgIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Branch", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Branch() As String
		Get
			Return Me._Branch
		End Get
		Set
			If (String.Equals(Me._Branch, value) = false) Then
				Me.OnBranchChanging(value)
				Me.SendPropertyChanging
				Me._Branch = value
				Me.SendPropertyChanged("Branch")
				Me.OnBranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Desicription", DbType:="NVarChar(MAX)")>  _
	Public Property Desicription() As String
		Get
			Return Me._Desicription
		End Get
		Set
			If (String.Equals(Me._Desicription, value) = false) Then
				Me.OnDesicriptionChanging(value)
				Me.SendPropertyChanging
				Me._Desicription = value
				Me.SendPropertyChanged("Desicription")
				Me.OnDesicriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnteredBy", DbType:="NVarChar(50)")>  _
	Public Property EnteredBy() As String
		Get
			Return Me._EnteredBy
		End Get
		Set
			If (String.Equals(Me._EnteredBy, value) = false) Then
				Me.OnEnteredByChanging(value)
				Me.SendPropertyChanging
				Me._EnteredBy = value
				Me.SendPropertyChanged("EnteredBy")
				Me.OnEnteredByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_ChurchvaluesTable", Storage:="_ChurchvaluesTables", ThisKey:="ChurchDesgID", OtherKey:="ChurchDesgID")>  _
	Public Property ChurchvaluesTables() As EntitySet(Of ChurchvaluesTable)
		Get
			Return Me._ChurchvaluesTables
		End Get
		Set
			Me._ChurchvaluesTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_ChurchDetailTable", Storage:="_ChurchDetailTables", ThisKey:="ChurchDesgID", OtherKey:="ChurchDesgID")>  _
	Public Property ChurchDetailTables() As EntitySet(Of ChurchDetailTable)
		Get
			Return Me._ChurchDetailTables
		End Get
		Set
			Me._ChurchDetailTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_HierarchyTable", Storage:="_HierarchyTables", ThisKey:="ChurchDesgID", OtherKey:="HierachyID")>  _
	Public Property HierarchyTables() As EntitySet(Of HierarchyTable)
		Get
			Return Me._HierarchyTables
		End Get
		Set
			Me._HierarchyTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_HierarcyAccountTable", Storage:="_HierarcyAccountTables", ThisKey:="ChurchDesgID", OtherKey:="HirerchyID")>  _
	Public Property HierarcyAccountTables() As EntitySet(Of HierarcyAccountTable)
		Get
			Return Me._HierarcyAccountTables
		End Get
		Set
			Me._HierarcyAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_PensionAccountTable", Storage:="_PensionAccountTables", ThisKey:="ChurchDesgID", OtherKey:="HirerchyID")>  _
	Public Property PensionAccountTables() As EntitySet(Of PensionAccountTable)
		Get
			Return Me._PensionAccountTables
		End Get
		Set
			Me._PensionAccountTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChurchvaluesTables(ByVal entity As ChurchvaluesTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Me
	End Sub
	
	Private Sub detach_ChurchvaluesTables(ByVal entity As ChurchvaluesTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Nothing
	End Sub
	
	Private Sub attach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Me
	End Sub
	
	Private Sub detach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Nothing
	End Sub
	
	Private Sub attach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Me
	End Sub
	
	Private Sub detach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Me
	End Sub
	
	Private Sub detach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Nothing
	End Sub
	
	Private Sub attach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Me
	End Sub
	
	Private Sub detach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.ChurchDesignationTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BankTable")>  _
Partial Public Class BankTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Bankname As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Createdby As String
	
	Private _Updatedby As String
	
	Private _Updateddate As System.Nullable(Of Date)
	
	Private _Churchid As String
	
	Private _TitheBankPaymentTables As EntitySet(Of TitheBankPaymentTable)
	
	Private _PledgeBankPaymentTables As EntitySet(Of PledgeBankPaymentTable)
	
	Private _IncomeBankPaymentTables As EntitySet(Of IncomeBankPaymentTable)
	
	Private _pastorsTitheBankPaymentTables As EntitySet(Of pastorsTitheBankPaymentTable)
	
	Private _HierarcyBankPaymentTables As EntitySet(Of HierarcyBankPaymentTable)
	
	Private _PensionBankPaymentTables As EntitySet(Of PensionBankPaymentTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnBanknameChanging(value As String)
    End Sub
    Partial Private Sub OnBanknameChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnUpdateddateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdateddateChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TitheBankPaymentTables = New EntitySet(Of TitheBankPaymentTable)(AddressOf Me.attach_TitheBankPaymentTables, AddressOf Me.detach_TitheBankPaymentTables)
		Me._PledgeBankPaymentTables = New EntitySet(Of PledgeBankPaymentTable)(AddressOf Me.attach_PledgeBankPaymentTables, AddressOf Me.detach_PledgeBankPaymentTables)
		Me._IncomeBankPaymentTables = New EntitySet(Of IncomeBankPaymentTable)(AddressOf Me.attach_IncomeBankPaymentTables, AddressOf Me.detach_IncomeBankPaymentTables)
		Me._pastorsTitheBankPaymentTables = New EntitySet(Of pastorsTitheBankPaymentTable)(AddressOf Me.attach_pastorsTitheBankPaymentTables, AddressOf Me.detach_pastorsTitheBankPaymentTables)
		Me._HierarcyBankPaymentTables = New EntitySet(Of HierarcyBankPaymentTable)(AddressOf Me.attach_HierarcyBankPaymentTables, AddressOf Me.detach_HierarcyBankPaymentTables)
		Me._PensionBankPaymentTables = New EntitySet(Of PensionBankPaymentTable)(AddressOf Me.attach_PensionBankPaymentTables, AddressOf Me.detach_PensionBankPaymentTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankname", DbType:="NVarChar(MAX)")>  _
	Public Property Bankname() As String
		Get
			Return Me._Bankname
		End Get
		Set
			If (String.Equals(Me._Bankname, value) = false) Then
				Me.OnBanknameChanging(value)
				Me.SendPropertyChanging
				Me._Bankname = value
				Me.SendPropertyChanged("Bankname")
				Me.OnBanknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updateddate", DbType:="Date")>  _
	Public Property Updateddate() As System.Nullable(Of Date)
		Get
			Return Me._Updateddate
		End Get
		Set
			If (Me._Updateddate.Equals(value) = false) Then
				Me.OnUpdateddateChanging(value)
				Me.SendPropertyChanging
				Me._Updateddate = value
				Me.SendPropertyChanged("Updateddate")
				Me.OnUpdateddateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_TitheBankPaymentTable", Storage:="_TitheBankPaymentTables", ThisKey:="id", OtherKey:="Bankid")>  _
	Public Property TitheBankPaymentTables() As EntitySet(Of TitheBankPaymentTable)
		Get
			Return Me._TitheBankPaymentTables
		End Get
		Set
			Me._TitheBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_PledgeBankPaymentTable", Storage:="_PledgeBankPaymentTables", ThisKey:="id", OtherKey:="BankId")>  _
	Public Property PledgeBankPaymentTables() As EntitySet(Of PledgeBankPaymentTable)
		Get
			Return Me._PledgeBankPaymentTables
		End Get
		Set
			Me._PledgeBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_IncomeBankPaymentTable", Storage:="_IncomeBankPaymentTables", ThisKey:="id", OtherKey:="Bankid")>  _
	Public Property IncomeBankPaymentTables() As EntitySet(Of IncomeBankPaymentTable)
		Get
			Return Me._IncomeBankPaymentTables
		End Get
		Set
			Me._IncomeBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_pastorsTitheBankPaymentTable", Storage:="_pastorsTitheBankPaymentTables", ThisKey:="id", OtherKey:="Bankid")>  _
	Public Property pastorsTitheBankPaymentTables() As EntitySet(Of pastorsTitheBankPaymentTable)
		Get
			Return Me._pastorsTitheBankPaymentTables
		End Get
		Set
			Me._pastorsTitheBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_HierarcyBankPaymentTable", Storage:="_HierarcyBankPaymentTables", ThisKey:="id", OtherKey:="Bankid")>  _
	Public Property HierarcyBankPaymentTables() As EntitySet(Of HierarcyBankPaymentTable)
		Get
			Return Me._HierarcyBankPaymentTables
		End Get
		Set
			Me._HierarcyBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_PensionBankPaymentTable", Storage:="_PensionBankPaymentTables", ThisKey:="id", OtherKey:="Bankid")>  _
	Public Property PensionBankPaymentTables() As EntitySet(Of PensionBankPaymentTable)
		Get
			Return Me._PensionBankPaymentTables
		End Get
		Set
			Me._PensionBankPaymentTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TitheBankPaymentTables(ByVal entity As TitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Me
	End Sub
	
	Private Sub detach_TitheBankPaymentTables(ByVal entity As TitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Nothing
	End Sub
	
	Private Sub attach_PledgeBankPaymentTables(ByVal entity As PledgeBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Me
	End Sub
	
	Private Sub detach_PledgeBankPaymentTables(ByVal entity As PledgeBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Nothing
	End Sub
	
	Private Sub attach_IncomeBankPaymentTables(ByVal entity As IncomeBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Me
	End Sub
	
	Private Sub detach_IncomeBankPaymentTables(ByVal entity As IncomeBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Nothing
	End Sub
	
	Private Sub attach_pastorsTitheBankPaymentTables(ByVal entity As pastorsTitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Me
	End Sub
	
	Private Sub detach_pastorsTitheBankPaymentTables(ByVal entity As pastorsTitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyBankPaymentTables(ByVal entity As HierarcyBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Me
	End Sub
	
	Private Sub detach_HierarcyBankPaymentTables(ByVal entity As HierarcyBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Nothing
	End Sub
	
	Private Sub attach_PensionBankPaymentTables(ByVal entity As PensionBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Me
	End Sub
	
	Private Sub detach_PensionBankPaymentTables(ByVal entity As PensionBankPaymentTable)
		Me.SendPropertyChanging
		entity.BankTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MinisterTable")>  _
Partial Public Class MinisterTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _PastorsTypes As String
	
	Private _Ministerid As String
	
	Private _ChurchDesigID As String
	
	Private _ChurchDetailID As String
	
	Private _Title As String
	
	Private _Name As String
	
	Private _PhoneNo As String
	
	Private _Post As String
	
	Private _Services As String
	
	Private _CreatedBy As String
	
	Private _DateCreated As Date
	
	Private _PastorsAccountTables As EntitySet(Of PastorsAccountTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _DutyTable As EntityRef(Of DutyTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnPastorsTypesChanging(value As String)
    End Sub
    Partial Private Sub OnPastorsTypesChanged()
    End Sub
    Partial Private Sub OnMinisteridChanging(value As String)
    End Sub
    Partial Private Sub OnMinisteridChanged()
    End Sub
    Partial Private Sub OnChurchDesigIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDesigIDChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnPostChanging(value As String)
    End Sub
    Partial Private Sub OnPostChanged()
    End Sub
    Partial Private Sub OnServicesChanging(value As String)
    End Sub
    Partial Private Sub OnServicesChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PastorsAccountTables = New EntitySet(Of PastorsAccountTable)(AddressOf Me.attach_PastorsAccountTables, AddressOf Me.detach_PastorsAccountTables)
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._DutyTable = CType(Nothing, EntityRef(Of DutyTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PastorsTypes", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PastorsTypes() As String
		Get
			Return Me._PastorsTypes
		End Get
		Set
			If (String.Equals(Me._PastorsTypes, value) = false) Then
				Me.OnPastorsTypesChanging(value)
				Me.SendPropertyChanging
				Me._PastorsTypes = value
				Me.SendPropertyChanged("PastorsTypes")
				Me.OnPastorsTypesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ministerid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Ministerid() As String
		Get
			Return Me._Ministerid
		End Get
		Set
			If (String.Equals(Me._Ministerid, value) = false) Then
				Me.OnMinisteridChanging(value)
				Me.SendPropertyChanging
				Me._Ministerid = value
				Me.SendPropertyChanged("Ministerid")
				Me.OnMinisteridChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDesigID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDesigID() As String
		Get
			Return Me._ChurchDesigID
		End Get
		Set
			If (String.Equals(Me._ChurchDesigID, value) = false) Then
				Me.OnChurchDesigIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDesigID = value
				Me.SendPropertyChanged("ChurchDesigID")
				Me.OnChurchDesigIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NVarChar(50)")>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Post", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Post() As String
		Get
			Return Me._Post
		End Get
		Set
			If (String.Equals(Me._Post, value) = false) Then
				If Me._DutyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPostChanging(value)
				Me.SendPropertyChanging
				Me._Post = value
				Me.SendPropertyChanged("Post")
				Me.OnPostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Services", DbType:="NVarChar(50)")>  _
	Public Property Services() As String
		Get
			Return Me._Services
		End Get
		Set
			If (String.Equals(Me._Services, value) = false) Then
				Me.OnServicesChanging(value)
				Me.SendPropertyChanging
				Me._Services = value
				Me.SendPropertyChanged("Services")
				Me.OnServicesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MinisterTable_PastorsAccountTable", Storage:="_PastorsAccountTables", ThisKey:="Ministerid", OtherKey:="MinsterID")>  _
	Public Property PastorsAccountTables() As EntitySet(Of PastorsAccountTable)
		Get
			Return Me._PastorsAccountTables
		End Get
		Set
			Me._PastorsAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_MinisterTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.MinisterTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MinisterTables.Add(Me)
					Me._ChurchDetailID = value.ChurchDetailID
				Else
					Me._ChurchDetailID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DutyTable_MinisterTable", Storage:="_DutyTable", ThisKey:="Post", OtherKey:="Dutyid", IsForeignKey:=true)>  _
	Public Property DutyTable() As DutyTable
		Get
			Return Me._DutyTable.Entity
		End Get
		Set
			Dim previousValue As DutyTable = Me._DutyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DutyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DutyTable.Entity = Nothing
					previousValue.MinisterTables.Remove(Me)
				End If
				Me._DutyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MinisterTables.Add(Me)
					Me._Post = value.Dutyid
				Else
					Me._Post = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("DutyTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PastorsAccountTables(ByVal entity As PastorsAccountTable)
		Me.SendPropertyChanging
		entity.MinisterTable = Me
	End Sub
	
	Private Sub detach_PastorsAccountTables(ByVal entity As PastorsAccountTable)
		Me.SendPropertyChanging
		entity.MinisterTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FunctionalGroupTable")>  _
Partial Public Class FunctionalGroupTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _FuctionGid As String
	
	Private _MemberGroupID As Integer
	
	Private _ComId As String
	
	Private _Name As String
	
	Private _PhoneNumber As String
	
	Private _Updateby As String
	
	Private _Churchid As String
	
	Private _DateCreated As Date
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _CommTable As EntityRef(Of CommTable)
	
	Private _MembersGroup As EntityRef(Of MembersGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnFuctionGidChanging(value As String)
    End Sub
    Partial Private Sub OnFuctionGidChanged()
    End Sub
    Partial Private Sub OnMemberGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMemberGroupIDChanged()
    End Sub
    Partial Private Sub OnComIdChanging(value As String)
    End Sub
    Partial Private Sub OnComIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnUpdatebyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatebyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._CommTable = CType(Nothing, EntityRef(Of CommTable))
		Me._MembersGroup = CType(Nothing, EntityRef(Of MembersGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FuctionGid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FuctionGid() As String
		Get
			Return Me._FuctionGid
		End Get
		Set
			If (String.Equals(Me._FuctionGid, value) = false) Then
				Me.OnFuctionGidChanging(value)
				Me.SendPropertyChanging
				Me._FuctionGid = value
				Me.SendPropertyChanged("FuctionGid")
				Me.OnFuctionGidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberGroupID", DbType:="Int NOT NULL")>  _
	Public Property MemberGroupID() As Integer
		Get
			Return Me._MemberGroupID
		End Get
		Set
			If ((Me._MemberGroupID = value)  _
						= false) Then
				If Me._MembersGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._MemberGroupID = value
				Me.SendPropertyChanged("MemberGroupID")
				Me.OnMemberGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ComId() As String
		Get
			Return Me._ComId
		End Get
		Set
			If (String.Equals(Me._ComId, value) = false) Then
				If Me._CommTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnComIdChanging(value)
				Me.SendPropertyChanging
				Me._ComId = value
				Me.SendPropertyChanged("ComId")
				Me.OnComIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updateby", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Updateby() As String
		Get
			Return Me._Updateby
		End Get
		Set
			If (String.Equals(Me._Updateby, value) = false) Then
				Me.OnUpdatebyChanging(value)
				Me.SendPropertyChanging
				Me._Updateby = value
				Me.SendPropertyChanged("Updateby")
				Me.OnUpdatebyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_FunctionalGroupTable", Storage:="_ChurchDetailTable", ThisKey:="Churchid", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.FunctionalGroupTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FunctionalGroupTables.Add(Me)
					Me._Churchid = value.ChurchDetailID
				Else
					Me._Churchid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CommTable_FunctionalGroupTable", Storage:="_CommTable", ThisKey:="ComId", OtherKey:="ComId", IsForeignKey:=true)>  _
	Public Property CommTable() As CommTable
		Get
			Return Me._CommTable.Entity
		End Get
		Set
			Dim previousValue As CommTable = Me._CommTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CommTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CommTable.Entity = Nothing
					previousValue.FunctionalGroupTables.Remove(Me)
				End If
				Me._CommTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FunctionalGroupTables.Add(Me)
					Me._ComId = value.ComId
				Else
					Me._ComId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CommTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembersGroup_FunctionalGroupTable", Storage:="_MembersGroup", ThisKey:="MemberGroupID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MembersGroup() As MembersGroup
		Get
			Return Me._MembersGroup.Entity
		End Get
		Set
			Dim previousValue As MembersGroup = Me._MembersGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembersGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembersGroup.Entity = Nothing
					previousValue.FunctionalGroupTables.Remove(Me)
				End If
				Me._MembersGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FunctionalGroupTables.Add(Me)
					Me._MemberGroupID = value.ID
				Else
					Me._MemberGroupID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MembersGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChildrenTable")>  _
Partial Public Class ChildrenTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Childrenid As String
	
	Private _Familyname As String
	
	Private _Firstname As String
	
	Private _Lastname As String
	
	Private _Gender As String
	
	Private _DOB As System.Nullable(Of Date)
	
	Private _Address As String
	
	Private _Phone As String
	
	Private _FunctiongroupID As Integer
	
	Private _ParentNo As String
	
	Private _Parents As String
	
	Private _Churchid As String
	
	Private _Updatedby As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _ChildrenImageTables As EntitySet(Of ChildrenImageTable)
	
	Private _MembersGroup As EntityRef(Of MembersGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnChildrenidChanging(value As String)
    End Sub
    Partial Private Sub OnChildrenidChanged()
    End Sub
    Partial Private Sub OnFamilynameChanging(value As String)
    End Sub
    Partial Private Sub OnFamilynameChanged()
    End Sub
    Partial Private Sub OnFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstnameChanged()
    End Sub
    Partial Private Sub OnLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnLastnameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnFunctiongroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFunctiongroupIDChanged()
    End Sub
    Partial Private Sub OnParentNoChanging(value As String)
    End Sub
    Partial Private Sub OnParentNoChanged()
    End Sub
    Partial Private Sub OnParentsChanging(value As String)
    End Sub
    Partial Private Sub OnParentsChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChildrenImageTables = New EntitySet(Of ChildrenImageTable)(AddressOf Me.attach_ChildrenImageTables, AddressOf Me.detach_ChildrenImageTables)
		Me._MembersGroup = CType(Nothing, EntityRef(Of MembersGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Childrenid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Childrenid() As String
		Get
			Return Me._Childrenid
		End Get
		Set
			If (String.Equals(Me._Childrenid, value) = false) Then
				Me.OnChildrenidChanging(value)
				Me.SendPropertyChanging
				Me._Childrenid = value
				Me.SendPropertyChanged("Childrenid")
				Me.OnChildrenidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Familyname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Familyname() As String
		Get
			Return Me._Familyname
		End Get
		Set
			If (String.Equals(Me._Familyname, value) = false) Then
				Me.OnFamilynameChanging(value)
				Me.SendPropertyChanging
				Me._Familyname = value
				Me.SendPropertyChanged("Familyname")
				Me.OnFamilynameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Firstname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Firstname() As String
		Get
			Return Me._Firstname
		End Get
		Set
			If (String.Equals(Me._Firstname, value) = false) Then
				Me.OnFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._Firstname = value
				Me.SendPropertyChanged("Firstname")
				Me.OnFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lastname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Lastname() As String
		Get
			Return Me._Lastname
		End Get
		Set
			If (String.Equals(Me._Lastname, value) = false) Then
				Me.OnLastnameChanging(value)
				Me.SendPropertyChanging
				Me._Lastname = value
				Me.SendPropertyChanged("Lastname")
				Me.OnLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="Date")>  _
	Public Property DOB() As System.Nullable(Of Date)
		Get
			Return Me._DOB
		End Get
		Set
			If (Me._DOB.Equals(value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FunctiongroupID", DbType:="Int NOT NULL")>  _
	Public Property FunctiongroupID() As Integer
		Get
			Return Me._FunctiongroupID
		End Get
		Set
			If ((Me._FunctiongroupID = value)  _
						= false) Then
				If Me._MembersGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFunctiongroupIDChanging(value)
				Me.SendPropertyChanging
				Me._FunctiongroupID = value
				Me.SendPropertyChanged("FunctiongroupID")
				Me.OnFunctiongroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentNo", DbType:="NVarChar(50)")>  _
	Public Property ParentNo() As String
		Get
			Return Me._ParentNo
		End Get
		Set
			If (String.Equals(Me._ParentNo, value) = false) Then
				Me.OnParentNoChanging(value)
				Me.SendPropertyChanging
				Me._ParentNo = value
				Me.SendPropertyChanged("ParentNo")
				Me.OnParentNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parents", DbType:="NVarChar(50)")>  _
	Public Property Parents() As String
		Get
			Return Me._Parents
		End Get
		Set
			If (String.Equals(Me._Parents, value) = false) Then
				Me.OnParentsChanging(value)
				Me.SendPropertyChanging
				Me._Parents = value
				Me.SendPropertyChanged("Parents")
				Me.OnParentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChildrenTable_ChildrenImageTable", Storage:="_ChildrenImageTables", ThisKey:="Childrenid", OtherKey:="Childrenid")>  _
	Public Property ChildrenImageTables() As EntitySet(Of ChildrenImageTable)
		Get
			Return Me._ChildrenImageTables
		End Get
		Set
			Me._ChildrenImageTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembersGroup_ChildrenTable", Storage:="_MembersGroup", ThisKey:="FunctiongroupID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MembersGroup() As MembersGroup
		Get
			Return Me._MembersGroup.Entity
		End Get
		Set
			Dim previousValue As MembersGroup = Me._MembersGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembersGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembersGroup.Entity = Nothing
					previousValue.ChildrenTables.Remove(Me)
				End If
				Me._MembersGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChildrenTables.Add(Me)
					Me._FunctiongroupID = value.ID
				Else
					Me._FunctiongroupID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MembersGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ChildrenImageTables(ByVal entity As ChildrenImageTable)
		Me.SendPropertyChanging
		entity.ChildrenTable = Me
	End Sub
	
	Private Sub detach_ChildrenImageTables(ByVal entity As ChildrenImageTable)
		Me.SendPropertyChanging
		entity.ChildrenTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderServiceTable")>  _
Partial Public Class OrderServiceTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Orderid As String
	
	Private _ServicesName As String
	
	Private _Period As String
	
	Private _Timefrom As String
	
	Private _TimeTo As String
	
	Private _Min As String
	
	Private _Program As String
	
	Private _Moderator As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _churchid As String
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnOrderidChanging(value As String)
    End Sub
    Partial Private Sub OnOrderidChanged()
    End Sub
    Partial Private Sub OnServicesNameChanging(value As String)
    End Sub
    Partial Private Sub OnServicesNameChanged()
    End Sub
    Partial Private Sub OnPeriodChanging(value As String)
    End Sub
    Partial Private Sub OnPeriodChanged()
    End Sub
    Partial Private Sub OnTimefromChanging(value As String)
    End Sub
    Partial Private Sub OnTimefromChanged()
    End Sub
    Partial Private Sub OnTimeToChanging(value As String)
    End Sub
    Partial Private Sub OnTimeToChanged()
    End Sub
    Partial Private Sub OnMinChanging(value As String)
    End Sub
    Partial Private Sub OnMinChanged()
    End Sub
    Partial Private Sub OnProgramChanging(value As String)
    End Sub
    Partial Private Sub OnProgramChanged()
    End Sub
    Partial Private Sub OnModeratorChanging(value As String)
    End Sub
    Partial Private Sub OnModeratorChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnchurchidChanging(value As String)
    End Sub
    Partial Private Sub OnchurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Orderid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Orderid() As String
		Get
			Return Me._Orderid
		End Get
		Set
			If (String.Equals(Me._Orderid, value) = false) Then
				Me.OnOrderidChanging(value)
				Me.SendPropertyChanging
				Me._Orderid = value
				Me.SendPropertyChanged("Orderid")
				Me.OnOrderidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServicesName", DbType:="NVarChar(50)")>  _
	Public Property ServicesName() As String
		Get
			Return Me._ServicesName
		End Get
		Set
			If (String.Equals(Me._ServicesName, value) = false) Then
				Me.OnServicesNameChanging(value)
				Me.SendPropertyChanging
				Me._ServicesName = value
				Me.SendPropertyChanged("ServicesName")
				Me.OnServicesNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Period", DbType:="NVarChar(50)")>  _
	Public Property Period() As String
		Get
			Return Me._Period
		End Get
		Set
			If (String.Equals(Me._Period, value) = false) Then
				Me.OnPeriodChanging(value)
				Me.SendPropertyChanging
				Me._Period = value
				Me.SendPropertyChanged("Period")
				Me.OnPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Timefrom", DbType:="NVarChar(50)")>  _
	Public Property Timefrom() As String
		Get
			Return Me._Timefrom
		End Get
		Set
			If (String.Equals(Me._Timefrom, value) = false) Then
				Me.OnTimefromChanging(value)
				Me.SendPropertyChanging
				Me._Timefrom = value
				Me.SendPropertyChanged("Timefrom")
				Me.OnTimefromChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeTo", DbType:="NVarChar(50)")>  _
	Public Property TimeTo() As String
		Get
			Return Me._TimeTo
		End Get
		Set
			If (String.Equals(Me._TimeTo, value) = false) Then
				Me.OnTimeToChanging(value)
				Me.SendPropertyChanging
				Me._TimeTo = value
				Me.SendPropertyChanged("TimeTo")
				Me.OnTimeToChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Min", DbType:="NVarChar(50)")>  _
	Public Property Min() As String
		Get
			Return Me._Min
		End Get
		Set
			If (String.Equals(Me._Min, value) = false) Then
				Me.OnMinChanging(value)
				Me.SendPropertyChanging
				Me._Min = value
				Me.SendPropertyChanged("Min")
				Me.OnMinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Program", DbType:="NVarChar(MAX)")>  _
	Public Property Program() As String
		Get
			Return Me._Program
		End Get
		Set
			If (String.Equals(Me._Program, value) = false) Then
				Me.OnProgramChanging(value)
				Me.SendPropertyChanging
				Me._Program = value
				Me.SendPropertyChanged("Program")
				Me.OnProgramChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Moderator", DbType:="NVarChar(MAX)")>  _
	Public Property Moderator() As String
		Get
			Return Me._Moderator
		End Get
		Set
			If (String.Equals(Me._Moderator, value) = false) Then
				Me.OnModeratorChanging(value)
				Me.SendPropertyChanging
				Me._Moderator = value
				Me.SendPropertyChanged("Moderator")
				Me.OnModeratorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_churchid", DbType:="NVarChar(50)")>  _
	Public Property churchid() As String
		Get
			Return Me._churchid
		End Get
		Set
			If (String.Equals(Me._churchid, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnchurchidChanging(value)
				Me.SendPropertyChanging
				Me._churchid = value
				Me.SendPropertyChanged("churchid")
				Me.OnchurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_OrderServiceTable", Storage:="_ChurchDetailTable", ThisKey:="churchid", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.OrderServiceTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderServiceTables.Add(Me)
					Me._churchid = value.ChurchDetailID
				Else
					Me._churchid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PastorsTitheAcountTable")>  _
Partial Public Class PastorsTitheAcountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As Date
	
	Private _incomeid As Integer
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As Date
	
	Private _StaffId As String
	
	Private _Dateupdated As String
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date NOT NULL")>  _
	Public Property TranscationDate() As Date
		Get
			Return Me._TranscationDate
		End Get
		Set
			If ((Me._TranscationDate = value)  _
						= false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(50)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="NVarChar(50)")>  _
	Public Property Dateupdated() As String
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (String.Equals(Me._Dateupdated, value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PastorsTitheAcountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.PastorsTitheAcountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTitheAcountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PastorsTitheAcountTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PastorsTitheAcountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTitheAcountTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pastorsTitheBankPaymentTable")>  _
Partial Public Class pastorsTitheBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Paymentid As Integer
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _BankTable As EntityRef(Of BankTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _PastorsTitheTable As EntityRef(Of PastorsTitheTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BankTable = CType(Nothing, EntityRef(Of BankTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._PastorsTitheTable = CType(Nothing, EntityRef(Of PastorsTitheTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50)")>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._PastorsTitheTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int NOT NULL")>  _
	Public Property Paymentid() As Integer
		Get
			Return Me._Paymentid
		End Get
		Set
			If ((Me._Paymentid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				If Me._BankTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_pastorsTitheBankPaymentTable", Storage:="_BankTable", ThisKey:="Bankid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BankTable() As BankTable
		Get
			Return Me._BankTable.Entity
		End Get
		Set
			Dim previousValue As BankTable = Me._BankTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BankTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BankTable.Entity = Nothing
					previousValue.pastorsTitheBankPaymentTables.Remove(Me)
				End If
				Me._BankTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.pastorsTitheBankPaymentTables.Add(Me)
					Me._Bankid = value.id
				Else
					Me._Bankid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BankTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_pastorsTitheBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.pastorsTitheBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.pastorsTitheBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PastorsTitheTable_pastorsTitheBankPaymentTable", Storage:="_PastorsTitheTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property PastorsTitheTable() As PastorsTitheTable
		Get
			Return Me._PastorsTitheTable.Entity
		End Get
		Set
			Dim previousValue As PastorsTitheTable = Me._PastorsTitheTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PastorsTitheTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PastorsTitheTable.Entity = Nothing
					previousValue.pastorsTitheBankPaymentTables.Remove(Me)
				End If
				Me._PastorsTitheTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.pastorsTitheBankPaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PastorsTitheTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PastorsTithePaymentTable")>  _
Partial Public Class PastorsTithePaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Incomeid As Integer
	
	Private _PaymentMethodid As Integer
	
	Private _Amount As Decimal
	
	Private _Datecreated As Date
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _PastorsTitheTable As EntityRef(Of PastorsTitheTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._PastorsTitheTable = CType(Nothing, EntityRef(Of PastorsTitheTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._PastorsTitheTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int NOT NULL")>  _
	Public Property PaymentMethodid() As Integer
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If ((Me._PaymentMethodid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PastorsTithePaymentTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PastorsTithePaymentTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTithePaymentTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PastorsTithePaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.PastorsTithePaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTithePaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PastorsTitheTable_PastorsTithePaymentTable", Storage:="_PastorsTitheTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property PastorsTitheTable() As PastorsTitheTable
		Get
			Return Me._PastorsTitheTable.Entity
		End Get
		Set
			Dim previousValue As PastorsTitheTable = Me._PastorsTitheTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PastorsTitheTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PastorsTitheTable.Entity = Nothing
					previousValue.PastorsTithePaymentTables.Remove(Me)
				End If
				Me._PastorsTitheTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTithePaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PastorsTitheTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PastorsTitheTable")>  _
Partial Public Class PastorsTitheTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Incomeid As Integer
	
	Private _Titheid As String
	
	Private _Pastorsname As String
	
	Private _PhoneNumber As String
	
	Private _TitheNo As System.Nullable(Of Integer)
	
	Private _Year As String
	
	Private _Month As String
	
	Private _Week As String
	
	Private _Amountword As String
	
	Private _Datecreated As Date
	
	Private _Staffid As String
	
	Private _Churchid As String
	
	Private _pastorsTitheBankPaymentTables As EntitySet(Of pastorsTitheBankPaymentTable)
	
	Private _PastorsTithePaymentTables As EntitySet(Of PastorsTithePaymentTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnPastorsnameChanging(value As String)
    End Sub
    Partial Private Sub OnPastorsnameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnTitheNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTitheNoChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As String)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnWeekChanging(value As String)
    End Sub
    Partial Private Sub OnWeekChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._pastorsTitheBankPaymentTables = New EntitySet(Of pastorsTitheBankPaymentTable)(AddressOf Me.attach_pastorsTitheBankPaymentTables, AddressOf Me.detach_pastorsTitheBankPaymentTables)
		Me._PastorsTithePaymentTables = New EntitySet(Of PastorsTithePaymentTable)(AddressOf Me.attach_PastorsTithePaymentTables, AddressOf Me.detach_PastorsTithePaymentTables)
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastorsname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pastorsname() As String
		Get
			Return Me._Pastorsname
		End Get
		Set
			If (String.Equals(Me._Pastorsname, value) = false) Then
				Me.OnPastorsnameChanging(value)
				Me.SendPropertyChanging
				Me._Pastorsname = value
				Me.SendPropertyChanged("Pastorsname")
				Me.OnPastorsnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitheNo", DbType:="Int")>  _
	Public Property TitheNo() As System.Nullable(Of Integer)
		Get
			Return Me._TitheNo
		End Get
		Set
			If (Me._TitheNo.Equals(value) = false) Then
				Me.OnTitheNoChanging(value)
				Me.SendPropertyChanging
				Me._TitheNo = value
				Me.SendPropertyChanged("TitheNo")
				Me.OnTitheNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Year() As String
		Get
			Return Me._Year
		End Get
		Set
			If (String.Equals(Me._Year, value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Week", DbType:="NVarChar(50)")>  _
	Public Property Week() As String
		Get
			Return Me._Week
		End Get
		Set
			If (String.Equals(Me._Week, value) = false) Then
				Me.OnWeekChanging(value)
				Me.SendPropertyChanging
				Me._Week = value
				Me.SendPropertyChanged("Week")
				Me.OnWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50)")>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PastorsTitheTable_pastorsTitheBankPaymentTable", Storage:="_pastorsTitheBankPaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property pastorsTitheBankPaymentTables() As EntitySet(Of pastorsTitheBankPaymentTable)
		Get
			Return Me._pastorsTitheBankPaymentTables
		End Get
		Set
			Me._pastorsTitheBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PastorsTitheTable_PastorsTithePaymentTable", Storage:="_PastorsTithePaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property PastorsTithePaymentTables() As EntitySet(Of PastorsTithePaymentTable)
		Get
			Return Me._PastorsTithePaymentTables
		End Get
		Set
			Me._PastorsTithePaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PastorsTitheTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PastorsTitheTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTitheTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PastorsTitheTable", Storage:="_MembershipTable", ThisKey:="Staffid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.PastorsTitheTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsTitheTables.Add(Me)
					Me._Staffid = value.Memberid
				Else
					Me._Staffid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_pastorsTitheBankPaymentTables(ByVal entity As pastorsTitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.PastorsTitheTable = Me
	End Sub
	
	Private Sub detach_pastorsTitheBankPaymentTables(ByVal entity As pastorsTitheBankPaymentTable)
		Me.SendPropertyChanging
		entity.PastorsTitheTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTithePaymentTables(ByVal entity As PastorsTithePaymentTable)
		Me.SendPropertyChanging
		entity.PastorsTitheTable = Me
	End Sub
	
	Private Sub detach_PastorsTithePaymentTables(ByVal entity As PastorsTithePaymentTable)
		Me.SendPropertyChanging
		entity.PastorsTitheTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PastorsAccountTable")>  _
Partial Public Class PastorsAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As Date
	
	Private _MinsterID As String
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As Date
	
	Private _StaffId As String
	
	Private _Dateupdated As System.Nullable(Of Date)
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _MinisterTable As EntityRef(Of MinisterTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnMinsterIDChanging(value As String)
    End Sub
    Partial Private Sub OnMinsterIDChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._MinisterTable = CType(Nothing, EntityRef(Of MinisterTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date NOT NULL")>  _
	Public Property TranscationDate() As Date
		Get
			Return Me._TranscationDate
		End Get
		Set
			If ((Me._TranscationDate = value)  _
						= false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinsterID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MinsterID() As String
		Get
			Return Me._MinsterID
		End Get
		Set
			If (String.Equals(Me._MinsterID, value) = false) Then
				If Me._MinisterTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMinsterIDChanging(value)
				Me.SendPropertyChanging
				Me._MinsterID = value
				Me.SendPropertyChanged("MinsterID")
				Me.OnMinsterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(50)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(50)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="Date")>  _
	Public Property Dateupdated() As System.Nullable(Of Date)
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (Me._Dateupdated.Equals(value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PastorsAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.PastorsAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MinisterTable_PastorsAccountTable", Storage:="_MinisterTable", ThisKey:="MinsterID", OtherKey:="Ministerid", IsForeignKey:=true)>  _
	Public Property MinisterTable() As MinisterTable
		Get
			Return Me._MinisterTable.Entity
		End Get
		Set
			Dim previousValue As MinisterTable = Me._MinisterTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MinisterTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MinisterTable.Entity = Nothing
					previousValue.PastorsAccountTables.Remove(Me)
				End If
				Me._MinisterTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsAccountTables.Add(Me)
					Me._MinsterID = value.Ministerid
				Else
					Me._MinsterID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MinisterTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PastorsAccountTable", Storage:="_MembershipTable", ThisKey:="StaffId", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.PastorsAccountTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PastorsAccountTables.Add(Me)
					Me._StaffId = value.Memberid
				Else
					Me._StaffId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HierarchyTable")>  _
Partial Public Class HierarchyTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Incomeid As Integer
	
	Private _Titheid As String
	
	Private _HierachyID As String
	
	Private _ChurchDetailID As String
	
	Private _TitheNo As String
	
	Private _Year As String
	
	Private _Month As String
	
	Private _Week As String
	
	Private _Amountword As String
	
	Private _Datecreated As Date
	
	Private _Staffid As String
	
	Private _Churchid As String
	
	Private _HierarcyBankPaymentTables As EntitySet(Of HierarcyBankPaymentTable)
	
	Private _HierarchyPaymentTables As EntitySet(Of HierarchyPaymentTable)
	
	Private _ChurchDesignationTable As EntityRef(Of ChurchDesignationTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnHierachyIDChanging(value As String)
    End Sub
    Partial Private Sub OnHierachyIDChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnTitheNoChanging(value As String)
    End Sub
    Partial Private Sub OnTitheNoChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As String)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnWeekChanging(value As String)
    End Sub
    Partial Private Sub OnWeekChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HierarcyBankPaymentTables = New EntitySet(Of HierarcyBankPaymentTable)(AddressOf Me.attach_HierarcyBankPaymentTables, AddressOf Me.detach_HierarcyBankPaymentTables)
		Me._HierarchyPaymentTables = New EntitySet(Of HierarchyPaymentTable)(AddressOf Me.attach_HierarchyPaymentTables, AddressOf Me.detach_HierarchyPaymentTables)
		Me._ChurchDesignationTable = CType(Nothing, EntityRef(Of ChurchDesignationTable))
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HierachyID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HierachyID() As String
		Get
			Return Me._HierachyID
		End Get
		Set
			If (String.Equals(Me._HierachyID, value) = false) Then
				If Me._ChurchDesignationTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHierachyIDChanging(value)
				Me.SendPropertyChanging
				Me._HierachyID = value
				Me.SendPropertyChanged("HierachyID")
				Me.OnHierachyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitheNo", DbType:="NVarChar(50)")>  _
	Public Property TitheNo() As String
		Get
			Return Me._TitheNo
		End Get
		Set
			If (String.Equals(Me._TitheNo, value) = false) Then
				Me.OnTitheNoChanging(value)
				Me.SendPropertyChanging
				Me._TitheNo = value
				Me.SendPropertyChanged("TitheNo")
				Me.OnTitheNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Year() As String
		Get
			Return Me._Year
		End Get
		Set
			If (String.Equals(Me._Year, value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Week", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Week() As String
		Get
			Return Me._Week
		End Get
		Set
			If (String.Equals(Me._Week, value) = false) Then
				Me.OnWeekChanging(value)
				Me.SendPropertyChanging
				Me._Week = value
				Me.SendPropertyChanged("Week")
				Me.OnWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX)")>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HierarchyTable_HierarcyBankPaymentTable", Storage:="_HierarcyBankPaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property HierarcyBankPaymentTables() As EntitySet(Of HierarcyBankPaymentTable)
		Get
			Return Me._HierarcyBankPaymentTables
		End Get
		Set
			Me._HierarcyBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HierarchyTable_HierarchyPaymentTable", Storage:="_HierarchyPaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property HierarchyPaymentTables() As EntitySet(Of HierarchyPaymentTable)
		Get
			Return Me._HierarchyPaymentTables
		End Get
		Set
			Me._HierarchyPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_HierarchyTable", Storage:="_ChurchDesignationTable", ThisKey:="HierachyID", OtherKey:="ChurchDesgID", IsForeignKey:=true)>  _
	Public Property ChurchDesignationTable() As ChurchDesignationTable
		Get
			Return Me._ChurchDesignationTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDesignationTable = Me._ChurchDesignationTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDesignationTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDesignationTable.Entity = Nothing
					previousValue.HierarchyTables.Remove(Me)
				End If
				Me._ChurchDesignationTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarchyTables.Add(Me)
					Me._HierachyID = value.ChurchDesgID
				Else
					Me._HierachyID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDesignationTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_HierarchyTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.HierarchyTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarchyTables.Add(Me)
					Me._ChurchDetailID = value.ChurchDetailID
				Else
					Me._ChurchDetailID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_HierarchyTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.HierarchyTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarchyTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_HierarchyTable", Storage:="_MembershipTable", ThisKey:="Staffid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.HierarchyTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarchyTables.Add(Me)
					Me._Staffid = value.Memberid
				Else
					Me._Staffid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HierarcyBankPaymentTables(ByVal entity As HierarcyBankPaymentTable)
		Me.SendPropertyChanging
		entity.HierarchyTable = Me
	End Sub
	
	Private Sub detach_HierarcyBankPaymentTables(ByVal entity As HierarcyBankPaymentTable)
		Me.SendPropertyChanging
		entity.HierarchyTable = Nothing
	End Sub
	
	Private Sub attach_HierarchyPaymentTables(ByVal entity As HierarchyPaymentTable)
		Me.SendPropertyChanging
		entity.HierarchyTable = Me
	End Sub
	
	Private Sub detach_HierarchyPaymentTables(ByVal entity As HierarchyPaymentTable)
		Me.SendPropertyChanging
		entity.HierarchyTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HierarcyBankPaymentTable")>  _
Partial Public Class HierarcyBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Paymentid As Integer
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As String
	
	Private _BankTable As EntityRef(Of BankTable)
	
	Private _HierarchyTable As EntityRef(Of HierarchyTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As String)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BankTable = CType(Nothing, EntityRef(Of BankTable))
		Me._HierarchyTable = CType(Nothing, EntityRef(Of HierarchyTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._HierarchyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int NOT NULL")>  _
	Public Property Paymentid() As Integer
		Get
			Return Me._Paymentid
		End Get
		Set
			If ((Me._Paymentid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				If Me._BankTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="NVarChar(50)")>  _
	Public Property Datecreated() As String
		Get
			Return Me._Datecreated
		End Get
		Set
			If (String.Equals(Me._Datecreated, value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_HierarcyBankPaymentTable", Storage:="_BankTable", ThisKey:="Bankid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BankTable() As BankTable
		Get
			Return Me._BankTable.Entity
		End Get
		Set
			Dim previousValue As BankTable = Me._BankTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BankTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BankTable.Entity = Nothing
					previousValue.HierarcyBankPaymentTables.Remove(Me)
				End If
				Me._BankTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyBankPaymentTables.Add(Me)
					Me._Bankid = value.id
				Else
					Me._Bankid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BankTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HierarchyTable_HierarcyBankPaymentTable", Storage:="_HierarchyTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property HierarchyTable() As HierarchyTable
		Get
			Return Me._HierarchyTable.Entity
		End Get
		Set
			Dim previousValue As HierarchyTable = Me._HierarchyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HierarchyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HierarchyTable.Entity = Nothing
					previousValue.HierarcyBankPaymentTables.Remove(Me)
				End If
				Me._HierarchyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyBankPaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("HierarchyTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_HierarcyBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.HierarcyBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HierarcyAccountTable")>  _
Partial Public Class HierarcyAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _HirerchyID As String
	
	Private _ChurchDetailsID As String
	
	Private _incomeid As Integer
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As Decimal
	
	Private _Remark As String
	
	Private _Datecreated As Date
	
	Private _StaffId As String
	
	Private _Dateupdated As String
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _ChurchDesignationTable As EntityRef(Of ChurchDesignationTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnHirerchyIDChanging(value As String)
    End Sub
    Partial Private Sub OnHirerchyIDChanged()
    End Sub
    Partial Private Sub OnChurchDetailsIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailsIDChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._ChurchDesignationTable = CType(Nothing, EntityRef(Of ChurchDesignationTable))
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HirerchyID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HirerchyID() As String
		Get
			Return Me._HirerchyID
		End Get
		Set
			If (String.Equals(Me._HirerchyID, value) = false) Then
				If Me._ChurchDesignationTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHirerchyIDChanging(value)
				Me.SendPropertyChanging
				Me._HirerchyID = value
				Me.SendPropertyChanged("HirerchyID")
				Me.OnHirerchyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailsID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailsID() As String
		Get
			Return Me._ChurchDetailsID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailsID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailsIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailsID = value
				Me.SendPropertyChanged("ChurchDetailsID")
				Me.OnChurchDetailsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(50)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="NVarChar(50)")>  _
	Public Property Dateupdated() As String
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (String.Equals(Me._Dateupdated, value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_HierarcyAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.HierarcyAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_HierarcyAccountTable", Storage:="_ChurchDesignationTable", ThisKey:="HirerchyID", OtherKey:="ChurchDesgID", IsForeignKey:=true)>  _
	Public Property ChurchDesignationTable() As ChurchDesignationTable
		Get
			Return Me._ChurchDesignationTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDesignationTable = Me._ChurchDesignationTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDesignationTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDesignationTable.Entity = Nothing
					previousValue.HierarcyAccountTables.Remove(Me)
				End If
				Me._ChurchDesignationTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyAccountTables.Add(Me)
					Me._HirerchyID = value.ChurchDesgID
				Else
					Me._HirerchyID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDesignationTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_HierarcyAccountTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailsID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.HierarcyAccountTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyAccountTables.Add(Me)
					Me._ChurchDetailsID = value.ChurchDetailID
				Else
					Me._ChurchDetailsID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_HierarcyAccountTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.HierarcyAccountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyAccountTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_HierarcyAccountTable", Storage:="_MembershipTable", ThisKey:="StaffId", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.HierarcyAccountTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarcyAccountTables.Add(Me)
					Me._StaffId = value.Memberid
				Else
					Me._StaffId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PensionTable")>  _
Partial Public Class PensionTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Incomeid As Integer
	
	Private _Titheid As String
	
	Private _HierachyID As String
	
	Private _ChurchDetailID As String
	
	Private _PensionNo As String
	
	Private _Year As String
	
	Private _Month As String
	
	Private _Week As String
	
	Private _Amountword As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Staffid As String
	
	Private _PensionPaymentTables As EntitySet(Of PensionPaymentTable)
	
	Private _PensionBankPaymentTables As EntitySet(Of PensionBankPaymentTable)
	
	Private _PensionAccountTables As EntitySet(Of PensionAccountTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnHierachyIDChanging(value As String)
    End Sub
    Partial Private Sub OnHierachyIDChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnPensionNoChanging(value As String)
    End Sub
    Partial Private Sub OnPensionNoChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As String)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnWeekChanging(value As String)
    End Sub
    Partial Private Sub OnWeekChanged()
    End Sub
    Partial Private Sub OnAmountwordChanging(value As String)
    End Sub
    Partial Private Sub OnAmountwordChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffidChanging(value As String)
    End Sub
    Partial Private Sub OnStaffidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PensionPaymentTables = New EntitySet(Of PensionPaymentTable)(AddressOf Me.attach_PensionPaymentTables, AddressOf Me.detach_PensionPaymentTables)
		Me._PensionBankPaymentTables = New EntitySet(Of PensionBankPaymentTable)(AddressOf Me.attach_PensionBankPaymentTables, AddressOf Me.detach_PensionBankPaymentTables)
		Me._PensionAccountTables = New EntitySet(Of PensionAccountTable)(AddressOf Me.attach_PensionAccountTables, AddressOf Me.detach_PensionAccountTables)
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HierachyID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HierachyID() As String
		Get
			Return Me._HierachyID
		End Get
		Set
			If (String.Equals(Me._HierachyID, value) = false) Then
				Me.OnHierachyIDChanging(value)
				Me.SendPropertyChanging
				Me._HierachyID = value
				Me.SendPropertyChanged("HierachyID")
				Me.OnHierachyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PensionNo", DbType:="NVarChar(50)")>  _
	Public Property PensionNo() As String
		Get
			Return Me._PensionNo
		End Get
		Set
			If (String.Equals(Me._PensionNo, value) = false) Then
				Me.OnPensionNoChanging(value)
				Me.SendPropertyChanging
				Me._PensionNo = value
				Me.SendPropertyChanged("PensionNo")
				Me.OnPensionNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="NVarChar(50)")>  _
	Public Property Year() As String
		Get
			Return Me._Year
		End Get
		Set
			If (String.Equals(Me._Year, value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Week", DbType:="NVarChar(50)")>  _
	Public Property Week() As String
		Get
			Return Me._Week
		End Get
		Set
			If (String.Equals(Me._Week, value) = false) Then
				Me.OnWeekChanging(value)
				Me.SendPropertyChanging
				Me._Week = value
				Me.SendPropertyChanged("Week")
				Me.OnWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amountword", DbType:="NVarChar(MAX)")>  _
	Public Property Amountword() As String
		Get
			Return Me._Amountword
		End Get
		Set
			If (String.Equals(Me._Amountword, value) = false) Then
				Me.OnAmountwordChanging(value)
				Me.SendPropertyChanging
				Me._Amountword = value
				Me.SendPropertyChanged("Amountword")
				Me.OnAmountwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Staffid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Staffid() As String
		Get
			Return Me._Staffid
		End Get
		Set
			If (String.Equals(Me._Staffid, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffidChanging(value)
				Me.SendPropertyChanging
				Me._Staffid = value
				Me.SendPropertyChanged("Staffid")
				Me.OnStaffidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PensionTable_PensionPaymentTable", Storage:="_PensionPaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property PensionPaymentTables() As EntitySet(Of PensionPaymentTable)
		Get
			Return Me._PensionPaymentTables
		End Get
		Set
			Me._PensionPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PensionTable_PensionBankPaymentTable", Storage:="_PensionBankPaymentTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property PensionBankPaymentTables() As EntitySet(Of PensionBankPaymentTable)
		Get
			Return Me._PensionBankPaymentTables
		End Get
		Set
			Me._PensionBankPaymentTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PensionTable_PensionAccountTable", Storage:="_PensionAccountTables", ThisKey:="Titheid", OtherKey:="Titheid")>  _
	Public Property PensionAccountTables() As EntitySet(Of PensionAccountTable)
		Get
			Return Me._PensionAccountTables
		End Get
		Set
			Me._PensionAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PensionTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PensionTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PensionTable", Storage:="_MembershipTable", ThisKey:="Staffid", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.PensionTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionTables.Add(Me)
					Me._Staffid = value.Memberid
				Else
					Me._Staffid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PensionPaymentTables(ByVal entity As PensionPaymentTable)
		Me.SendPropertyChanging
		entity.PensionTable = Me
	End Sub
	
	Private Sub detach_PensionPaymentTables(ByVal entity As PensionPaymentTable)
		Me.SendPropertyChanging
		entity.PensionTable = Nothing
	End Sub
	
	Private Sub attach_PensionBankPaymentTables(ByVal entity As PensionBankPaymentTable)
		Me.SendPropertyChanging
		entity.PensionTable = Me
	End Sub
	
	Private Sub detach_PensionBankPaymentTables(ByVal entity As PensionBankPaymentTable)
		Me.SendPropertyChanging
		entity.PensionTable = Nothing
	End Sub
	
	Private Sub attach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.PensionTable = Me
	End Sub
	
	Private Sub detach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.PensionTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PensionPaymentTable")>  _
Partial Public Class PensionPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Incomeid As Integer
	
	Private _PaymentMethodid As Integer
	
	Private _Amount As Decimal
	
	Private _Datecreated As Date
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _PensionTable As EntityRef(Of PensionTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._PensionTable = CType(Nothing, EntityRef(Of PensionTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._PensionTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int NOT NULL")>  _
	Public Property PaymentMethodid() As Integer
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If ((Me._PaymentMethodid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PensionPaymentTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PensionPaymentTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionPaymentTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PensionPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.PensionPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionPaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PensionTable_PensionPaymentTable", Storage:="_PensionTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property PensionTable() As PensionTable
		Get
			Return Me._PensionTable.Entity
		End Get
		Set
			Dim previousValue As PensionTable = Me._PensionTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PensionTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PensionTable.Entity = Nothing
					previousValue.PensionPaymentTables.Remove(Me)
				End If
				Me._PensionTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionPaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PensionTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PensionBankPaymentTable")>  _
Partial Public Class PensionBankPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Paymentid As Integer
	
	Private _Bankid As System.Nullable(Of Integer)
	
	Private _ChequeNo As String
	
	Private _Dateissu As String
	
	Private _CardNumber As String
	
	Private _AccountName As String
	
	Private _ExpireDate As String
	
	Private _Datecreated As String
	
	Private _BankTable As EntityRef(Of BankTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
	Private _PensionTable As EntityRef(Of PensionTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnPaymentidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentidChanged()
    End Sub
    Partial Private Sub OnBankidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBankidChanged()
    End Sub
    Partial Private Sub OnChequeNoChanging(value As String)
    End Sub
    Partial Private Sub OnChequeNoChanged()
    End Sub
    Partial Private Sub OnDateissuChanging(value As String)
    End Sub
    Partial Private Sub OnDateissuChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnExpireDateChanging(value As String)
    End Sub
    Partial Private Sub OnExpireDateChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As String)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BankTable = CType(Nothing, EntityRef(Of BankTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		Me._PensionTable = CType(Nothing, EntityRef(Of PensionTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._PensionTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paymentid", DbType:="Int NOT NULL")>  _
	Public Property Paymentid() As Integer
		Get
			Return Me._Paymentid
		End Get
		Set
			If ((Me._Paymentid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentidChanging(value)
				Me.SendPropertyChanging
				Me._Paymentid = value
				Me.SendPropertyChanged("Paymentid")
				Me.OnPaymentidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bankid", DbType:="Int")>  _
	Public Property Bankid() As System.Nullable(Of Integer)
		Get
			Return Me._Bankid
		End Get
		Set
			If (Me._Bankid.Equals(value) = false) Then
				If Me._BankTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankidChanging(value)
				Me.SendPropertyChanging
				Me._Bankid = value
				Me.SendPropertyChanged("Bankid")
				Me.OnBankidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChequeNo", DbType:="NVarChar(50)")>  _
	Public Property ChequeNo() As String
		Get
			Return Me._ChequeNo
		End Get
		Set
			If (String.Equals(Me._ChequeNo, value) = false) Then
				Me.OnChequeNoChanging(value)
				Me.SendPropertyChanging
				Me._ChequeNo = value
				Me.SendPropertyChanged("ChequeNo")
				Me.OnChequeNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateissu", DbType:="NVarChar(50)")>  _
	Public Property Dateissu() As String
		Get
			Return Me._Dateissu
		End Get
		Set
			If (String.Equals(Me._Dateissu, value) = false) Then
				Me.OnDateissuChanging(value)
				Me.SendPropertyChanging
				Me._Dateissu = value
				Me.SendPropertyChanged("Dateissu")
				Me.OnDateissuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpireDate", DbType:="NVarChar(50)")>  _
	Public Property ExpireDate() As String
		Get
			Return Me._ExpireDate
		End Get
		Set
			If (String.Equals(Me._ExpireDate, value) = false) Then
				Me.OnExpireDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpireDate = value
				Me.SendPropertyChanged("ExpireDate")
				Me.OnExpireDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="NVarChar(50)")>  _
	Public Property Datecreated() As String
		Get
			Return Me._Datecreated
		End Get
		Set
			If (String.Equals(Me._Datecreated, value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BankTable_PensionBankPaymentTable", Storage:="_BankTable", ThisKey:="Bankid", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property BankTable() As BankTable
		Get
			Return Me._BankTable.Entity
		End Get
		Set
			Dim previousValue As BankTable = Me._BankTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BankTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BankTable.Entity = Nothing
					previousValue.PensionBankPaymentTables.Remove(Me)
				End If
				Me._BankTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionBankPaymentTables.Add(Me)
					Me._Bankid = value.id
				Else
					Me._Bankid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BankTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_PensionBankPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="Paymentid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.PensionBankPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionBankPaymentTables.Add(Me)
					Me._Paymentid = value.Id
				Else
					Me._Paymentid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PensionTable_PensionBankPaymentTable", Storage:="_PensionTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property PensionTable() As PensionTable
		Get
			Return Me._PensionTable.Entity
		End Get
		Set
			Dim previousValue As PensionTable = Me._PensionTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PensionTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PensionTable.Entity = Nothing
					previousValue.PensionBankPaymentTables.Remove(Me)
				End If
				Me._PensionTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionBankPaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PensionTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PensionAccountTable")>  _
Partial Public Class PensionAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As Date
	
	Private _Titheid As String
	
	Private _HirerchyID As String
	
	Private _ChurchDetailsID As String
	
	Private _incomeid As Integer
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Remark As String
	
	Private _Datecreated As Date
	
	Private _StaffId As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _ChurchDesignationTable As EntityRef(Of ChurchDesignationTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _PensionTable As EntityRef(Of PensionTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnHirerchyIDChanging(value As String)
    End Sub
    Partial Private Sub OnHirerchyIDChanged()
    End Sub
    Partial Private Sub OnChurchDetailsIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailsIDChanged()
    End Sub
    Partial Private Sub OnincomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnincomeidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._ChurchDesignationTable = CType(Nothing, EntityRef(Of ChurchDesignationTable))
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._PensionTable = CType(Nothing, EntityRef(Of PensionTable))
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date NOT NULL")>  _
	Public Property TranscationDate() As Date
		Get
			Return Me._TranscationDate
		End Get
		Set
			If ((Me._TranscationDate = value)  _
						= false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._PensionTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HirerchyID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HirerchyID() As String
		Get
			Return Me._HirerchyID
		End Get
		Set
			If (String.Equals(Me._HirerchyID, value) = false) Then
				If Me._ChurchDesignationTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHirerchyIDChanging(value)
				Me.SendPropertyChanging
				Me._HirerchyID = value
				Me.SendPropertyChanged("HirerchyID")
				Me.OnHirerchyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailsID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ChurchDetailsID() As String
		Get
			Return Me._ChurchDetailsID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailsID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailsIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailsID = value
				Me.SendPropertyChanged("ChurchDetailsID")
				Me.OnChurchDetailsIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incomeid", DbType:="Int NOT NULL")>  _
	Public Property incomeid() As Integer
		Get
			Return Me._incomeid
		End Get
		Set
			If ((Me._incomeid = value)  _
						= false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnincomeidChanging(value)
				Me.SendPropertyChanging
				Me._incomeid = value
				Me.SendPropertyChanged("incomeid")
				Me.OnincomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(50)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_PensionAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.PensionAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDesignationTable_PensionAccountTable", Storage:="_ChurchDesignationTable", ThisKey:="HirerchyID", OtherKey:="ChurchDesgID", IsForeignKey:=true)>  _
	Public Property ChurchDesignationTable() As ChurchDesignationTable
		Get
			Return Me._ChurchDesignationTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDesignationTable = Me._ChurchDesignationTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDesignationTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDesignationTable.Entity = Nothing
					previousValue.PensionAccountTables.Remove(Me)
				End If
				Me._ChurchDesignationTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionAccountTables.Add(Me)
					Me._HirerchyID = value.ChurchDesgID
				Else
					Me._HirerchyID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDesignationTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_PensionAccountTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailsID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.PensionAccountTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionAccountTables.Add(Me)
					Me._ChurchDetailsID = value.ChurchDetailID
				Else
					Me._ChurchDetailsID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_PensionAccountTable", Storage:="_IncomeTable", ThisKey:="incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.PensionAccountTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionAccountTables.Add(Me)
					Me._incomeid = value.ID
				Else
					Me._incomeid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PensionTable_PensionAccountTable", Storage:="_PensionTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property PensionTable() As PensionTable
		Get
			Return Me._PensionTable.Entity
		End Get
		Set
			Dim previousValue As PensionTable = Me._PensionTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PensionTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PensionTable.Entity = Nothing
					previousValue.PensionAccountTables.Remove(Me)
				End If
				Me._PensionTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionAccountTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PensionTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PensionAccountTable", Storage:="_MembershipTable", ThisKey:="StaffId", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.PensionAccountTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PensionAccountTables.Add(Me)
					Me._StaffId = value.Memberid
				Else
					Me._StaffId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HierarchyPaymentTable")>  _
Partial Public Class HierarchyPaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Titheid As String
	
	Private _Incomeid As Integer
	
	Private _PaymentMethodid As Integer
	
	Private _Amount As Decimal
	
	Private _Datecreated As Date
	
	Private _HierarchyTable As EntityRef(Of HierarchyTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTitheidChanging(value As String)
    End Sub
    Partial Private Sub OnTitheidChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HierarchyTable = CType(Nothing, EntityRef(Of HierarchyTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Titheid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Titheid() As String
		Get
			Return Me._Titheid
		End Get
		Set
			If (String.Equals(Me._Titheid, value) = false) Then
				If Me._HierarchyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTitheidChanging(value)
				Me.SendPropertyChanging
				Me._Titheid = value
				Me.SendPropertyChanged("Titheid")
				Me.OnTitheidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int NOT NULL")>  _
	Public Property Incomeid() As Integer
		Get
			Return Me._Incomeid
		End Get
		Set
			If ((Me._Incomeid = value)  _
						= false) Then
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int NOT NULL")>  _
	Public Property PaymentMethodid() As Integer
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If ((Me._PaymentMethodid = value)  _
						= false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Amount() As Decimal
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HierarchyTable_HierarchyPaymentTable", Storage:="_HierarchyTable", ThisKey:="Titheid", OtherKey:="Titheid", IsForeignKey:=true)>  _
	Public Property HierarchyTable() As HierarchyTable
		Get
			Return Me._HierarchyTable.Entity
		End Get
		Set
			Dim previousValue As HierarchyTable = Me._HierarchyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HierarchyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HierarchyTable.Entity = Nothing
					previousValue.HierarchyPaymentTables.Remove(Me)
				End If
				Me._HierarchyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarchyPaymentTables.Add(Me)
					Me._Titheid = value.Titheid
				Else
					Me._Titheid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("HierarchyTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_HierarchyPaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.HierarchyPaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HierarchyPaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WelfareAccountTable")>  _
Partial Public Class WelfareAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _ExpensesHeadid As String
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Transcationtype As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _StaffId As String
	
	Private _Dateupdated As String
	
	Private _Updatedby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnExpensesHeadidChanging(value As String)
    End Sub
    Partial Private Sub OnExpensesHeadidChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnStaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnStaffIdChanged()
    End Sub
    Partial Private Sub OnDateupdatedChanging(value As String)
    End Sub
    Partial Private Sub OnDateupdatedChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpensesHeadid", DbType:="NVarChar(50)")>  _
	Public Property ExpensesHeadid() As String
		Get
			Return Me._ExpensesHeadid
		End Get
		Set
			If (String.Equals(Me._ExpensesHeadid, value) = false) Then
				Me.OnExpensesHeadidChanging(value)
				Me.SendPropertyChanging
				Me._ExpensesHeadid = value
				Me.SendPropertyChanged("ExpensesHeadid")
				Me.OnExpensesHeadidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(50)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StaffId", DbType:="NVarChar(50)")>  _
	Public Property StaffId() As String
		Get
			Return Me._StaffId
		End Get
		Set
			If (String.Equals(Me._StaffId, value) = false) Then
				Me.OnStaffIdChanging(value)
				Me.SendPropertyChanging
				Me._StaffId = value
				Me.SendPropertyChanged("StaffId")
				Me.OnStaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dateupdated", DbType:="NVarChar(50)")>  _
	Public Property Dateupdated() As String
		Get
			Return Me._Dateupdated
		End Get
		Set
			If (String.Equals(Me._Dateupdated, value) = false) Then
				Me.OnDateupdatedChanging(value)
				Me.SendPropertyChanging
				Me._Dateupdated = value
				Me.SendPropertyChanged("Dateupdated")
				Me.OnDateupdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_WelfareAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.WelfareAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WelfareAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HomeCellZonesTable")>  _
Partial Public Class HomeCellZonesTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ZoneSN As Integer
	
	Private _Zones As String
	
	Private _EnterBy As String
	
	Private _DateCreated As Date
	
	Private _HomeCellZonesPastorsTables As EntitySet(Of HomeCellZonesPastorsTable)
	
	Private _HomecellTables As EntitySet(Of HomecellTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnZoneSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneSNChanged()
    End Sub
    Partial Private Sub OnZonesChanging(value As String)
    End Sub
    Partial Private Sub OnZonesChanged()
    End Sub
    Partial Private Sub OnEnterByChanging(value As String)
    End Sub
    Partial Private Sub OnEnterByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HomeCellZonesPastorsTables = New EntitySet(Of HomeCellZonesPastorsTable)(AddressOf Me.attach_HomeCellZonesPastorsTables, AddressOf Me.detach_HomeCellZonesPastorsTables)
		Me._HomecellTables = New EntitySet(Of HomecellTable)(AddressOf Me.attach_HomecellTables, AddressOf Me.detach_HomecellTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ZoneSN() As Integer
		Get
			Return Me._ZoneSN
		End Get
		Set
			If ((Me._ZoneSN = value)  _
						= false) Then
				Me.OnZoneSNChanging(value)
				Me.SendPropertyChanging
				Me._ZoneSN = value
				Me.SendPropertyChanged("ZoneSN")
				Me.OnZoneSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zones", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Zones() As String
		Get
			Return Me._Zones
		End Get
		Set
			If (String.Equals(Me._Zones, value) = false) Then
				Me.OnZonesChanging(value)
				Me.SendPropertyChanging
				Me._Zones = value
				Me.SendPropertyChanged("Zones")
				Me.OnZonesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnterBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EnterBy() As String
		Get
			Return Me._EnterBy
		End Get
		Set
			If (String.Equals(Me._EnterBy, value) = false) Then
				Me.OnEnterByChanging(value)
				Me.SendPropertyChanging
				Me._EnterBy = value
				Me.SendPropertyChanged("EnterBy")
				Me.OnEnterByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HomeCellZonesTable_HomeCellZonesPastorsTable", Storage:="_HomeCellZonesPastorsTables", ThisKey:="ZoneSN", OtherKey:="ZoneSN")>  _
	Public Property HomeCellZonesPastorsTables() As EntitySet(Of HomeCellZonesPastorsTable)
		Get
			Return Me._HomeCellZonesPastorsTables
		End Get
		Set
			Me._HomeCellZonesPastorsTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HomeCellZonesTable_HomecellTable", Storage:="_HomecellTables", ThisKey:="ZoneSN", OtherKey:="ZoneSN")>  _
	Public Property HomecellTables() As EntitySet(Of HomecellTable)
		Get
			Return Me._HomecellTables
		End Get
		Set
			Me._HomecellTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HomeCellZonesPastorsTables(ByVal entity As HomeCellZonesPastorsTable)
		Me.SendPropertyChanging
		entity.HomeCellZonesTable = Me
	End Sub
	
	Private Sub detach_HomeCellZonesPastorsTables(ByVal entity As HomeCellZonesPastorsTable)
		Me.SendPropertyChanging
		entity.HomeCellZonesTable = Nothing
	End Sub
	
	Private Sub attach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.HomeCellZonesTable = Me
	End Sub
	
	Private Sub detach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.HomeCellZonesTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HomeCellZonesPastorsTable")>  _
Partial Public Class HomeCellZonesPastorsTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _ZoneSN As Integer
	
	Private _PastorType As String
	
	Private _Pastor As String
	
	Private _PastorsNumber As String
	
	Private _EnterBy As String
	
	Private _DateCreated As Date
	
	Private _HomeCellZonesTable As EntityRef(Of HomeCellZonesTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnZoneSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneSNChanged()
    End Sub
    Partial Private Sub OnPastorTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPastorTypeChanged()
    End Sub
    Partial Private Sub OnPastorChanging(value As String)
    End Sub
    Partial Private Sub OnPastorChanged()
    End Sub
    Partial Private Sub OnPastorsNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPastorsNumberChanged()
    End Sub
    Partial Private Sub OnEnterByChanging(value As String)
    End Sub
    Partial Private Sub OnEnterByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HomeCellZonesTable = CType(Nothing, EntityRef(Of HomeCellZonesTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSN", DbType:="Int NOT NULL")>  _
	Public Property ZoneSN() As Integer
		Get
			Return Me._ZoneSN
		End Get
		Set
			If ((Me._ZoneSN = value)  _
						= false) Then
				If Me._HomeCellZonesTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnZoneSNChanging(value)
				Me.SendPropertyChanging
				Me._ZoneSN = value
				Me.SendPropertyChanged("ZoneSN")
				Me.OnZoneSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PastorType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PastorType() As String
		Get
			Return Me._PastorType
		End Get
		Set
			If (String.Equals(Me._PastorType, value) = false) Then
				Me.OnPastorTypeChanging(value)
				Me.SendPropertyChanging
				Me._PastorType = value
				Me.SendPropertyChanged("PastorType")
				Me.OnPastorTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastor", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Pastor() As String
		Get
			Return Me._Pastor
		End Get
		Set
			If (String.Equals(Me._Pastor, value) = false) Then
				Me.OnPastorChanging(value)
				Me.SendPropertyChanging
				Me._Pastor = value
				Me.SendPropertyChanged("Pastor")
				Me.OnPastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PastorsNumber", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PastorsNumber() As String
		Get
			Return Me._PastorsNumber
		End Get
		Set
			If (String.Equals(Me._PastorsNumber, value) = false) Then
				Me.OnPastorsNumberChanging(value)
				Me.SendPropertyChanging
				Me._PastorsNumber = value
				Me.SendPropertyChanged("PastorsNumber")
				Me.OnPastorsNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnterBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EnterBy() As String
		Get
			Return Me._EnterBy
		End Get
		Set
			If (String.Equals(Me._EnterBy, value) = false) Then
				Me.OnEnterByChanging(value)
				Me.SendPropertyChanging
				Me._EnterBy = value
				Me.SendPropertyChanged("EnterBy")
				Me.OnEnterByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HomeCellZonesTable_HomeCellZonesPastorsTable", Storage:="_HomeCellZonesTable", ThisKey:="ZoneSN", OtherKey:="ZoneSN", IsForeignKey:=true)>  _
	Public Property HomeCellZonesTable() As HomeCellZonesTable
		Get
			Return Me._HomeCellZonesTable.Entity
		End Get
		Set
			Dim previousValue As HomeCellZonesTable = Me._HomeCellZonesTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HomeCellZonesTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HomeCellZonesTable.Entity = Nothing
					previousValue.HomeCellZonesPastorsTables.Remove(Me)
				End If
				Me._HomeCellZonesTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HomeCellZonesPastorsTables.Add(Me)
					Me._ZoneSN = value.ZoneSN
				Else
					Me._ZoneSN = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HomeCellZonesTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HomecellTable")>  _
Partial Public Class HomecellTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _id As String
	
	Private _ZoneSN As Integer
	
	Private _Name As String
	
	Private _Adress As String
	
	Private _CellMinister As String
	
	Private _MinsterAdd As String
	
	Private _Phone As String
	
	Private _locationid As String
	
	Private _Celldescription As String
	
	Private _AreaId As String
	
	Private _Updateby As String
	
	Private _ChurchDetailID As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _AreaTable As EntityRef(Of AreaTable)
	
	Private _AreaTable1 As EntityRef(Of AreaTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _HomeCellZonesTable As EntityRef(Of HomeCellZonesTable)
	
	Private _Location As EntityRef(Of Location)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnZoneSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnZoneSNChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAdressChanging(value As String)
    End Sub
    Partial Private Sub OnAdressChanged()
    End Sub
    Partial Private Sub OnCellMinisterChanging(value As String)
    End Sub
    Partial Private Sub OnCellMinisterChanged()
    End Sub
    Partial Private Sub OnMinsterAddChanging(value As String)
    End Sub
    Partial Private Sub OnMinsterAddChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnlocationidChanging(value As String)
    End Sub
    Partial Private Sub OnlocationidChanged()
    End Sub
    Partial Private Sub OnCelldescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCelldescriptionChanged()
    End Sub
    Partial Private Sub OnAreaIdChanging(value As String)
    End Sub
    Partial Private Sub OnAreaIdChanged()
    End Sub
    Partial Private Sub OnUpdatebyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatebyChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AreaTable = CType(Nothing, EntityRef(Of AreaTable))
		Me._AreaTable1 = CType(Nothing, EntityRef(Of AreaTable))
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._HomeCellZonesTable = CType(Nothing, EntityRef(Of HomeCellZonesTable))
		Me._Location = CType(Nothing, EntityRef(Of Location))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ZoneSN", DbType:="Int NOT NULL")>  _
	Public Property ZoneSN() As Integer
		Get
			Return Me._ZoneSN
		End Get
		Set
			If ((Me._ZoneSN = value)  _
						= false) Then
				If Me._HomeCellZonesTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnZoneSNChanging(value)
				Me.SendPropertyChanging
				Me._ZoneSN = value
				Me.SendPropertyChanged("ZoneSN")
				Me.OnZoneSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Adress", DbType:="NVarChar(MAX)")>  _
	Public Property Adress() As String
		Get
			Return Me._Adress
		End Get
		Set
			If (String.Equals(Me._Adress, value) = false) Then
				Me.OnAdressChanging(value)
				Me.SendPropertyChanging
				Me._Adress = value
				Me.SendPropertyChanged("Adress")
				Me.OnAdressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellMinister", DbType:="NVarChar(50)")>  _
	Public Property CellMinister() As String
		Get
			Return Me._CellMinister
		End Get
		Set
			If (String.Equals(Me._CellMinister, value) = false) Then
				Me.OnCellMinisterChanging(value)
				Me.SendPropertyChanging
				Me._CellMinister = value
				Me.SendPropertyChanged("CellMinister")
				Me.OnCellMinisterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinsterAdd", DbType:="NVarChar(MAX)")>  _
	Public Property MinsterAdd() As String
		Get
			Return Me._MinsterAdd
		End Get
		Set
			If (String.Equals(Me._MinsterAdd, value) = false) Then
				Me.OnMinsterAddChanging(value)
				Me.SendPropertyChanging
				Me._MinsterAdd = value
				Me.SendPropertyChanged("MinsterAdd")
				Me.OnMinsterAddChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_locationid", DbType:="NVarChar(50)")>  _
	Public Property locationid() As String
		Get
			Return Me._locationid
		End Get
		Set
			If (String.Equals(Me._locationid, value) = false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnlocationidChanging(value)
				Me.SendPropertyChanging
				Me._locationid = value
				Me.SendPropertyChanged("locationid")
				Me.OnlocationidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celldescription", DbType:="NVarChar(50)")>  _
	Public Property Celldescription() As String
		Get
			Return Me._Celldescription
		End Get
		Set
			If (String.Equals(Me._Celldescription, value) = false) Then
				Me.OnCelldescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Celldescription = value
				Me.SendPropertyChanged("Celldescription")
				Me.OnCelldescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaId", DbType:="NVarChar(50)")>  _
	Public Property AreaId() As String
		Get
			Return Me._AreaId
		End Get
		Set
			If (String.Equals(Me._AreaId, value) = false) Then
				If (Me._AreaTable.HasLoadedOrAssignedValue OrElse Me._AreaTable1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAreaIdChanging(value)
				Me.SendPropertyChanging
				Me._AreaId = value
				Me.SendPropertyChanged("AreaId")
				Me.OnAreaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updateby", DbType:="NVarChar(50)")>  _
	Public Property Updateby() As String
		Get
			Return Me._Updateby
		End Get
		Set
			If (String.Equals(Me._Updateby, value) = false) Then
				Me.OnUpdatebyChanging(value)
				Me.SendPropertyChanging
				Me._Updateby = value
				Me.SendPropertyChanged("Updateby")
				Me.OnUpdatebyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50)")>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaTable_HomecellTable", Storage:="_AreaTable", ThisKey:="AreaId", OtherKey:="Areaid", IsForeignKey:=true)>  _
	Public Property AreaTable() As AreaTable
		Get
			Return Me._AreaTable.Entity
		End Get
		Set
			Dim previousValue As AreaTable = Me._AreaTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AreaTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AreaTable.Entity = Nothing
					previousValue.HomecellTables.Remove(Me)
				End If
				Me._AreaTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HomecellTables.Add(Me)
					Me._AreaId = value.Areaid
				Else
					Me._AreaId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AreaTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaTable_HomecellTable1", Storage:="_AreaTable1", ThisKey:="AreaId", OtherKey:="Areaid", IsForeignKey:=true)>  _
	Public Property AreaTable1() As AreaTable
		Get
			Return Me._AreaTable1.Entity
		End Get
		Set
			Dim previousValue As AreaTable = Me._AreaTable1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AreaTable1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AreaTable1.Entity = Nothing
					previousValue.HomecellTables1.Remove(Me)
				End If
				Me._AreaTable1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HomecellTables1.Add(Me)
					Me._AreaId = value.Areaid
				Else
					Me._AreaId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AreaTable1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_HomecellTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.HomecellTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HomecellTables.Add(Me)
					Me._ChurchDetailID = value.ChurchDetailID
				Else
					Me._ChurchDetailID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HomeCellZonesTable_HomecellTable", Storage:="_HomeCellZonesTable", ThisKey:="ZoneSN", OtherKey:="ZoneSN", IsForeignKey:=true)>  _
	Public Property HomeCellZonesTable() As HomeCellZonesTable
		Get
			Return Me._HomeCellZonesTable.Entity
		End Get
		Set
			Dim previousValue As HomeCellZonesTable = Me._HomeCellZonesTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HomeCellZonesTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HomeCellZonesTable.Entity = Nothing
					previousValue.HomecellTables.Remove(Me)
				End If
				Me._HomeCellZonesTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HomecellTables.Add(Me)
					Me._ZoneSN = value.ZoneSN
				Else
					Me._ZoneSN = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HomeCellZonesTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_HomecellTable", Storage:="_Location", ThisKey:="locationid", OtherKey:="Locationid", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.HomecellTables.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HomecellTables.Add(Me)
					Me._locationid = value.Locationid
				Else
					Me._locationid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FamilyTable")>  _
Partial Public Class FamilyTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Familyid As String
	
	Private _FamilyName As String
	
	Private _FamilyMiddleName As String
	
	Private _FamilyFirstName As String
	
	Private _DateCreated As Date
	
	Private _FamilyImageTables As EntitySet(Of FamilyImageTable)
	
	Private _MembershipTables As EntitySet(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnFamilyidChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyidChanged()
    End Sub
    Partial Private Sub OnFamilyNameChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyNameChanged()
    End Sub
    Partial Private Sub OnFamilyMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyMiddleNameChanged()
    End Sub
    Partial Private Sub OnFamilyFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyFirstNameChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FamilyImageTables = New EntitySet(Of FamilyImageTable)(AddressOf Me.attach_FamilyImageTables, AddressOf Me.detach_FamilyImageTables)
		Me._MembershipTables = New EntitySet(Of MembershipTable)(AddressOf Me.attach_MembershipTables, AddressOf Me.detach_MembershipTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Familyid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Familyid() As String
		Get
			Return Me._Familyid
		End Get
		Set
			If (String.Equals(Me._Familyid, value) = false) Then
				Me.OnFamilyidChanging(value)
				Me.SendPropertyChanging
				Me._Familyid = value
				Me.SendPropertyChanged("Familyid")
				Me.OnFamilyidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FamilyName() As String
		Get
			Return Me._FamilyName
		End Get
		Set
			If (String.Equals(Me._FamilyName, value) = false) Then
				Me.OnFamilyNameChanging(value)
				Me.SendPropertyChanging
				Me._FamilyName = value
				Me.SendPropertyChanged("FamilyName")
				Me.OnFamilyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyMiddleName", DbType:="NVarChar(50)")>  _
	Public Property FamilyMiddleName() As String
		Get
			Return Me._FamilyMiddleName
		End Get
		Set
			If (String.Equals(Me._FamilyMiddleName, value) = false) Then
				Me.OnFamilyMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._FamilyMiddleName = value
				Me.SendPropertyChanged("FamilyMiddleName")
				Me.OnFamilyMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyFirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FamilyFirstName() As String
		Get
			Return Me._FamilyFirstName
		End Get
		Set
			If (String.Equals(Me._FamilyFirstName, value) = false) Then
				Me.OnFamilyFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FamilyFirstName = value
				Me.SendPropertyChanged("FamilyFirstName")
				Me.OnFamilyFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FamilyTable_FamilyImageTable", Storage:="_FamilyImageTables", ThisKey:="Familyid", OtherKey:="FamilyID")>  _
	Public Property FamilyImageTables() As EntitySet(Of FamilyImageTable)
		Get
			Return Me._FamilyImageTables
		End Get
		Set
			Me._FamilyImageTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FamilyTable_MembershipTable", Storage:="_MembershipTables", ThisKey:="Familyid", OtherKey:="FamilyID")>  _
	Public Property MembershipTables() As EntitySet(Of MembershipTable)
		Get
			Return Me._MembershipTables
		End Get
		Set
			Me._MembershipTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FamilyImageTables(ByVal entity As FamilyImageTable)
		Me.SendPropertyChanging
		entity.FamilyTable = Me
	End Sub
	
	Private Sub detach_FamilyImageTables(ByVal entity As FamilyImageTable)
		Me.SendPropertyChanging
		entity.FamilyTable = Nothing
	End Sub
	
	Private Sub attach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.FamilyTable = Me
	End Sub
	
	Private Sub detach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.FamilyTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SermonTable")>  _
Partial Public Class SermonTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Sermonid As String
	
	Private _SermonIdentifier As String
	
	Private _SermonTitle As String
	
	Private _Scripture As String
	
	Private _Pastor As String
	
	Private _Duration As String
	
	Private _SermonDvD As System.Nullable(Of Boolean)
	
	Private _SermonAudio As System.Nullable(Of Boolean)
	
	Private _SermonVideo As System.Nullable(Of Boolean)
	
	Private _SermonMp3 As System.Nullable(Of Boolean)
	
	Private _Keyword As String
	
	Private _Createdby As String
	
	Private _Churchid As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _Date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnSermonidChanging(value As String)
    End Sub
    Partial Private Sub OnSermonidChanged()
    End Sub
    Partial Private Sub OnSermonIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnSermonIdentifierChanged()
    End Sub
    Partial Private Sub OnSermonTitleChanging(value As String)
    End Sub
    Partial Private Sub OnSermonTitleChanged()
    End Sub
    Partial Private Sub OnScriptureChanging(value As String)
    End Sub
    Partial Private Sub OnScriptureChanged()
    End Sub
    Partial Private Sub OnPastorChanging(value As String)
    End Sub
    Partial Private Sub OnPastorChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As String)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnSermonDvDChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSermonDvDChanged()
    End Sub
    Partial Private Sub OnSermonAudioChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSermonAudioChanged()
    End Sub
    Partial Private Sub OnSermonVideoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSermonVideoChanged()
    End Sub
    Partial Private Sub OnSermonMp3Changing(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSermonMp3Changed()
    End Sub
    Partial Private Sub OnKeywordChanging(value As String)
    End Sub
    Partial Private Sub OnKeywordChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sermonid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Sermonid() As String
		Get
			Return Me._Sermonid
		End Get
		Set
			If (String.Equals(Me._Sermonid, value) = false) Then
				Me.OnSermonidChanging(value)
				Me.SendPropertyChanging
				Me._Sermonid = value
				Me.SendPropertyChanged("Sermonid")
				Me.OnSermonidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SermonIdentifier", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SermonIdentifier() As String
		Get
			Return Me._SermonIdentifier
		End Get
		Set
			If (String.Equals(Me._SermonIdentifier, value) = false) Then
				Me.OnSermonIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._SermonIdentifier = value
				Me.SendPropertyChanged("SermonIdentifier")
				Me.OnSermonIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SermonTitle", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property SermonTitle() As String
		Get
			Return Me._SermonTitle
		End Get
		Set
			If (String.Equals(Me._SermonTitle, value) = false) Then
				Me.OnSermonTitleChanging(value)
				Me.SendPropertyChanging
				Me._SermonTitle = value
				Me.SendPropertyChanged("SermonTitle")
				Me.OnSermonTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Scripture", DbType:="NVarChar(MAX)")>  _
	Public Property Scripture() As String
		Get
			Return Me._Scripture
		End Get
		Set
			If (String.Equals(Me._Scripture, value) = false) Then
				Me.OnScriptureChanging(value)
				Me.SendPropertyChanging
				Me._Scripture = value
				Me.SendPropertyChanged("Scripture")
				Me.OnScriptureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastor", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Pastor() As String
		Get
			Return Me._Pastor
		End Get
		Set
			If (String.Equals(Me._Pastor, value) = false) Then
				Me.OnPastorChanging(value)
				Me.SendPropertyChanging
				Me._Pastor = value
				Me.SendPropertyChanged("Pastor")
				Me.OnPastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Duration() As String
		Get
			Return Me._Duration
		End Get
		Set
			If (String.Equals(Me._Duration, value) = false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SermonDvD", DbType:="Bit")>  _
	Public Property SermonDvD() As System.Nullable(Of Boolean)
		Get
			Return Me._SermonDvD
		End Get
		Set
			If (Me._SermonDvD.Equals(value) = false) Then
				Me.OnSermonDvDChanging(value)
				Me.SendPropertyChanging
				Me._SermonDvD = value
				Me.SendPropertyChanged("SermonDvD")
				Me.OnSermonDvDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SermonAudio", DbType:="Bit")>  _
	Public Property SermonAudio() As System.Nullable(Of Boolean)
		Get
			Return Me._SermonAudio
		End Get
		Set
			If (Me._SermonAudio.Equals(value) = false) Then
				Me.OnSermonAudioChanging(value)
				Me.SendPropertyChanging
				Me._SermonAudio = value
				Me.SendPropertyChanged("SermonAudio")
				Me.OnSermonAudioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SermonVideo", DbType:="Bit")>  _
	Public Property SermonVideo() As System.Nullable(Of Boolean)
		Get
			Return Me._SermonVideo
		End Get
		Set
			If (Me._SermonVideo.Equals(value) = false) Then
				Me.OnSermonVideoChanging(value)
				Me.SendPropertyChanging
				Me._SermonVideo = value
				Me.SendPropertyChanged("SermonVideo")
				Me.OnSermonVideoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SermonMp3", DbType:="Bit")>  _
	Public Property SermonMp3() As System.Nullable(Of Boolean)
		Get
			Return Me._SermonMp3
		End Get
		Set
			If (Me._SermonMp3.Equals(value) = false) Then
				Me.OnSermonMp3Changing(value)
				Me.SendPropertyChanging
				Me._SermonMp3 = value
				Me.SendPropertyChanged("SermonMp3")
				Me.OnSermonMp3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Keyword", DbType:="NVarChar(MAX)")>  _
	Public Property Keyword() As String
		Get
			Return Me._Keyword
		End Get
		Set
			If (String.Equals(Me._Keyword, value) = false) Then
				Me.OnKeywordChanging(value)
				Me.SendPropertyChanging
				Me._Keyword = value
				Me.SendPropertyChanged("Keyword")
				Me.OnKeywordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Location")>  _
Partial Public Class Location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Locationid As String
	
	Private _Name As String
	
	Private _Updatedby As String
	
	Private _Datecreated As Date
	
	Private _AreaTables As EntitySet(Of AreaTable)
	
	Private _ChurchDetailTables As EntitySet(Of ChurchDetailTable)
	
	Private _HomecellTables As EntitySet(Of HomecellTable)
	
	Private _MembershipTables As EntitySet(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnLocationidChanging(value As String)
    End Sub
    Partial Private Sub OnLocationidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AreaTables = New EntitySet(Of AreaTable)(AddressOf Me.attach_AreaTables, AddressOf Me.detach_AreaTables)
		Me._ChurchDetailTables = New EntitySet(Of ChurchDetailTable)(AddressOf Me.attach_ChurchDetailTables, AddressOf Me.detach_ChurchDetailTables)
		Me._HomecellTables = New EntitySet(Of HomecellTable)(AddressOf Me.attach_HomecellTables, AddressOf Me.detach_HomecellTables)
		Me._MembershipTables = New EntitySet(Of MembershipTable)(AddressOf Me.attach_MembershipTables, AddressOf Me.detach_MembershipTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locationid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Locationid() As String
		Get
			Return Me._Locationid
		End Get
		Set
			If (String.Equals(Me._Locationid, value) = false) Then
				Me.OnLocationidChanging(value)
				Me.SendPropertyChanging
				Me._Locationid = value
				Me.SendPropertyChanged("Locationid")
				Me.OnLocationidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date NOT NULL")>  _
	Public Property Datecreated() As Date
		Get
			Return Me._Datecreated
		End Get
		Set
			If ((Me._Datecreated = value)  _
						= false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_AreaTable", Storage:="_AreaTables", ThisKey:="Locationid", OtherKey:="Locationid")>  _
	Public Property AreaTables() As EntitySet(Of AreaTable)
		Get
			Return Me._AreaTables
		End Get
		Set
			Me._AreaTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_ChurchDetailTable", Storage:="_ChurchDetailTables", ThisKey:="Locationid", OtherKey:="Locationid")>  _
	Public Property ChurchDetailTables() As EntitySet(Of ChurchDetailTable)
		Get
			Return Me._ChurchDetailTables
		End Get
		Set
			Me._ChurchDetailTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_HomecellTable", Storage:="_HomecellTables", ThisKey:="Locationid", OtherKey:="locationid")>  _
	Public Property HomecellTables() As EntitySet(Of HomecellTable)
		Get
			Return Me._HomecellTables
		End Get
		Set
			Me._HomecellTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_MembershipTable", Storage:="_MembershipTables", ThisKey:="Locationid", OtherKey:="Locationid")>  _
	Public Property MembershipTables() As EntitySet(Of MembershipTable)
		Get
			Return Me._MembershipTables
		End Get
		Set
			Me._MembershipTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AreaTables(ByVal entity As AreaTable)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_AreaTables(ByVal entity As AreaTable)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_ChurchDetailTables(ByVal entity As ChurchDetailTable)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_HomecellTables(ByVal entity As HomecellTable)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
	
	Private Sub attach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.Location = Me
	End Sub
	
	Private Sub detach_MembershipTables(ByVal entity As MembershipTable)
		Me.SendPropertyChanging
		entity.Location = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DedicationTable")>  _
Partial Public Class DedicationTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _DedicationId As String
	
	Private _FFirstname As String
	
	Private _Flastname As String
	
	Private _Fphone As String
	
	Private _MFirstname As String
	
	Private _Mlastname As String
	
	Private _MPhone As String
	
	Private _BFirstname As String
	
	Private _BOtherNames As String
	
	Private _BLastname As String
	
	Private _Gender As String
	
	Private _Month As String
	
	Private _ParentAddress As String
	
	Private _DOB As System.Nullable(Of Date)
	
	Private _DateDedication As System.Nullable(Of Date)
	
	Private _Placeofbirth As String
	
	Private _Pastor As String
	
	Private _Createdby As String
	
	Private _Churchid As String
	
	Private _datecreated As System.Nullable(Of Date)
	
	Private _DedicationImageTables As EntitySet(Of DedicationImageTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnDedicationIdChanging(value As String)
    End Sub
    Partial Private Sub OnDedicationIdChanged()
    End Sub
    Partial Private Sub OnFFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnFFirstnameChanged()
    End Sub
    Partial Private Sub OnFlastnameChanging(value As String)
    End Sub
    Partial Private Sub OnFlastnameChanged()
    End Sub
    Partial Private Sub OnFphoneChanging(value As String)
    End Sub
    Partial Private Sub OnFphoneChanged()
    End Sub
    Partial Private Sub OnMFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnMFirstnameChanged()
    End Sub
    Partial Private Sub OnMlastnameChanging(value As String)
    End Sub
    Partial Private Sub OnMlastnameChanged()
    End Sub
    Partial Private Sub OnMPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnMPhoneChanged()
    End Sub
    Partial Private Sub OnBFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnBFirstnameChanged()
    End Sub
    Partial Private Sub OnBOtherNamesChanging(value As String)
    End Sub
    Partial Private Sub OnBOtherNamesChanged()
    End Sub
    Partial Private Sub OnBLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnBLastnameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    Partial Private Sub OnParentAddressChanging(value As String)
    End Sub
    Partial Private Sub OnParentAddressChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnDateDedicationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateDedicationChanged()
    End Sub
    Partial Private Sub OnPlaceofbirthChanging(value As String)
    End Sub
    Partial Private Sub OnPlaceofbirthChanged()
    End Sub
    Partial Private Sub OnPastorChanging(value As String)
    End Sub
    Partial Private Sub OnPastorChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OndatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DedicationImageTables = New EntitySet(Of DedicationImageTable)(AddressOf Me.attach_DedicationImageTables, AddressOf Me.detach_DedicationImageTables)
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DedicationId", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DedicationId() As String
		Get
			Return Me._DedicationId
		End Get
		Set
			If (String.Equals(Me._DedicationId, value) = false) Then
				Me.OnDedicationIdChanging(value)
				Me.SendPropertyChanging
				Me._DedicationId = value
				Me.SendPropertyChanged("DedicationId")
				Me.OnDedicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FFirstname", DbType:="NVarChar(50)")>  _
	Public Property FFirstname() As String
		Get
			Return Me._FFirstname
		End Get
		Set
			If (String.Equals(Me._FFirstname, value) = false) Then
				Me.OnFFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._FFirstname = value
				Me.SendPropertyChanged("FFirstname")
				Me.OnFFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Flastname", DbType:="NVarChar(50)")>  _
	Public Property Flastname() As String
		Get
			Return Me._Flastname
		End Get
		Set
			If (String.Equals(Me._Flastname, value) = false) Then
				Me.OnFlastnameChanging(value)
				Me.SendPropertyChanging
				Me._Flastname = value
				Me.SendPropertyChanged("Flastname")
				Me.OnFlastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fphone", DbType:="NVarChar(50)")>  _
	Public Property Fphone() As String
		Get
			Return Me._Fphone
		End Get
		Set
			If (String.Equals(Me._Fphone, value) = false) Then
				Me.OnFphoneChanging(value)
				Me.SendPropertyChanging
				Me._Fphone = value
				Me.SendPropertyChanged("Fphone")
				Me.OnFphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFirstname", DbType:="NVarChar(50)")>  _
	Public Property MFirstname() As String
		Get
			Return Me._MFirstname
		End Get
		Set
			If (String.Equals(Me._MFirstname, value) = false) Then
				Me.OnMFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._MFirstname = value
				Me.SendPropertyChanged("MFirstname")
				Me.OnMFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mlastname", DbType:="NVarChar(50)")>  _
	Public Property Mlastname() As String
		Get
			Return Me._Mlastname
		End Get
		Set
			If (String.Equals(Me._Mlastname, value) = false) Then
				Me.OnMlastnameChanging(value)
				Me.SendPropertyChanging
				Me._Mlastname = value
				Me.SendPropertyChanged("Mlastname")
				Me.OnMlastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MPhone", DbType:="NVarChar(50)")>  _
	Public Property MPhone() As String
		Get
			Return Me._MPhone
		End Get
		Set
			If (String.Equals(Me._MPhone, value) = false) Then
				Me.OnMPhoneChanging(value)
				Me.SendPropertyChanging
				Me._MPhone = value
				Me.SendPropertyChanged("MPhone")
				Me.OnMPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BFirstname", DbType:="NVarChar(MAX)")>  _
	Public Property BFirstname() As String
		Get
			Return Me._BFirstname
		End Get
		Set
			If (String.Equals(Me._BFirstname, value) = false) Then
				Me.OnBFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._BFirstname = value
				Me.SendPropertyChanged("BFirstname")
				Me.OnBFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BOtherNames", DbType:="NVarChar(MAX)")>  _
	Public Property BOtherNames() As String
		Get
			Return Me._BOtherNames
		End Get
		Set
			If (String.Equals(Me._BOtherNames, value) = false) Then
				Me.OnBOtherNamesChanging(value)
				Me.SendPropertyChanging
				Me._BOtherNames = value
				Me.SendPropertyChanged("BOtherNames")
				Me.OnBOtherNamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BLastname", DbType:="NVarChar(50)")>  _
	Public Property BLastname() As String
		Get
			Return Me._BLastname
		End Get
		Set
			If (String.Equals(Me._BLastname, value) = false) Then
				Me.OnBLastnameChanging(value)
				Me.SendPropertyChanging
				Me._BLastname = value
				Me.SendPropertyChanged("BLastname")
				Me.OnBLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50)")>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentAddress", DbType:="NVarChar(50)")>  _
	Public Property ParentAddress() As String
		Get
			Return Me._ParentAddress
		End Get
		Set
			If (String.Equals(Me._ParentAddress, value) = false) Then
				Me.OnParentAddressChanging(value)
				Me.SendPropertyChanging
				Me._ParentAddress = value
				Me.SendPropertyChanged("ParentAddress")
				Me.OnParentAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="Date")>  _
	Public Property DOB() As System.Nullable(Of Date)
		Get
			Return Me._DOB
		End Get
		Set
			If (Me._DOB.Equals(value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateDedication", DbType:="Date")>  _
	Public Property DateDedication() As System.Nullable(Of Date)
		Get
			Return Me._DateDedication
		End Get
		Set
			If (Me._DateDedication.Equals(value) = false) Then
				Me.OnDateDedicationChanging(value)
				Me.SendPropertyChanging
				Me._DateDedication = value
				Me.SendPropertyChanged("DateDedication")
				Me.OnDateDedicationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Placeofbirth", DbType:="NVarChar(MAX)")>  _
	Public Property Placeofbirth() As String
		Get
			Return Me._Placeofbirth
		End Get
		Set
			If (String.Equals(Me._Placeofbirth, value) = false) Then
				Me.OnPlaceofbirthChanging(value)
				Me.SendPropertyChanging
				Me._Placeofbirth = value
				Me.SendPropertyChanged("Placeofbirth")
				Me.OnPlaceofbirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pastor", DbType:="NVarChar(50)")>  _
	Public Property Pastor() As String
		Get
			Return Me._Pastor
		End Get
		Set
			If (String.Equals(Me._Pastor, value) = false) Then
				Me.OnPastorChanging(value)
				Me.SendPropertyChanging
				Me._Pastor = value
				Me.SendPropertyChanged("Pastor")
				Me.OnPastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_datecreated", DbType:="Date")>  _
	Public Property datecreated() As System.Nullable(Of Date)
		Get
			Return Me._datecreated
		End Get
		Set
			If (Me._datecreated.Equals(value) = false) Then
				Me.OndatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._datecreated = value
				Me.SendPropertyChanged("datecreated")
				Me.OndatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DedicationTable_DedicationImageTable", Storage:="_DedicationImageTables", ThisKey:="DedicationId", OtherKey:="DedicationID")>  _
	Public Property DedicationImageTables() As EntitySet(Of DedicationImageTable)
		Get
			Return Me._DedicationImageTables
		End Get
		Set
			Me._DedicationImageTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_DedicationTable", Storage:="_ChurchDetailTable", ThisKey:="Churchid", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.DedicationTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DedicationTables.Add(Me)
					Me._Churchid = value.ChurchDetailID
				Else
					Me._Churchid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DedicationImageTables(ByVal entity As DedicationImageTable)
		Me.SendPropertyChanging
		entity.DedicationTable = Me
	End Sub
	
	Private Sub detach_DedicationImageTables(ByVal entity As DedicationImageTable)
		Me.SendPropertyChanging
		entity.DedicationTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MonthTable")>  _
Partial Public Class MonthTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Monthvalue As Integer
	
	Private _Month As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnMonthvalueChanging(value As Integer)
    End Sub
    Partial Private Sub OnMonthvalueChanged()
    End Sub
    Partial Private Sub OnMonthChanging(value As String)
    End Sub
    Partial Private Sub OnMonthChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Monthvalue", DbType:="Int NOT NULL")>  _
	Public Property Monthvalue() As Integer
		Get
			Return Me._Monthvalue
		End Get
		Set
			If ((Me._Monthvalue = value)  _
						= false) Then
				Me.OnMonthvalueChanging(value)
				Me.SendPropertyChanging
				Me._Monthvalue = value
				Me.SendPropertyChanged("Monthvalue")
				Me.OnMonthvalueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Month", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Month() As String
		Get
			Return Me._Month
		End Get
		Set
			If (String.Equals(Me._Month, value) = false) Then
				Me.OnMonthChanging(value)
				Me.SendPropertyChanging
				Me._Month = value
				Me.SendPropertyChanged("Month")
				Me.OnMonthChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChildrenImageTable")>  _
Partial Public Class ChildrenImageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Childrenid As String
	
	Private _ScanName As String
	
	Private _ScanType As String
	
	Private _SourceDocumentScan As System.Data.Linq.Binary
	
	Private _ChildrenTable As EntityRef(Of ChildrenTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnChildrenidChanging(value As String)
    End Sub
    Partial Private Sub OnChildrenidChanged()
    End Sub
    Partial Private Sub OnScanNameChanging(value As String)
    End Sub
    Partial Private Sub OnScanNameChanged()
    End Sub
    Partial Private Sub OnScanTypeChanging(value As String)
    End Sub
    Partial Private Sub OnScanTypeChanged()
    End Sub
    Partial Private Sub OnSourceDocumentScanChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSourceDocumentScanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChildrenTable = CType(Nothing, EntityRef(Of ChildrenTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Childrenid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Childrenid() As String
		Get
			Return Me._Childrenid
		End Get
		Set
			If (String.Equals(Me._Childrenid, value) = false) Then
				If Me._ChildrenTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChildrenidChanging(value)
				Me.SendPropertyChanging
				Me._Childrenid = value
				Me.SendPropertyChanged("Childrenid")
				Me.OnChildrenidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanName", DbType:="NVarChar(50)")>  _
	Public Property ScanName() As String
		Get
			Return Me._ScanName
		End Get
		Set
			If (String.Equals(Me._ScanName, value) = false) Then
				Me.OnScanNameChanging(value)
				Me.SendPropertyChanging
				Me._ScanName = value
				Me.SendPropertyChanged("ScanName")
				Me.OnScanNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScanType", DbType:="NVarChar(50)")>  _
	Public Property ScanType() As String
		Get
			Return Me._ScanType
		End Get
		Set
			If (String.Equals(Me._ScanType, value) = false) Then
				Me.OnScanTypeChanging(value)
				Me.SendPropertyChanging
				Me._ScanType = value
				Me.SendPropertyChanged("ScanType")
				Me.OnScanTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDocumentScan", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SourceDocumentScan() As System.Data.Linq.Binary
		Get
			Return Me._SourceDocumentScan
		End Get
		Set
			If (Object.Equals(Me._SourceDocumentScan, value) = false) Then
				Me.OnSourceDocumentScanChanging(value)
				Me.SendPropertyChanging
				Me._SourceDocumentScan = value
				Me.SendPropertyChanged("SourceDocumentScan")
				Me.OnSourceDocumentScanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChildrenTable_ChildrenImageTable", Storage:="_ChildrenTable", ThisKey:="Childrenid", OtherKey:="Childrenid", IsForeignKey:=true)>  _
	Public Property ChildrenTable() As ChildrenTable
		Get
			Return Me._ChildrenTable.Entity
		End Get
		Set
			Dim previousValue As ChildrenTable = Me._ChildrenTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChildrenTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChildrenTable.Entity = Nothing
					previousValue.ChildrenImageTables.Remove(Me)
				End If
				Me._ChildrenTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChildrenImageTables.Add(Me)
					Me._Childrenid = value.Childrenid
				Else
					Me._Childrenid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChildrenTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FamilyImageTable")>  _
Partial Public Class FamilyImageTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _FamilyID As String
	
	Private _MemberChildID As String
	
	Private _FullName As String
	
	Private _SourceDocumentScan As System.Data.Linq.Binary
	
	Private _FamilyTable As EntityRef(Of FamilyTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFamilyIDChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyIDChanged()
    End Sub
    Partial Private Sub OnMemberChildIDChanging(value As String)
    End Sub
    Partial Private Sub OnMemberChildIDChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnSourceDocumentScanChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSourceDocumentScanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FamilyTable = CType(Nothing, EntityRef(Of FamilyTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FamilyID() As String
		Get
			Return Me._FamilyID
		End Get
		Set
			If (String.Equals(Me._FamilyID, value) = false) Then
				If Me._FamilyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFamilyIDChanging(value)
				Me.SendPropertyChanging
				Me._FamilyID = value
				Me.SendPropertyChanged("FamilyID")
				Me.OnFamilyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberChildID", DbType:="NVarChar(50)")>  _
	Public Property MemberChildID() As String
		Get
			Return Me._MemberChildID
		End Get
		Set
			If (String.Equals(Me._MemberChildID, value) = false) Then
				Me.OnMemberChildIDChanging(value)
				Me.SendPropertyChanging
				Me._MemberChildID = value
				Me.SendPropertyChanged("MemberChildID")
				Me.OnMemberChildIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceDocumentScan", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SourceDocumentScan() As System.Data.Linq.Binary
		Get
			Return Me._SourceDocumentScan
		End Get
		Set
			If (Object.Equals(Me._SourceDocumentScan, value) = false) Then
				Me.OnSourceDocumentScanChanging(value)
				Me.SendPropertyChanging
				Me._SourceDocumentScan = value
				Me.SendPropertyChanged("SourceDocumentScan")
				Me.OnSourceDocumentScanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FamilyTable_FamilyImageTable", Storage:="_FamilyTable", ThisKey:="FamilyID", OtherKey:="Familyid", IsForeignKey:=true)>  _
	Public Property FamilyTable() As FamilyTable
		Get
			Return Me._FamilyTable.Entity
		End Get
		Set
			Dim previousValue As FamilyTable = Me._FamilyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FamilyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FamilyTable.Entity = Nothing
					previousValue.FamilyImageTables.Remove(Me)
				End If
				Me._FamilyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FamilyImageTables.Add(Me)
					Me._FamilyID = value.Familyid
				Else
					Me._FamilyID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FamilyTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MembershipTable")>  _
Partial Public Class MembershipTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _FamilyID As String
	
	Private _Memberid As String
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Gender As String
	
	Private _DOB As System.Nullable(Of Date)
	
	Private _Address As String
	
	Private _StateofOrgin As String
	
	Private _Authority As String
	
	Private _Phone1 As String
	
	Private _Phone2 As String
	
	Private _Occupation As String
	
	Private _Email As String
	
	Private _MartialStatus As String
	
	Private _MarriageAniversity As String
	
	Private _Nationality As String
	
	Private _Language1 As String
	
	Private _Language2 As String
	
	Private _Languag3 As String
	
	Private _Title As String
	
	Private _TitheId As System.Nullable(Of Integer)
	
	Private _DateBaptism As String
	
	Private _DateConverted As String
	
	Private _Locationid As String
	
	Private _ChurchDetailID As String
	
	Private _MemberssGroup As System.Nullable(Of Integer)
	
	Private _Createdby As String
	
	Private _Updatedby As String
	
	Private _Town As String
	
	Private _Area As String
	
	Private _HomeCellAddress As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _UserTables As EntitySet(Of UserTable)
	
	Private _AccountRecivableTables As EntitySet(Of AccountRecivableTable)
	
	Private _Other_incomeAccountTables As EntitySet(Of Other_incomeAccountTable)
	
	Private _MemberImageTables As EntitySet(Of MemberImageTable)
	
	Private _AuthenticalTables As EntitySet(Of AuthenticalTable)
	
	Private _MembersUnits As EntitySet(Of MembersUnit)
	
	Private _PastorsTitheTables As EntitySet(Of PastorsTitheTable)
	
	Private _PastorsAccountTables As EntitySet(Of PastorsAccountTable)
	
	Private _HierarchyTables As EntitySet(Of HierarchyTable)
	
	Private _HierarcyAccountTables As EntitySet(Of HierarcyAccountTable)
	
	Private _PensionTables As EntitySet(Of PensionTable)
	
	Private _PensionAccountTables As EntitySet(Of PensionAccountTable)
	
	Private _LoanHeadTables As EntitySet(Of LoanHeadTable)
	
	Private _AreaTable As EntityRef(Of AreaTable)
	
	Private _ChurchDetailTable As EntityRef(Of ChurchDetailTable)
	
	Private _FamilyTable As EntityRef(Of FamilyTable)
	
	Private _Location As EntityRef(Of Location)
	
	Private _MembersGroup As EntityRef(Of MembersGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnFamilyIDChanging(value As String)
    End Sub
    Partial Private Sub OnFamilyIDChanged()
    End Sub
    Partial Private Sub OnMemberidChanging(value As String)
    End Sub
    Partial Private Sub OnMemberidChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnStateofOrginChanging(value As String)
    End Sub
    Partial Private Sub OnStateofOrginChanged()
    End Sub
    Partial Private Sub OnAuthorityChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorityChanged()
    End Sub
    Partial Private Sub OnPhone1Changing(value As String)
    End Sub
    Partial Private Sub OnPhone1Changed()
    End Sub
    Partial Private Sub OnPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnPhone2Changed()
    End Sub
    Partial Private Sub OnOccupationChanging(value As String)
    End Sub
    Partial Private Sub OnOccupationChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnMartialStatusChanging(value As String)
    End Sub
    Partial Private Sub OnMartialStatusChanged()
    End Sub
    Partial Private Sub OnMarriageAniversityChanging(value As String)
    End Sub
    Partial Private Sub OnMarriageAniversityChanged()
    End Sub
    Partial Private Sub OnNationalityChanging(value As String)
    End Sub
    Partial Private Sub OnNationalityChanged()
    End Sub
    Partial Private Sub OnLanguage1Changing(value As String)
    End Sub
    Partial Private Sub OnLanguage1Changed()
    End Sub
    Partial Private Sub OnLanguage2Changing(value As String)
    End Sub
    Partial Private Sub OnLanguage2Changed()
    End Sub
    Partial Private Sub OnLanguag3Changing(value As String)
    End Sub
    Partial Private Sub OnLanguag3Changed()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTitheIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTitheIdChanged()
    End Sub
    Partial Private Sub OnDateBaptismChanging(value As String)
    End Sub
    Partial Private Sub OnDateBaptismChanged()
    End Sub
    Partial Private Sub OnDateConvertedChanging(value As String)
    End Sub
    Partial Private Sub OnDateConvertedChanged()
    End Sub
    Partial Private Sub OnLocationidChanging(value As String)
    End Sub
    Partial Private Sub OnLocationidChanged()
    End Sub
    Partial Private Sub OnChurchDetailIDChanging(value As String)
    End Sub
    Partial Private Sub OnChurchDetailIDChanged()
    End Sub
    Partial Private Sub OnMemberssGroupChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMemberssGroupChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnUpdatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedbyChanged()
    End Sub
    Partial Private Sub OnTownChanging(value As String)
    End Sub
    Partial Private Sub OnTownChanged()
    End Sub
    Partial Private Sub OnAreaChanging(value As String)
    End Sub
    Partial Private Sub OnAreaChanged()
    End Sub
    Partial Private Sub OnHomeCellAddressChanging(value As String)
    End Sub
    Partial Private Sub OnHomeCellAddressChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserTables = New EntitySet(Of UserTable)(AddressOf Me.attach_UserTables, AddressOf Me.detach_UserTables)
		Me._AccountRecivableTables = New EntitySet(Of AccountRecivableTable)(AddressOf Me.attach_AccountRecivableTables, AddressOf Me.detach_AccountRecivableTables)
		Me._Other_incomeAccountTables = New EntitySet(Of Other_incomeAccountTable)(AddressOf Me.attach_Other_incomeAccountTables, AddressOf Me.detach_Other_incomeAccountTables)
		Me._MemberImageTables = New EntitySet(Of MemberImageTable)(AddressOf Me.attach_MemberImageTables, AddressOf Me.detach_MemberImageTables)
		Me._AuthenticalTables = New EntitySet(Of AuthenticalTable)(AddressOf Me.attach_AuthenticalTables, AddressOf Me.detach_AuthenticalTables)
		Me._MembersUnits = New EntitySet(Of MembersUnit)(AddressOf Me.attach_MembersUnits, AddressOf Me.detach_MembersUnits)
		Me._PastorsTitheTables = New EntitySet(Of PastorsTitheTable)(AddressOf Me.attach_PastorsTitheTables, AddressOf Me.detach_PastorsTitheTables)
		Me._PastorsAccountTables = New EntitySet(Of PastorsAccountTable)(AddressOf Me.attach_PastorsAccountTables, AddressOf Me.detach_PastorsAccountTables)
		Me._HierarchyTables = New EntitySet(Of HierarchyTable)(AddressOf Me.attach_HierarchyTables, AddressOf Me.detach_HierarchyTables)
		Me._HierarcyAccountTables = New EntitySet(Of HierarcyAccountTable)(AddressOf Me.attach_HierarcyAccountTables, AddressOf Me.detach_HierarcyAccountTables)
		Me._PensionTables = New EntitySet(Of PensionTable)(AddressOf Me.attach_PensionTables, AddressOf Me.detach_PensionTables)
		Me._PensionAccountTables = New EntitySet(Of PensionAccountTable)(AddressOf Me.attach_PensionAccountTables, AddressOf Me.detach_PensionAccountTables)
		Me._LoanHeadTables = New EntitySet(Of LoanHeadTable)(AddressOf Me.attach_LoanHeadTables, AddressOf Me.detach_LoanHeadTables)
		Me._AreaTable = CType(Nothing, EntityRef(Of AreaTable))
		Me._ChurchDetailTable = CType(Nothing, EntityRef(Of ChurchDetailTable))
		Me._FamilyTable = CType(Nothing, EntityRef(Of FamilyTable))
		Me._Location = CType(Nothing, EntityRef(Of Location))
		Me._MembersGroup = CType(Nothing, EntityRef(Of MembersGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyID", DbType:="NVarChar(50)")>  _
	Public Property FamilyID() As String
		Get
			Return Me._FamilyID
		End Get
		Set
			If (String.Equals(Me._FamilyID, value) = false) Then
				If Me._FamilyTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFamilyIDChanging(value)
				Me.SendPropertyChanging
				Me._FamilyID = value
				Me.SendPropertyChanged("FamilyID")
				Me.OnFamilyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Memberid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Memberid() As String
		Get
			Return Me._Memberid
		End Get
		Set
			If (String.Equals(Me._Memberid, value) = false) Then
				Me.OnMemberidChanging(value)
				Me.SendPropertyChanging
				Me._Memberid = value
				Me.SendPropertyChanged("Memberid")
				Me.OnMemberidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(MAX)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="Date")>  _
	Public Property DOB() As System.Nullable(Of Date)
		Get
			Return Me._DOB
		End Get
		Set
			If (Me._DOB.Equals(value) = false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateofOrgin", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property StateofOrgin() As String
		Get
			Return Me._StateofOrgin
		End Get
		Set
			If (String.Equals(Me._StateofOrgin, value) = false) Then
				Me.OnStateofOrginChanging(value)
				Me.SendPropertyChanging
				Me._StateofOrgin = value
				Me.SendPropertyChanged("StateofOrgin")
				Me.OnStateofOrginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Authority", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Authority() As String
		Get
			Return Me._Authority
		End Get
		Set
			If (String.Equals(Me._Authority, value) = false) Then
				Me.OnAuthorityChanging(value)
				Me.SendPropertyChanging
				Me._Authority = value
				Me.SendPropertyChanged("Authority")
				Me.OnAuthorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone1", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Phone1() As String
		Get
			Return Me._Phone1
		End Get
		Set
			If (String.Equals(Me._Phone1, value) = false) Then
				Me.OnPhone1Changing(value)
				Me.SendPropertyChanging
				Me._Phone1 = value
				Me.SendPropertyChanged("Phone1")
				Me.OnPhone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone2", DbType:="NVarChar(50)")>  _
	Public Property Phone2() As String
		Get
			Return Me._Phone2
		End Get
		Set
			If (String.Equals(Me._Phone2, value) = false) Then
				Me.OnPhone2Changing(value)
				Me.SendPropertyChanging
				Me._Phone2 = value
				Me.SendPropertyChanged("Phone2")
				Me.OnPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Occupation", DbType:="NVarChar(50)")>  _
	Public Property Occupation() As String
		Get
			Return Me._Occupation
		End Get
		Set
			If (String.Equals(Me._Occupation, value) = false) Then
				Me.OnOccupationChanging(value)
				Me.SendPropertyChanging
				Me._Occupation = value
				Me.SendPropertyChanged("Occupation")
				Me.OnOccupationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MartialStatus", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MartialStatus() As String
		Get
			Return Me._MartialStatus
		End Get
		Set
			If (String.Equals(Me._MartialStatus, value) = false) Then
				Me.OnMartialStatusChanging(value)
				Me.SendPropertyChanging
				Me._MartialStatus = value
				Me.SendPropertyChanged("MartialStatus")
				Me.OnMartialStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MarriageAniversity", DbType:="NVarChar(50)")>  _
	Public Property MarriageAniversity() As String
		Get
			Return Me._MarriageAniversity
		End Get
		Set
			If (String.Equals(Me._MarriageAniversity, value) = false) Then
				Me.OnMarriageAniversityChanging(value)
				Me.SendPropertyChanging
				Me._MarriageAniversity = value
				Me.SendPropertyChanged("MarriageAniversity")
				Me.OnMarriageAniversityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(50)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me.OnNationalityChanging(value)
				Me.SendPropertyChanging
				Me._Nationality = value
				Me.SendPropertyChanged("Nationality")
				Me.OnNationalityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Language1", DbType:="NVarChar(50)")>  _
	Public Property Language1() As String
		Get
			Return Me._Language1
		End Get
		Set
			If (String.Equals(Me._Language1, value) = false) Then
				Me.OnLanguage1Changing(value)
				Me.SendPropertyChanging
				Me._Language1 = value
				Me.SendPropertyChanged("Language1")
				Me.OnLanguage1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Language2", DbType:="NVarChar(50)")>  _
	Public Property Language2() As String
		Get
			Return Me._Language2
		End Get
		Set
			If (String.Equals(Me._Language2, value) = false) Then
				Me.OnLanguage2Changing(value)
				Me.SendPropertyChanging
				Me._Language2 = value
				Me.SendPropertyChanged("Language2")
				Me.OnLanguage2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Languag3", DbType:="NVarChar(50)")>  _
	Public Property Languag3() As String
		Get
			Return Me._Languag3
		End Get
		Set
			If (String.Equals(Me._Languag3, value) = false) Then
				Me.OnLanguag3Changing(value)
				Me.SendPropertyChanging
				Me._Languag3 = value
				Me.SendPropertyChanged("Languag3")
				Me.OnLanguag3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitheId", DbType:="Int")>  _
	Public Property TitheId() As System.Nullable(Of Integer)
		Get
			Return Me._TitheId
		End Get
		Set
			If (Me._TitheId.Equals(value) = false) Then
				Me.OnTitheIdChanging(value)
				Me.SendPropertyChanging
				Me._TitheId = value
				Me.SendPropertyChanged("TitheId")
				Me.OnTitheIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateBaptism", DbType:="NVarChar(50)")>  _
	Public Property DateBaptism() As String
		Get
			Return Me._DateBaptism
		End Get
		Set
			If (String.Equals(Me._DateBaptism, value) = false) Then
				Me.OnDateBaptismChanging(value)
				Me.SendPropertyChanging
				Me._DateBaptism = value
				Me.SendPropertyChanged("DateBaptism")
				Me.OnDateBaptismChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateConverted", DbType:="NVarChar(50)")>  _
	Public Property DateConverted() As String
		Get
			Return Me._DateConverted
		End Get
		Set
			If (String.Equals(Me._DateConverted, value) = false) Then
				Me.OnDateConvertedChanging(value)
				Me.SendPropertyChanging
				Me._DateConverted = value
				Me.SendPropertyChanged("DateConverted")
				Me.OnDateConvertedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locationid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Locationid() As String
		Get
			Return Me._Locationid
		End Get
		Set
			If (String.Equals(Me._Locationid, value) = false) Then
				If Me._Location.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationidChanging(value)
				Me.SendPropertyChanging
				Me._Locationid = value
				Me.SendPropertyChanged("Locationid")
				Me.OnLocationidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChurchDetailID", DbType:="NVarChar(50)")>  _
	Public Property ChurchDetailID() As String
		Get
			Return Me._ChurchDetailID
		End Get
		Set
			If (String.Equals(Me._ChurchDetailID, value) = false) Then
				If Me._ChurchDetailTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChurchDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._ChurchDetailID = value
				Me.SendPropertyChanged("ChurchDetailID")
				Me.OnChurchDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberssGroup", DbType:="Int")>  _
	Public Property MemberssGroup() As System.Nullable(Of Integer)
		Get
			Return Me._MemberssGroup
		End Get
		Set
			If (Me._MemberssGroup.Equals(value) = false) Then
				If Me._MembersGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMemberssGroupChanging(value)
				Me.SendPropertyChanging
				Me._MemberssGroup = value
				Me.SendPropertyChanged("MemberssGroup")
				Me.OnMemberssGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updatedby", DbType:="NVarChar(50)")>  _
	Public Property Updatedby() As String
		Get
			Return Me._Updatedby
		End Get
		Set
			If (String.Equals(Me._Updatedby, value) = false) Then
				Me.OnUpdatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Updatedby = value
				Me.SendPropertyChanged("Updatedby")
				Me.OnUpdatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Town", DbType:="NVarChar(50)")>  _
	Public Property Town() As String
		Get
			Return Me._Town
		End Get
		Set
			If (String.Equals(Me._Town, value) = false) Then
				Me.OnTownChanging(value)
				Me.SendPropertyChanging
				Me._Town = value
				Me.SendPropertyChanged("Town")
				Me.OnTownChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Area", DbType:="NVarChar(50)")>  _
	Public Property Area() As String
		Get
			Return Me._Area
		End Get
		Set
			If (String.Equals(Me._Area, value) = false) Then
				If Me._AreaTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAreaChanging(value)
				Me.SendPropertyChanging
				Me._Area = value
				Me.SendPropertyChanged("Area")
				Me.OnAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomeCellAddress", DbType:="NVarChar(MAX)")>  _
	Public Property HomeCellAddress() As String
		Get
			Return Me._HomeCellAddress
		End Get
		Set
			If (String.Equals(Me._HomeCellAddress, value) = false) Then
				Me.OnHomeCellAddressChanging(value)
				Me.SendPropertyChanging
				Me._HomeCellAddress = value
				Me.SendPropertyChanged("HomeCellAddress")
				Me.OnHomeCellAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_UserTable", Storage:="_UserTables", ThisKey:="Memberid", OtherKey:="Memberid")>  _
	Public Property UserTables() As EntitySet(Of UserTable)
		Get
			Return Me._UserTables
		End Get
		Set
			Me._UserTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_AccountRecivableTable", Storage:="_AccountRecivableTables", ThisKey:="Memberid", OtherKey:="Memberid")>  _
	Public Property AccountRecivableTables() As EntitySet(Of AccountRecivableTable)
		Get
			Return Me._AccountRecivableTables
		End Get
		Set
			Me._AccountRecivableTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_Other_incomeAccountTable", Storage:="_Other_incomeAccountTables", ThisKey:="Memberid", OtherKey:="StaffId")>  _
	Public Property Other_incomeAccountTables() As EntitySet(Of Other_incomeAccountTable)
		Get
			Return Me._Other_incomeAccountTables
		End Get
		Set
			Me._Other_incomeAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_MemberImageTable", Storage:="_MemberImageTables", ThisKey:="Memberid", OtherKey:="MemberID")>  _
	Public Property MemberImageTables() As EntitySet(Of MemberImageTable)
		Get
			Return Me._MemberImageTables
		End Get
		Set
			Me._MemberImageTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_AuthenticalTable", Storage:="_AuthenticalTables", ThisKey:="Memberid", OtherKey:="Memberid")>  _
	Public Property AuthenticalTables() As EntitySet(Of AuthenticalTable)
		Get
			Return Me._AuthenticalTables
		End Get
		Set
			Me._AuthenticalTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_MembersUnit", Storage:="_MembersUnits", ThisKey:="Memberid", OtherKey:="Memberid")>  _
	Public Property MembersUnits() As EntitySet(Of MembersUnit)
		Get
			Return Me._MembersUnits
		End Get
		Set
			Me._MembersUnits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PastorsTitheTable", Storage:="_PastorsTitheTables", ThisKey:="Memberid", OtherKey:="Staffid")>  _
	Public Property PastorsTitheTables() As EntitySet(Of PastorsTitheTable)
		Get
			Return Me._PastorsTitheTables
		End Get
		Set
			Me._PastorsTitheTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PastorsAccountTable", Storage:="_PastorsAccountTables", ThisKey:="Memberid", OtherKey:="StaffId")>  _
	Public Property PastorsAccountTables() As EntitySet(Of PastorsAccountTable)
		Get
			Return Me._PastorsAccountTables
		End Get
		Set
			Me._PastorsAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_HierarchyTable", Storage:="_HierarchyTables", ThisKey:="Memberid", OtherKey:="Staffid")>  _
	Public Property HierarchyTables() As EntitySet(Of HierarchyTable)
		Get
			Return Me._HierarchyTables
		End Get
		Set
			Me._HierarchyTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_HierarcyAccountTable", Storage:="_HierarcyAccountTables", ThisKey:="Memberid", OtherKey:="StaffId")>  _
	Public Property HierarcyAccountTables() As EntitySet(Of HierarcyAccountTable)
		Get
			Return Me._HierarcyAccountTables
		End Get
		Set
			Me._HierarcyAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PensionTable", Storage:="_PensionTables", ThisKey:="Memberid", OtherKey:="Staffid")>  _
	Public Property PensionTables() As EntitySet(Of PensionTable)
		Get
			Return Me._PensionTables
		End Get
		Set
			Me._PensionTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_PensionAccountTable", Storage:="_PensionAccountTables", ThisKey:="Memberid", OtherKey:="StaffId")>  _
	Public Property PensionAccountTables() As EntitySet(Of PensionAccountTable)
		Get
			Return Me._PensionAccountTables
		End Get
		Set
			Me._PensionAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_LoanHeadTable", Storage:="_LoanHeadTables", ThisKey:="Memberid", OtherKey:="MembershipID")>  _
	Public Property LoanHeadTables() As EntitySet(Of LoanHeadTable)
		Get
			Return Me._LoanHeadTables
		End Get
		Set
			Me._LoanHeadTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AreaTable_MembershipTable", Storage:="_AreaTable", ThisKey:="Area", OtherKey:="Areaid", IsForeignKey:=true)>  _
	Public Property AreaTable() As AreaTable
		Get
			Return Me._AreaTable.Entity
		End Get
		Set
			Dim previousValue As AreaTable = Me._AreaTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AreaTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AreaTable.Entity = Nothing
					previousValue.MembershipTables.Remove(Me)
				End If
				Me._AreaTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembershipTables.Add(Me)
					Me._Area = value.Areaid
				Else
					Me._Area = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AreaTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChurchDetailTable_MembershipTable", Storage:="_ChurchDetailTable", ThisKey:="ChurchDetailID", OtherKey:="ChurchDetailID", IsForeignKey:=true)>  _
	Public Property ChurchDetailTable() As ChurchDetailTable
		Get
			Return Me._ChurchDetailTable.Entity
		End Get
		Set
			Dim previousValue As ChurchDetailTable = Me._ChurchDetailTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChurchDetailTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChurchDetailTable.Entity = Nothing
					previousValue.MembershipTables.Remove(Me)
				End If
				Me._ChurchDetailTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembershipTables.Add(Me)
					Me._ChurchDetailID = value.ChurchDetailID
				Else
					Me._ChurchDetailID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChurchDetailTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FamilyTable_MembershipTable", Storage:="_FamilyTable", ThisKey:="FamilyID", OtherKey:="Familyid", IsForeignKey:=true)>  _
	Public Property FamilyTable() As FamilyTable
		Get
			Return Me._FamilyTable.Entity
		End Get
		Set
			Dim previousValue As FamilyTable = Me._FamilyTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FamilyTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FamilyTable.Entity = Nothing
					previousValue.MembershipTables.Remove(Me)
				End If
				Me._FamilyTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembershipTables.Add(Me)
					Me._FamilyID = value.Familyid
				Else
					Me._FamilyID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FamilyTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_MembershipTable", Storage:="_Location", ThisKey:="Locationid", OtherKey:="Locationid", IsForeignKey:=true)>  _
	Public Property Location() As Location
		Get
			Return Me._Location.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location.Entity = Nothing
					previousValue.MembershipTables.Remove(Me)
				End If
				Me._Location.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembershipTables.Add(Me)
					Me._Locationid = value.Locationid
				Else
					Me._Locationid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Location")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembersGroup_MembershipTable", Storage:="_MembersGroup", ThisKey:="MemberssGroup", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MembersGroup() As MembersGroup
		Get
			Return Me._MembersGroup.Entity
		End Get
		Set
			Dim previousValue As MembersGroup = Me._MembersGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembersGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembersGroup.Entity = Nothing
					previousValue.MembershipTables.Remove(Me)
				End If
				Me._MembersGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MembershipTables.Add(Me)
					Me._MemberssGroup = value.ID
				Else
					Me._MemberssGroup = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MembersGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserTables(ByVal entity As UserTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_UserTables(ByVal entity As UserTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_AccountRecivableTables(ByVal entity As AccountRecivableTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_AccountRecivableTables(ByVal entity As AccountRecivableTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_Other_incomeAccountTables(ByVal entity As Other_incomeAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_Other_incomeAccountTables(ByVal entity As Other_incomeAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_MemberImageTables(ByVal entity As MemberImageTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_MemberImageTables(ByVal entity As MemberImageTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_AuthenticalTables(ByVal entity As AuthenticalTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_AuthenticalTables(ByVal entity As AuthenticalTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_MembersUnits(ByVal entity As MembersUnit)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_MembersUnits(ByVal entity As MembersUnit)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_PastorsTitheTables(ByVal entity As PastorsTitheTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_PastorsTitheTables(ByVal entity As PastorsTitheTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_PastorsAccountTables(ByVal entity As PastorsAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_PastorsAccountTables(ByVal entity As PastorsAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_HierarchyTables(ByVal entity As HierarchyTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_HierarcyAccountTables(ByVal entity As HierarcyAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_PensionTables(ByVal entity As PensionTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_PensionTables(ByVal entity As PensionTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_PensionAccountTables(ByVal entity As PensionAccountTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
	
	Private Sub attach_LoanHeadTables(ByVal entity As LoanHeadTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Me
	End Sub
	
	Private Sub detach_LoanHeadTables(ByVal entity As LoanHeadTable)
		Me.SendPropertyChanging
		entity.MembershipTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomePaymentTable")>  _
Partial Public Class IncomePaymentTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Offeringid As String
	
	Private _Incomeid As System.Nullable(Of Integer)
	
	Private _PaymentMethodid As System.Nullable(Of Integer)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _AmountReducedPerTitheEntry As System.Nullable(Of Decimal)
	
	Private _Comment As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _IncomeTable As EntityRef(Of IncomeTable)
	
	Private _IncomeOffTable As EntityRef(Of IncomeOffTable)
	
	Private _PaymentMethodTable As EntityRef(Of PaymentMethodTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnOfferingidChanging(value As String)
    End Sub
    Partial Private Sub OnOfferingidChanged()
    End Sub
    Partial Private Sub OnIncomeidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIncomeidChanged()
    End Sub
    Partial Private Sub OnPaymentMethodidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentMethodidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnAmountReducedPerTitheEntryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountReducedPerTitheEntryChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomeTable = CType(Nothing, EntityRef(Of IncomeTable))
		Me._IncomeOffTable = CType(Nothing, EntityRef(Of IncomeOffTable))
		Me._PaymentMethodTable = CType(Nothing, EntityRef(Of PaymentMethodTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Offeringid", DbType:="NVarChar(50)")>  _
	Public Property Offeringid() As String
		Get
			Return Me._Offeringid
		End Get
		Set
			If (String.Equals(Me._Offeringid, value) = false) Then
				If Me._IncomeOffTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOfferingidChanging(value)
				Me.SendPropertyChanging
				Me._Offeringid = value
				Me.SendPropertyChanged("Offeringid")
				Me.OnOfferingidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Incomeid", DbType:="Int")>  _
	Public Property Incomeid() As System.Nullable(Of Integer)
		Get
			Return Me._Incomeid
		End Get
		Set
			If (Me._Incomeid.Equals(value) = false) Then
				If Me._IncomeTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomeidChanging(value)
				Me.SendPropertyChanging
				Me._Incomeid = value
				Me.SendPropertyChanged("Incomeid")
				Me.OnIncomeidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMethodid", DbType:="Int")>  _
	Public Property PaymentMethodid() As System.Nullable(Of Integer)
		Get
			Return Me._PaymentMethodid
		End Get
		Set
			If (Me._PaymentMethodid.Equals(value) = false) Then
				If Me._PaymentMethodTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentMethodidChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMethodid = value
				Me.SendPropertyChanged("PaymentMethodid")
				Me.OnPaymentMethodidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountReducedPerTitheEntry", DbType:="Decimal(18,2)")>  _
	Public Property AmountReducedPerTitheEntry() As System.Nullable(Of Decimal)
		Get
			Return Me._AmountReducedPerTitheEntry
		End Get
		Set
			If (Me._AmountReducedPerTitheEntry.Equals(value) = false) Then
				Me.OnAmountReducedPerTitheEntryChanging(value)
				Me.SendPropertyChanging
				Me._AmountReducedPerTitheEntry = value
				Me.SendPropertyChanged("AmountReducedPerTitheEntry")
				Me.OnAmountReducedPerTitheEntryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(50)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeTable_IncomePaymentTable", Storage:="_IncomeTable", ThisKey:="Incomeid", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property IncomeTable() As IncomeTable
		Get
			Return Me._IncomeTable.Entity
		End Get
		Set
			Dim previousValue As IncomeTable = Me._IncomeTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeTable.Entity = Nothing
					previousValue.IncomePaymentTables.Remove(Me)
				End If
				Me._IncomeTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomePaymentTables.Add(Me)
					Me._Incomeid = value.ID
				Else
					Me._Incomeid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("IncomeTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomeOffTable_IncomePaymentTable", Storage:="_IncomeOffTable", ThisKey:="Offeringid", OtherKey:="Offeringid", IsForeignKey:=true)>  _
	Public Property IncomeOffTable() As IncomeOffTable
		Get
			Return Me._IncomeOffTable.Entity
		End Get
		Set
			Dim previousValue As IncomeOffTable = Me._IncomeOffTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomeOffTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomeOffTable.Entity = Nothing
					previousValue.IncomePaymentTables.Remove(Me)
				End If
				Me._IncomeOffTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomePaymentTables.Add(Me)
					Me._Offeringid = value.Offeringid
				Else
					Me._Offeringid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("IncomeOffTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PaymentMethodTable_IncomePaymentTable", Storage:="_PaymentMethodTable", ThisKey:="PaymentMethodid", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PaymentMethodTable() As PaymentMethodTable
		Get
			Return Me._PaymentMethodTable.Entity
		End Get
		Set
			Dim previousValue As PaymentMethodTable = Me._PaymentMethodTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PaymentMethodTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PaymentMethodTable.Entity = Nothing
					previousValue.IncomePaymentTables.Remove(Me)
				End If
				Me._PaymentMethodTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IncomePaymentTables.Add(Me)
					Me._PaymentMethodid = value.Id
				Else
					Me._PaymentMethodid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PaymentMethodTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AttendanceTotalTable")>  _
Partial Public Class AttendanceTotalTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Attendanceid As String
	
	Private _TotalAdult As System.Nullable(Of Integer)
	
	Private _TotalTeen As System.Nullable(Of Integer)
	
	Private _TotalChildren As System.Nullable(Of Integer)
	
	Private _TotalVisitors As System.Nullable(Of Integer)
	
	Private _TotalMale As System.Nullable(Of Integer)
	
	Private _TotalFemale As System.Nullable(Of Integer)
	
	Private _AttendanceTable As EntityRef(Of AttendanceTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnAttendanceidChanging(value As String)
    End Sub
    Partial Private Sub OnAttendanceidChanged()
    End Sub
    Partial Private Sub OnTotalAdultChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalAdultChanged()
    End Sub
    Partial Private Sub OnTotalTeenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalTeenChanged()
    End Sub
    Partial Private Sub OnTotalChildrenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalChildrenChanged()
    End Sub
    Partial Private Sub OnTotalVisitorsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalVisitorsChanged()
    End Sub
    Partial Private Sub OnTotalMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalMaleChanged()
    End Sub
    Partial Private Sub OnTotalFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalFemaleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AttendanceTable = CType(Nothing, EntityRef(Of AttendanceTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attendanceid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Attendanceid() As String
		Get
			Return Me._Attendanceid
		End Get
		Set
			If (String.Equals(Me._Attendanceid, value) = false) Then
				If Me._AttendanceTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAttendanceidChanging(value)
				Me.SendPropertyChanging
				Me._Attendanceid = value
				Me.SendPropertyChanged("Attendanceid")
				Me.OnAttendanceidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalAdult", DbType:="Int")>  _
	Public Property TotalAdult() As System.Nullable(Of Integer)
		Get
			Return Me._TotalAdult
		End Get
		Set
			If (Me._TotalAdult.Equals(value) = false) Then
				Me.OnTotalAdultChanging(value)
				Me.SendPropertyChanging
				Me._TotalAdult = value
				Me.SendPropertyChanged("TotalAdult")
				Me.OnTotalAdultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalTeen", DbType:="Int")>  _
	Public Property TotalTeen() As System.Nullable(Of Integer)
		Get
			Return Me._TotalTeen
		End Get
		Set
			If (Me._TotalTeen.Equals(value) = false) Then
				Me.OnTotalTeenChanging(value)
				Me.SendPropertyChanging
				Me._TotalTeen = value
				Me.SendPropertyChanged("TotalTeen")
				Me.OnTotalTeenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalChildren", DbType:="Int")>  _
	Public Property TotalChildren() As System.Nullable(Of Integer)
		Get
			Return Me._TotalChildren
		End Get
		Set
			If (Me._TotalChildren.Equals(value) = false) Then
				Me.OnTotalChildrenChanging(value)
				Me.SendPropertyChanging
				Me._TotalChildren = value
				Me.SendPropertyChanged("TotalChildren")
				Me.OnTotalChildrenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalVisitors", DbType:="Int")>  _
	Public Property TotalVisitors() As System.Nullable(Of Integer)
		Get
			Return Me._TotalVisitors
		End Get
		Set
			If (Me._TotalVisitors.Equals(value) = false) Then
				Me.OnTotalVisitorsChanging(value)
				Me.SendPropertyChanging
				Me._TotalVisitors = value
				Me.SendPropertyChanged("TotalVisitors")
				Me.OnTotalVisitorsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalMale", DbType:="Int")>  _
	Public Property TotalMale() As System.Nullable(Of Integer)
		Get
			Return Me._TotalMale
		End Get
		Set
			If (Me._TotalMale.Equals(value) = false) Then
				Me.OnTotalMaleChanging(value)
				Me.SendPropertyChanging
				Me._TotalMale = value
				Me.SendPropertyChanged("TotalMale")
				Me.OnTotalMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalFemale", DbType:="Int")>  _
	Public Property TotalFemale() As System.Nullable(Of Integer)
		Get
			Return Me._TotalFemale
		End Get
		Set
			If (Me._TotalFemale.Equals(value) = false) Then
				Me.OnTotalFemaleChanging(value)
				Me.SendPropertyChanging
				Me._TotalFemale = value
				Me.SendPropertyChanged("TotalFemale")
				Me.OnTotalFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AttendanceTable_AttendanceTotalTable", Storage:="_AttendanceTable", ThisKey:="Attendanceid", OtherKey:="Attendanceid", IsForeignKey:=true)>  _
	Public Property AttendanceTable() As AttendanceTable
		Get
			Return Me._AttendanceTable.Entity
		End Get
		Set
			Dim previousValue As AttendanceTable = Me._AttendanceTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AttendanceTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AttendanceTable.Entity = Nothing
					previousValue.AttendanceTotalTables.Remove(Me)
				End If
				Me._AttendanceTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AttendanceTotalTables.Add(Me)
					Me._Attendanceid = value.Attendanceid
				Else
					Me._Attendanceid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AttendanceTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AttendanceTable")>  _
Partial Public Class AttendanceTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Attendanceid As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Day As String
	
	Private _Week As String
	
	Private _MainSacAdultMale As System.Nullable(Of Integer)
	
	Private _MainSacAdultFemale As System.Nullable(Of Integer)
	
	Private _MainSacTeenMale As System.Nullable(Of Integer)
	
	Private _MainSacTeenFemale As System.Nullable(Of Integer)
	
	Private _MainSacChildrenMale As System.Nullable(Of Integer)
	
	Private _MainSacChildrenFemale As System.Nullable(Of Integer)
	
	Private _VisitorMale As System.Nullable(Of Integer)
	
	Private _VisitorFemale As System.Nullable(Of Integer)
	
	Private _TeenAdultMale As System.Nullable(Of Integer)
	
	Private _TeenAdultFemale As System.Nullable(Of Integer)
	
	Private _TeenMale As System.Nullable(Of Integer)
	
	Private _TeenFemale As System.Nullable(Of Integer)
	
	Private _TeenChidMale As System.Nullable(Of Integer)
	
	Private _TeenChildFemale As System.Nullable(Of Integer)
	
	Private _ChildAdultMale As System.Nullable(Of Integer)
	
	Private _ChildAdultFemale As System.Nullable(Of Integer)
	
	Private _ChildTeenMale As System.Nullable(Of Integer)
	
	Private _ChildTeenFemale As System.Nullable(Of Integer)
	
	Private _ChildMale As System.Nullable(Of Integer)
	
	Private _ChildFemale As System.Nullable(Of Integer)
	
	Private _Total As System.Nullable(Of Integer)
	
	Private _Createdby As String
	
	Private _Churchid As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _AttendanceTotalTables As EntitySet(Of AttendanceTotalTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnAttendanceidChanging(value As String)
    End Sub
    Partial Private Sub OnAttendanceidChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnDayChanging(value As String)
    End Sub
    Partial Private Sub OnDayChanged()
    End Sub
    Partial Private Sub OnWeekChanging(value As String)
    End Sub
    Partial Private Sub OnWeekChanged()
    End Sub
    Partial Private Sub OnMainSacAdultMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainSacAdultMaleChanged()
    End Sub
    Partial Private Sub OnMainSacAdultFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainSacAdultFemaleChanged()
    End Sub
    Partial Private Sub OnMainSacTeenMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainSacTeenMaleChanged()
    End Sub
    Partial Private Sub OnMainSacTeenFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainSacTeenFemaleChanged()
    End Sub
    Partial Private Sub OnMainSacChildrenMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainSacChildrenMaleChanged()
    End Sub
    Partial Private Sub OnMainSacChildrenFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMainSacChildrenFemaleChanged()
    End Sub
    Partial Private Sub OnVisitorMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVisitorMaleChanged()
    End Sub
    Partial Private Sub OnVisitorFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVisitorFemaleChanged()
    End Sub
    Partial Private Sub OnTeenAdultMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeenAdultMaleChanged()
    End Sub
    Partial Private Sub OnTeenAdultFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeenAdultFemaleChanged()
    End Sub
    Partial Private Sub OnTeenMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeenMaleChanged()
    End Sub
    Partial Private Sub OnTeenFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeenFemaleChanged()
    End Sub
    Partial Private Sub OnTeenChidMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeenChidMaleChanged()
    End Sub
    Partial Private Sub OnTeenChildFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeenChildFemaleChanged()
    End Sub
    Partial Private Sub OnChildAdultMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChildAdultMaleChanged()
    End Sub
    Partial Private Sub OnChildAdultFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChildAdultFemaleChanged()
    End Sub
    Partial Private Sub OnChildTeenMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChildTeenMaleChanged()
    End Sub
    Partial Private Sub OnChildTeenFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChildTeenFemaleChanged()
    End Sub
    Partial Private Sub OnChildMaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChildMaleChanged()
    End Sub
    Partial Private Sub OnChildFemaleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnChildFemaleChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnCreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedbyChanged()
    End Sub
    Partial Private Sub OnChurchidChanging(value As String)
    End Sub
    Partial Private Sub OnChurchidChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AttendanceTotalTables = New EntitySet(Of AttendanceTotalTable)(AddressOf Me.attach_AttendanceTotalTables, AddressOf Me.detach_AttendanceTotalTables)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attendanceid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Attendanceid() As String
		Get
			Return Me._Attendanceid
		End Get
		Set
			If (String.Equals(Me._Attendanceid, value) = false) Then
				Me.OnAttendanceidChanging(value)
				Me.SendPropertyChanging
				Me._Attendanceid = value
				Me.SendPropertyChanged("Attendanceid")
				Me.OnAttendanceidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Day", DbType:="NVarChar(50)")>  _
	Public Property Day() As String
		Get
			Return Me._Day
		End Get
		Set
			If (String.Equals(Me._Day, value) = false) Then
				Me.OnDayChanging(value)
				Me.SendPropertyChanging
				Me._Day = value
				Me.SendPropertyChanged("Day")
				Me.OnDayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Week", DbType:="NVarChar(50)")>  _
	Public Property Week() As String
		Get
			Return Me._Week
		End Get
		Set
			If (String.Equals(Me._Week, value) = false) Then
				Me.OnWeekChanging(value)
				Me.SendPropertyChanging
				Me._Week = value
				Me.SendPropertyChanged("Week")
				Me.OnWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainSacAdultMale", DbType:="Int")>  _
	Public Property MainSacAdultMale() As System.Nullable(Of Integer)
		Get
			Return Me._MainSacAdultMale
		End Get
		Set
			If (Me._MainSacAdultMale.Equals(value) = false) Then
				Me.OnMainSacAdultMaleChanging(value)
				Me.SendPropertyChanging
				Me._MainSacAdultMale = value
				Me.SendPropertyChanged("MainSacAdultMale")
				Me.OnMainSacAdultMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainSacAdultFemale", DbType:="Int")>  _
	Public Property MainSacAdultFemale() As System.Nullable(Of Integer)
		Get
			Return Me._MainSacAdultFemale
		End Get
		Set
			If (Me._MainSacAdultFemale.Equals(value) = false) Then
				Me.OnMainSacAdultFemaleChanging(value)
				Me.SendPropertyChanging
				Me._MainSacAdultFemale = value
				Me.SendPropertyChanged("MainSacAdultFemale")
				Me.OnMainSacAdultFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainSacTeenMale", DbType:="Int")>  _
	Public Property MainSacTeenMale() As System.Nullable(Of Integer)
		Get
			Return Me._MainSacTeenMale
		End Get
		Set
			If (Me._MainSacTeenMale.Equals(value) = false) Then
				Me.OnMainSacTeenMaleChanging(value)
				Me.SendPropertyChanging
				Me._MainSacTeenMale = value
				Me.SendPropertyChanged("MainSacTeenMale")
				Me.OnMainSacTeenMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainSacTeenFemale", DbType:="Int")>  _
	Public Property MainSacTeenFemale() As System.Nullable(Of Integer)
		Get
			Return Me._MainSacTeenFemale
		End Get
		Set
			If (Me._MainSacTeenFemale.Equals(value) = false) Then
				Me.OnMainSacTeenFemaleChanging(value)
				Me.SendPropertyChanging
				Me._MainSacTeenFemale = value
				Me.SendPropertyChanged("MainSacTeenFemale")
				Me.OnMainSacTeenFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainSacChildrenMale", DbType:="Int")>  _
	Public Property MainSacChildrenMale() As System.Nullable(Of Integer)
		Get
			Return Me._MainSacChildrenMale
		End Get
		Set
			If (Me._MainSacChildrenMale.Equals(value) = false) Then
				Me.OnMainSacChildrenMaleChanging(value)
				Me.SendPropertyChanging
				Me._MainSacChildrenMale = value
				Me.SendPropertyChanged("MainSacChildrenMale")
				Me.OnMainSacChildrenMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainSacChildrenFemale", DbType:="Int")>  _
	Public Property MainSacChildrenFemale() As System.Nullable(Of Integer)
		Get
			Return Me._MainSacChildrenFemale
		End Get
		Set
			If (Me._MainSacChildrenFemale.Equals(value) = false) Then
				Me.OnMainSacChildrenFemaleChanging(value)
				Me.SendPropertyChanging
				Me._MainSacChildrenFemale = value
				Me.SendPropertyChanged("MainSacChildrenFemale")
				Me.OnMainSacChildrenFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VisitorMale", DbType:="Int")>  _
	Public Property VisitorMale() As System.Nullable(Of Integer)
		Get
			Return Me._VisitorMale
		End Get
		Set
			If (Me._VisitorMale.Equals(value) = false) Then
				Me.OnVisitorMaleChanging(value)
				Me.SendPropertyChanging
				Me._VisitorMale = value
				Me.SendPropertyChanged("VisitorMale")
				Me.OnVisitorMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VisitorFemale", DbType:="Int")>  _
	Public Property VisitorFemale() As System.Nullable(Of Integer)
		Get
			Return Me._VisitorFemale
		End Get
		Set
			If (Me._VisitorFemale.Equals(value) = false) Then
				Me.OnVisitorFemaleChanging(value)
				Me.SendPropertyChanging
				Me._VisitorFemale = value
				Me.SendPropertyChanged("VisitorFemale")
				Me.OnVisitorFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeenAdultMale", DbType:="Int")>  _
	Public Property TeenAdultMale() As System.Nullable(Of Integer)
		Get
			Return Me._TeenAdultMale
		End Get
		Set
			If (Me._TeenAdultMale.Equals(value) = false) Then
				Me.OnTeenAdultMaleChanging(value)
				Me.SendPropertyChanging
				Me._TeenAdultMale = value
				Me.SendPropertyChanged("TeenAdultMale")
				Me.OnTeenAdultMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeenAdultFemale", DbType:="Int")>  _
	Public Property TeenAdultFemale() As System.Nullable(Of Integer)
		Get
			Return Me._TeenAdultFemale
		End Get
		Set
			If (Me._TeenAdultFemale.Equals(value) = false) Then
				Me.OnTeenAdultFemaleChanging(value)
				Me.SendPropertyChanging
				Me._TeenAdultFemale = value
				Me.SendPropertyChanged("TeenAdultFemale")
				Me.OnTeenAdultFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeenMale", DbType:="Int")>  _
	Public Property TeenMale() As System.Nullable(Of Integer)
		Get
			Return Me._TeenMale
		End Get
		Set
			If (Me._TeenMale.Equals(value) = false) Then
				Me.OnTeenMaleChanging(value)
				Me.SendPropertyChanging
				Me._TeenMale = value
				Me.SendPropertyChanged("TeenMale")
				Me.OnTeenMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeenFemale", DbType:="Int")>  _
	Public Property TeenFemale() As System.Nullable(Of Integer)
		Get
			Return Me._TeenFemale
		End Get
		Set
			If (Me._TeenFemale.Equals(value) = false) Then
				Me.OnTeenFemaleChanging(value)
				Me.SendPropertyChanging
				Me._TeenFemale = value
				Me.SendPropertyChanged("TeenFemale")
				Me.OnTeenFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeenChidMale", DbType:="Int")>  _
	Public Property TeenChidMale() As System.Nullable(Of Integer)
		Get
			Return Me._TeenChidMale
		End Get
		Set
			If (Me._TeenChidMale.Equals(value) = false) Then
				Me.OnTeenChidMaleChanging(value)
				Me.SendPropertyChanging
				Me._TeenChidMale = value
				Me.SendPropertyChanged("TeenChidMale")
				Me.OnTeenChidMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeenChildFemale", DbType:="Int")>  _
	Public Property TeenChildFemale() As System.Nullable(Of Integer)
		Get
			Return Me._TeenChildFemale
		End Get
		Set
			If (Me._TeenChildFemale.Equals(value) = false) Then
				Me.OnTeenChildFemaleChanging(value)
				Me.SendPropertyChanging
				Me._TeenChildFemale = value
				Me.SendPropertyChanged("TeenChildFemale")
				Me.OnTeenChildFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildAdultMale", DbType:="Int")>  _
	Public Property ChildAdultMale() As System.Nullable(Of Integer)
		Get
			Return Me._ChildAdultMale
		End Get
		Set
			If (Me._ChildAdultMale.Equals(value) = false) Then
				Me.OnChildAdultMaleChanging(value)
				Me.SendPropertyChanging
				Me._ChildAdultMale = value
				Me.SendPropertyChanged("ChildAdultMale")
				Me.OnChildAdultMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildAdultFemale", DbType:="Int")>  _
	Public Property ChildAdultFemale() As System.Nullable(Of Integer)
		Get
			Return Me._ChildAdultFemale
		End Get
		Set
			If (Me._ChildAdultFemale.Equals(value) = false) Then
				Me.OnChildAdultFemaleChanging(value)
				Me.SendPropertyChanging
				Me._ChildAdultFemale = value
				Me.SendPropertyChanged("ChildAdultFemale")
				Me.OnChildAdultFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildTeenMale", DbType:="Int")>  _
	Public Property ChildTeenMale() As System.Nullable(Of Integer)
		Get
			Return Me._ChildTeenMale
		End Get
		Set
			If (Me._ChildTeenMale.Equals(value) = false) Then
				Me.OnChildTeenMaleChanging(value)
				Me.SendPropertyChanging
				Me._ChildTeenMale = value
				Me.SendPropertyChanged("ChildTeenMale")
				Me.OnChildTeenMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildTeenFemale", DbType:="Int")>  _
	Public Property ChildTeenFemale() As System.Nullable(Of Integer)
		Get
			Return Me._ChildTeenFemale
		End Get
		Set
			If (Me._ChildTeenFemale.Equals(value) = false) Then
				Me.OnChildTeenFemaleChanging(value)
				Me.SendPropertyChanging
				Me._ChildTeenFemale = value
				Me.SendPropertyChanged("ChildTeenFemale")
				Me.OnChildTeenFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildMale", DbType:="Int")>  _
	Public Property ChildMale() As System.Nullable(Of Integer)
		Get
			Return Me._ChildMale
		End Get
		Set
			If (Me._ChildMale.Equals(value) = false) Then
				Me.OnChildMaleChanging(value)
				Me.SendPropertyChanging
				Me._ChildMale = value
				Me.SendPropertyChanged("ChildMale")
				Me.OnChildMaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChildFemale", DbType:="Int")>  _
	Public Property ChildFemale() As System.Nullable(Of Integer)
		Get
			Return Me._ChildFemale
		End Get
		Set
			If (Me._ChildFemale.Equals(value) = false) Then
				Me.OnChildFemaleChanging(value)
				Me.SendPropertyChanging
				Me._ChildFemale = value
				Me.SendPropertyChanged("ChildFemale")
				Me.OnChildFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Int")>  _
	Public Property Total() As System.Nullable(Of Integer)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Createdby", DbType:="NVarChar(50)")>  _
	Public Property Createdby() As String
		Get
			Return Me._Createdby
		End Get
		Set
			If (String.Equals(Me._Createdby, value) = false) Then
				Me.OnCreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._Createdby = value
				Me.SendPropertyChanged("Createdby")
				Me.OnCreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Churchid", DbType:="NVarChar(50)")>  _
	Public Property Churchid() As String
		Get
			Return Me._Churchid
		End Get
		Set
			If (String.Equals(Me._Churchid, value) = false) Then
				Me.OnChurchidChanging(value)
				Me.SendPropertyChanging
				Me._Churchid = value
				Me.SendPropertyChanged("Churchid")
				Me.OnChurchidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AttendanceTable_AttendanceTotalTable", Storage:="_AttendanceTotalTables", ThisKey:="Attendanceid", OtherKey:="Attendanceid")>  _
	Public Property AttendanceTotalTables() As EntitySet(Of AttendanceTotalTable)
		Get
			Return Me._AttendanceTotalTables
		End Get
		Set
			Me._AttendanceTotalTables.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AttendanceTotalTables(ByVal entity As AttendanceTotalTable)
		Me.SendPropertyChanging
		entity.AttendanceTable = Me
	End Sub
	
	Private Sub detach_AttendanceTotalTables(ByVal entity As AttendanceTotalTable)
		Me.SendPropertyChanging
		entity.AttendanceTable = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoanAccountTable")>  _
Partial Public Class LoanAccountTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _LoanID As String
	
	Private _TranscationDate As System.Nullable(Of Date)
	
	Private _AccountName As String
	
	Private _Accountdetails As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Transcationtype As String
	
	Private _Remark As String
	
	Private _Datecreated As System.Nullable(Of Date)
	
	Private _createdby As String
	
	Private _ChartAccountTable As EntityRef(Of ChartAccountTable)
	
	Private _LoanHeadTable As EntityRef(Of LoanHeadTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnLoanIDChanging(value As String)
    End Sub
    Partial Private Sub OnLoanIDChanged()
    End Sub
    Partial Private Sub OnTranscationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTranscationDateChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountdetailsChanging(value As String)
    End Sub
    Partial Private Sub OnAccountdetailsChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnTranscationtypeChanging(value As String)
    End Sub
    Partial Private Sub OnTranscationtypeChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnDatecreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatecreatedChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As String)
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ChartAccountTable = CType(Nothing, EntityRef(Of ChartAccountTable))
		Me._LoanHeadTable = CType(Nothing, EntityRef(Of LoanHeadTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanID", DbType:="NVarChar(50)")>  _
	Public Property LoanID() As String
		Get
			Return Me._LoanID
		End Get
		Set
			If (String.Equals(Me._LoanID, value) = false) Then
				If Me._LoanHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoanIDChanging(value)
				Me.SendPropertyChanging
				Me._LoanID = value
				Me.SendPropertyChanged("LoanID")
				Me.OnLoanIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TranscationDate", DbType:="Date")>  _
	Public Property TranscationDate() As System.Nullable(Of Date)
		Get
			Return Me._TranscationDate
		End Get
		Set
			If (Me._TranscationDate.Equals(value) = false) Then
				Me.OnTranscationDateChanging(value)
				Me.SendPropertyChanging
				Me._TranscationDate = value
				Me.SendPropertyChanged("TranscationDate")
				Me.OnTranscationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NVarChar(50)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				If Me._ChartAccountTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accountdetails", DbType:="NVarChar(MAX)")>  _
	Public Property Accountdetails() As String
		Get
			Return Me._Accountdetails
		End Get
		Set
			If (String.Equals(Me._Accountdetails, value) = false) Then
				Me.OnAccountdetailsChanging(value)
				Me.SendPropertyChanging
				Me._Accountdetails = value
				Me.SendPropertyChanged("Accountdetails")
				Me.OnAccountdetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transcationtype", DbType:="NVarChar(50)")>  _
	Public Property Transcationtype() As String
		Get
			Return Me._Transcationtype
		End Get
		Set
			If (String.Equals(Me._Transcationtype, value) = false) Then
				Me.OnTranscationtypeChanging(value)
				Me.SendPropertyChanging
				Me._Transcationtype = value
				Me.SendPropertyChanged("Transcationtype")
				Me.OnTranscationtypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NVarChar(MAX)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Datecreated", DbType:="Date")>  _
	Public Property Datecreated() As System.Nullable(Of Date)
		Get
			Return Me._Datecreated
		End Get
		Set
			If (Me._Datecreated.Equals(value) = false) Then
				Me.OnDatecreatedChanging(value)
				Me.SendPropertyChanging
				Me._Datecreated = value
				Me.SendPropertyChanged("Datecreated")
				Me.OnDatecreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="NVarChar(50)")>  _
	Public Property createdby() As String
		Get
			Return Me._createdby
		End Get
		Set
			If (String.Equals(Me._createdby, value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ChartAccountTable_LoanAccountTable", Storage:="_ChartAccountTable", ThisKey:="AccountName", OtherKey:="Accountname", IsForeignKey:=true)>  _
	Public Property ChartAccountTable() As ChartAccountTable
		Get
			Return Me._ChartAccountTable.Entity
		End Get
		Set
			Dim previousValue As ChartAccountTable = Me._ChartAccountTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ChartAccountTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ChartAccountTable.Entity = Nothing
					previousValue.LoanAccountTables.Remove(Me)
				End If
				Me._ChartAccountTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LoanAccountTables.Add(Me)
					Me._AccountName = value.Accountname
				Else
					Me._AccountName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ChartAccountTable")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LoanHeadTable_LoanAccountTable", Storage:="_LoanHeadTable", ThisKey:="LoanID", OtherKey:="Loanid", IsForeignKey:=true)>  _
	Public Property LoanHeadTable() As LoanHeadTable
		Get
			Return Me._LoanHeadTable.Entity
		End Get
		Set
			Dim previousValue As LoanHeadTable = Me._LoanHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LoanHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LoanHeadTable.Entity = Nothing
					previousValue.LoanAccountTables.Remove(Me)
				End If
				Me._LoanHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LoanAccountTables.Add(Me)
					Me._LoanID = value.Loanid
				Else
					Me._LoanID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("LoanHeadTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoanPVTable")>  _
Partial Public Class LoanPVTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Pvid As Integer
	
	Private _Loanid As String
	
	Private _DateCreated As Date
	
	Private _CreatedBy As String
	
	Private _LoanHeadTable As EntityRef(Of LoanHeadTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPvidChanging(value As Integer)
    End Sub
    Partial Private Sub OnPvidChanged()
    End Sub
    Partial Private Sub OnLoanidChanging(value As String)
    End Sub
    Partial Private Sub OnLoanidChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LoanHeadTable = CType(Nothing, EntityRef(Of LoanHeadTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pvid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Pvid() As Integer
		Get
			Return Me._Pvid
		End Get
		Set
			If ((Me._Pvid = value)  _
						= false) Then
				Me.OnPvidChanging(value)
				Me.SendPropertyChanging
				Me._Pvid = value
				Me.SendPropertyChanged("Pvid")
				Me.OnPvidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Loanid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Loanid() As String
		Get
			Return Me._Loanid
		End Get
		Set
			If (String.Equals(Me._Loanid, value) = false) Then
				If Me._LoanHeadTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoanidChanging(value)
				Me.SendPropertyChanging
				Me._Loanid = value
				Me.SendPropertyChanged("Loanid")
				Me.OnLoanidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LoanHeadTable_LoanPVTable", Storage:="_LoanHeadTable", ThisKey:="Loanid", OtherKey:="Loanid", IsForeignKey:=true)>  _
	Public Property LoanHeadTable() As LoanHeadTable
		Get
			Return Me._LoanHeadTable.Entity
		End Get
		Set
			Dim previousValue As LoanHeadTable = Me._LoanHeadTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LoanHeadTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LoanHeadTable.Entity = Nothing
					previousValue.LoanPVTables.Remove(Me)
				End If
				Me._LoanHeadTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LoanPVTables.Add(Me)
					Me._Loanid = value.Loanid
				Else
					Me._Loanid = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("LoanHeadTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoanHeadTable")>  _
Partial Public Class LoanHeadTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SN As Integer
	
	Private _Loanid As String
	
	Private _MembershipID As String
	
	Private _Name As String
	
	Private _Address As String
	
	Private _Phone As String
	
	Private _Phone2 As String
	
	Private _DOB As Date
	
	Private _MaritaStatus As String
	
	Private _Email As String
	
	Private _GuarantorName As String
	
	Private _GAddress As String
	
	Private _PlaceOfWork As String
	
	Private _GPhone As String
	
	Private _GEmail As String
	
	Private _LoanAmount As Decimal
	
	Private _Purpose As String
	
	Private _DateCollected As Date
	
	Private _RepaymentDate As Date
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _CreatedBy As String
	
	Private _LoanAccountTables As EntitySet(Of LoanAccountTable)
	
	Private _LoanPVTables As EntitySet(Of LoanPVTable)
	
	Private _MembershipTable As EntityRef(Of MembershipTable)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSNChanging(value As Integer)
    End Sub
    Partial Private Sub OnSNChanged()
    End Sub
    Partial Private Sub OnLoanidChanging(value As String)
    End Sub
    Partial Private Sub OnLoanidChanged()
    End Sub
    Partial Private Sub OnMembershipIDChanging(value As String)
    End Sub
    Partial Private Sub OnMembershipIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnPhone2Changed()
    End Sub
    Partial Private Sub OnDOBChanging(value As Date)
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnMaritaStatusChanging(value As String)
    End Sub
    Partial Private Sub OnMaritaStatusChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnGuarantorNameChanging(value As String)
    End Sub
    Partial Private Sub OnGuarantorNameChanged()
    End Sub
    Partial Private Sub OnGAddressChanging(value As String)
    End Sub
    Partial Private Sub OnGAddressChanged()
    End Sub
    Partial Private Sub OnPlaceOfWorkChanging(value As String)
    End Sub
    Partial Private Sub OnPlaceOfWorkChanged()
    End Sub
    Partial Private Sub OnGPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnGPhoneChanged()
    End Sub
    Partial Private Sub OnGEmailChanging(value As String)
    End Sub
    Partial Private Sub OnGEmailChanged()
    End Sub
    Partial Private Sub OnLoanAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLoanAmountChanged()
    End Sub
    Partial Private Sub OnPurposeChanging(value As String)
    End Sub
    Partial Private Sub OnPurposeChanged()
    End Sub
    Partial Private Sub OnDateCollectedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCollectedChanged()
    End Sub
    Partial Private Sub OnRepaymentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnRepaymentDateChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LoanAccountTables = New EntitySet(Of LoanAccountTable)(AddressOf Me.attach_LoanAccountTables, AddressOf Me.detach_LoanAccountTables)
		Me._LoanPVTables = New EntitySet(Of LoanPVTable)(AddressOf Me.attach_LoanPVTables, AddressOf Me.detach_LoanPVTables)
		Me._MembershipTable = CType(Nothing, EntityRef(Of MembershipTable))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SN", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property SN() As Integer
		Get
			Return Me._SN
		End Get
		Set
			If ((Me._SN = value)  _
						= false) Then
				Me.OnSNChanging(value)
				Me.SendPropertyChanging
				Me._SN = value
				Me.SendPropertyChanged("SN")
				Me.OnSNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Loanid", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Loanid() As String
		Get
			Return Me._Loanid
		End Get
		Set
			If (String.Equals(Me._Loanid, value) = false) Then
				Me.OnLoanidChanging(value)
				Me.SendPropertyChanging
				Me._Loanid = value
				Me.SendPropertyChanged("Loanid")
				Me.OnLoanidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MembershipID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MembershipID() As String
		Get
			Return Me._MembershipID
		End Get
		Set
			If (String.Equals(Me._MembershipID, value) = false) Then
				If Me._MembershipTable.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMembershipIDChanging(value)
				Me.SendPropertyChanging
				Me._MembershipID = value
				Me.SendPropertyChanged("MembershipID")
				Me.OnMembershipIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone2", DbType:="NVarChar(50)")>  _
	Public Property Phone2() As String
		Get
			Return Me._Phone2
		End Get
		Set
			If (String.Equals(Me._Phone2, value) = false) Then
				Me.OnPhone2Changing(value)
				Me.SendPropertyChanging
				Me._Phone2 = value
				Me.SendPropertyChanged("Phone2")
				Me.OnPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="Date NOT NULL")>  _
	Public Property DOB() As Date
		Get
			Return Me._DOB
		End Get
		Set
			If ((Me._DOB = value)  _
						= false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritaStatus", DbType:="NVarChar(50)")>  _
	Public Property MaritaStatus() As String
		Get
			Return Me._MaritaStatus
		End Get
		Set
			If (String.Equals(Me._MaritaStatus, value) = false) Then
				Me.OnMaritaStatusChanging(value)
				Me.SendPropertyChanging
				Me._MaritaStatus = value
				Me.SendPropertyChanged("MaritaStatus")
				Me.OnMaritaStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GuarantorName", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property GuarantorName() As String
		Get
			Return Me._GuarantorName
		End Get
		Set
			If (String.Equals(Me._GuarantorName, value) = false) Then
				Me.OnGuarantorNameChanging(value)
				Me.SendPropertyChanging
				Me._GuarantorName = value
				Me.SendPropertyChanged("GuarantorName")
				Me.OnGuarantorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GAddress", DbType:="NVarChar(MAX)")>  _
	Public Property GAddress() As String
		Get
			Return Me._GAddress
		End Get
		Set
			If (String.Equals(Me._GAddress, value) = false) Then
				Me.OnGAddressChanging(value)
				Me.SendPropertyChanging
				Me._GAddress = value
				Me.SendPropertyChanged("GAddress")
				Me.OnGAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlaceOfWork", DbType:="NVarChar(50)")>  _
	Public Property PlaceOfWork() As String
		Get
			Return Me._PlaceOfWork
		End Get
		Set
			If (String.Equals(Me._PlaceOfWork, value) = false) Then
				Me.OnPlaceOfWorkChanging(value)
				Me.SendPropertyChanging
				Me._PlaceOfWork = value
				Me.SendPropertyChanged("PlaceOfWork")
				Me.OnPlaceOfWorkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GPhone", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GPhone() As String
		Get
			Return Me._GPhone
		End Get
		Set
			If (String.Equals(Me._GPhone, value) = false) Then
				Me.OnGPhoneChanging(value)
				Me.SendPropertyChanging
				Me._GPhone = value
				Me.SendPropertyChanged("GPhone")
				Me.OnGPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GEmail", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GEmail() As String
		Get
			Return Me._GEmail
		End Get
		Set
			If (String.Equals(Me._GEmail, value) = false) Then
				Me.OnGEmailChanging(value)
				Me.SendPropertyChanging
				Me._GEmail = value
				Me.SendPropertyChanged("GEmail")
				Me.OnGEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanAmount", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property LoanAmount() As Decimal
		Get
			Return Me._LoanAmount
		End Get
		Set
			If ((Me._LoanAmount = value)  _
						= false) Then
				Me.OnLoanAmountChanging(value)
				Me.SendPropertyChanging
				Me._LoanAmount = value
				Me.SendPropertyChanged("LoanAmount")
				Me.OnLoanAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Purpose", DbType:="NVarChar(MAX)")>  _
	Public Property Purpose() As String
		Get
			Return Me._Purpose
		End Get
		Set
			If (String.Equals(Me._Purpose, value) = false) Then
				Me.OnPurposeChanging(value)
				Me.SendPropertyChanging
				Me._Purpose = value
				Me.SendPropertyChanged("Purpose")
				Me.OnPurposeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCollected", DbType:="Date NOT NULL")>  _
	Public Property DateCollected() As Date
		Get
			Return Me._DateCollected
		End Get
		Set
			If ((Me._DateCollected = value)  _
						= false) Then
				Me.OnDateCollectedChanging(value)
				Me.SendPropertyChanging
				Me._DateCollected = value
				Me.SendPropertyChanged("DateCollected")
				Me.OnDateCollectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepaymentDate", DbType:="Date NOT NULL")>  _
	Public Property RepaymentDate() As Date
		Get
			Return Me._RepaymentDate
		End Get
		Set
			If ((Me._RepaymentDate = value)  _
						= false) Then
				Me.OnRepaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._RepaymentDate = value
				Me.SendPropertyChanged("RepaymentDate")
				Me.OnRepaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="Date")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(50)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LoanHeadTable_LoanAccountTable", Storage:="_LoanAccountTables", ThisKey:="Loanid", OtherKey:="LoanID")>  _
	Public Property LoanAccountTables() As EntitySet(Of LoanAccountTable)
		Get
			Return Me._LoanAccountTables
		End Get
		Set
			Me._LoanAccountTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LoanHeadTable_LoanPVTable", Storage:="_LoanPVTables", ThisKey:="Loanid", OtherKey:="Loanid")>  _
	Public Property LoanPVTables() As EntitySet(Of LoanPVTable)
		Get
			Return Me._LoanPVTables
		End Get
		Set
			Me._LoanPVTables.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MembershipTable_LoanHeadTable", Storage:="_MembershipTable", ThisKey:="MembershipID", OtherKey:="Memberid", IsForeignKey:=true)>  _
	Public Property MembershipTable() As MembershipTable
		Get
			Return Me._MembershipTable.Entity
		End Get
		Set
			Dim previousValue As MembershipTable = Me._MembershipTable.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MembershipTable.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MembershipTable.Entity = Nothing
					previousValue.LoanHeadTables.Remove(Me)
				End If
				Me._MembershipTable.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LoanHeadTables.Add(Me)
					Me._MembershipID = value.Memberid
				Else
					Me._MembershipID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MembershipTable")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LoanAccountTables(ByVal entity As LoanAccountTable)
		Me.SendPropertyChanging
		entity.LoanHeadTable = Me
	End Sub
	
	Private Sub detach_LoanAccountTables(ByVal entity As LoanAccountTable)
		Me.SendPropertyChanging
		entity.LoanHeadTable = Nothing
	End Sub
	
	Private Sub attach_LoanPVTables(ByVal entity As LoanPVTable)
		Me.SendPropertyChanging
		entity.LoanHeadTable = Me
	End Sub
	
	Private Sub detach_LoanPVTables(ByVal entity As LoanPVTable)
		Me.SendPropertyChanging
		entity.LoanHeadTable = Nothing
	End Sub
End Class
